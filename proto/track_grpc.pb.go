// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: track.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackServiceClient is the client API for TrackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackServiceClient interface {
	Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error)
	Pixel(ctx context.Context, in *PixelRequest, opts ...grpc.CallOption) (*PixelResponse, error)
	Record(ctx context.Context, opts ...grpc.CallOption) (TrackService_RecordClient, error)
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error)
}

type trackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackServiceClient(cc grpc.ClientConnInterface) TrackServiceClient {
	return &trackServiceClient{cc}
}

func (c *trackServiceClient) Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/track.TrackService/Track", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Pixel(ctx context.Context, in *PixelRequest, opts ...grpc.CallOption) (*PixelResponse, error) {
	out := new(PixelResponse)
	err := c.cc.Invoke(ctx, "/track.TrackService/Pixel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Record(ctx context.Context, opts ...grpc.CallOption) (TrackService_RecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrackService_ServiceDesc.Streams[0], "/track.TrackService/Record", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackServiceRecordClient{stream}
	return x, nil
}

type TrackService_RecordClient interface {
	Send(*RecordRequest) error
	Recv() (*RecordResponse, error)
	grpc.ClientStream
}

type trackServiceRecordClient struct {
	grpc.ClientStream
}

func (x *trackServiceRecordClient) Send(m *RecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trackServiceRecordClient) Recv() (*RecordResponse, error) {
	m := new(RecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackServiceClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error) {
	out := new(CallbackResponse)
	err := c.cc.Invoke(ctx, "/track.TrackService/Callback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackServiceServer is the server API for TrackService service.
// All implementations must embed UnimplementedTrackServiceServer
// for forward compatibility
type TrackServiceServer interface {
	Track(context.Context, *TrackRequest) (*TrackResponse, error)
	Pixel(context.Context, *PixelRequest) (*PixelResponse, error)
	Record(TrackService_RecordServer) error
	Callback(context.Context, *CallbackRequest) (*CallbackResponse, error)
	mustEmbedUnimplementedTrackServiceServer()
}

// UnimplementedTrackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackServiceServer struct {
}

func (UnimplementedTrackServiceServer) Track(context.Context, *TrackRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Track not implemented")
}
func (UnimplementedTrackServiceServer) Pixel(context.Context, *PixelRequest) (*PixelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pixel not implemented")
}
func (UnimplementedTrackServiceServer) Record(TrackService_RecordServer) error {
	return status.Errorf(codes.Unimplemented, "method Record not implemented")
}
func (UnimplementedTrackServiceServer) Callback(context.Context, *CallbackRequest) (*CallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedTrackServiceServer) mustEmbedUnimplementedTrackServiceServer() {}

// UnsafeTrackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackServiceServer will
// result in compilation errors.
type UnsafeTrackServiceServer interface {
	mustEmbedUnimplementedTrackServiceServer()
}

func RegisterTrackServiceServer(s grpc.ServiceRegistrar, srv TrackServiceServer) {
	s.RegisterService(&TrackService_ServiceDesc, srv)
}

func _TrackService_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackService/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Track(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Pixel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Pixel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackService/Pixel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Pixel(ctx, req.(*PixelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Record_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackServiceServer).Record(&trackServiceRecordServer{stream})
}

type TrackService_RecordServer interface {
	Send(*RecordResponse) error
	Recv() (*RecordRequest, error)
	grpc.ServerStream
}

type trackServiceRecordServer struct {
	grpc.ServerStream
}

func (x *trackServiceRecordServer) Send(m *RecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trackServiceRecordServer) Recv() (*RecordRequest, error) {
	m := new(RecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TrackService_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/track.TrackService/Callback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Callback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackService_ServiceDesc is the grpc.ServiceDesc for TrackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "track.TrackService",
	HandlerType: (*TrackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Track",
			Handler:    _TrackService_Track_Handler,
		},
		{
			MethodName: "Pixel",
			Handler:    _TrackService_Pixel_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _TrackService_Callback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Record",
			Handler:       _TrackService_Record_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "track.proto",
}
