// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ads.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAdsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAdsRequestMultiError,
// or nil if none found.
func (m *ListAdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnterpriseId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListAdsRequestMultiError(errors)
	}

	return nil
}

// ListAdsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAdsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdsRequestMultiError) AllErrors() []error { return m }

// ListAdsRequestValidationError is the validation error returned by
// ListAdsRequest.Validate if the designated constraints aren't met.
type ListAdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdsRequestValidationError) ErrorName() string { return "ListAdsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdsRequestValidationError{}

// Validate checks the field values on ListAdsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdsResponseMultiError, or nil if none found.
func (m *ListAdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdsResponseValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdsResponseValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdsResponseValidationError{
					field:  fmt.Sprintf("Ads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAdsResponseMultiError(errors)
	}

	return nil
}

// ListAdsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAdsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdsResponseMultiError) AllErrors() []error { return m }

// ListAdsResponseValidationError is the validation error returned by
// ListAdsResponse.Validate if the designated constraints aren't met.
type ListAdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdsResponseValidationError) ErrorName() string { return "ListAdsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdsResponseValidationError{}

// Validate checks the field values on ListAdgroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdgroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdgroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdgroupsRequestMultiError, or nil if none found.
func (m *ListAdgroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdgroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdgroupsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdgroupsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdgroupsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnterpriseId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListAdgroupsRequestMultiError(errors)
	}

	return nil
}

// ListAdgroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdgroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAdgroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdgroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdgroupsRequestMultiError) AllErrors() []error { return m }

// ListAdgroupsRequestValidationError is the validation error returned by
// ListAdgroupsRequest.Validate if the designated constraints aren't met.
type ListAdgroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdgroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdgroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdgroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdgroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdgroupsRequestValidationError) ErrorName() string {
	return "ListAdgroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdgroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdgroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdgroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdgroupsRequestValidationError{}

// Validate checks the field values on ListAdgroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdgroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdgroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdgroupsResponseMultiError, or nil if none found.
func (m *ListAdgroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdgroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdgroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdgroupsResponseValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdgroupsResponseValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdgroupsResponseValidationError{
					field:  fmt.Sprintf("Adgroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdgroupsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdgroupsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdgroupsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAdgroupsResponseMultiError(errors)
	}

	return nil
}

// ListAdgroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAdgroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAdgroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdgroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdgroupsResponseMultiError) AllErrors() []error { return m }

// ListAdgroupsResponseValidationError is the validation error returned by
// ListAdgroupsResponse.Validate if the designated constraints aren't met.
type ListAdgroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdgroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdgroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdgroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdgroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdgroupsResponseValidationError) ErrorName() string {
	return "ListAdgroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdgroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdgroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdgroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdgroupsResponseValidationError{}
