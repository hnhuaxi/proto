// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: track.proto

package proto

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	common "github.com/hnhuaxi/proto/proto/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdMode int32

const (
	AdMode_AD_MODE_UNKNOWN AdMode = 0
	AdMode_AD_MODE_QRCODE  AdMode = 1 // 二维码
	AdMode_AD_MODE_HOUKE   AdMode = 2 // 获客链接
)

// Enum value maps for AdMode.
var (
	AdMode_name = map[int32]string{
		0: "AD_MODE_UNKNOWN",
		1: "AD_MODE_QRCODE",
		2: "AD_MODE_HOUKE",
	}
	AdMode_value = map[string]int32{
		"AD_MODE_UNKNOWN": 0,
		"AD_MODE_QRCODE":  1,
		"AD_MODE_HOUKE":   2,
	}
)

func (x AdMode) Enum() *AdMode {
	p := new(AdMode)
	*p = x
	return p
}

func (x AdMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdMode) Descriptor() protoreflect.EnumDescriptor {
	return file_track_proto_enumTypes[0].Descriptor()
}

func (AdMode) Type() protoreflect.EnumType {
	return &file_track_proto_enumTypes[0]
}

func (x AdMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdMode.Descriptor instead.
func (AdMode) EnumDescriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{0}
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AdsetId   uint32                 `protobuf:"varint,2,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Trackid   string                 `protobuf:"bytes,3,opt,name=trackid,proto3" json:"trackid,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	EventType string                 `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ClickId   string                 `protobuf:"bytes,6,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	AccountId string                 `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Ip        string                 `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Params    *ActionParams          `protobuf:"bytes,9,opt,name=params,proto3" json:"params,omitempty"`
	UserInfo  *common.UserInfo       `protobuf:"bytes,10,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{0}
}

func (x *Track) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Track) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *Track) GetTrackid() string {
	if x != nil {
		return x.Trackid
	}
	return ""
}

func (x *Track) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Track) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Track) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *Track) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Track) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Track) GetParams() *ActionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Track) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type TrackState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId   uint32                 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	ClickId   string                 `protobuf:"bytes,2,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	State     string                 `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Scene     string                 `protobuf:"bytes,4,opt,name=scene,proto3" json:"scene,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TrackState) Reset() {
	*x = TrackState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackState) ProtoMessage() {}

func (x *TrackState) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackState.ProtoReflect.Descriptor instead.
func (*TrackState) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{1}
}

func (x *TrackState) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *TrackState) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *TrackState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TrackState) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

func (x *TrackState) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type TrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId   uint32        `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Trackid   string        `protobuf:"bytes,2,opt,name=trackid,proto3" json:"trackid,omitempty"`
	EventType string        `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ClickId   string        `protobuf:"bytes,4,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	Ip        string        `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	State     string        `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	AccountId string        `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Group     string        `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	Params    *ActionParams `protobuf:"bytes,9,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *TrackRequest) Reset() {
	*x = TrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRequest) ProtoMessage() {}

func (x *TrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRequest.ProtoReflect.Descriptor instead.
func (*TrackRequest) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{2}
}

func (x *TrackRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *TrackRequest) GetTrackid() string {
	if x != nil {
		return x.Trackid
	}
	return ""
}

func (x *TrackRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TrackRequest) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *TrackRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TrackRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TrackRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *TrackRequest) GetParams() *ActionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type Configure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Prompt       string           `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Mode         string           `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`              // 广告模式
	ScrollX1     float32          `protobuf:"fixed32,4,opt,name=scrollX1,proto3" json:"scrollX1,omitempty"`    // 滚动系数1
	ScrollX2     float32          `protobuf:"fixed32,5,opt,name=scrollX2,proto3" json:"scrollX2,omitempty"`    // 滚动系数2
	ScrollX3     float32          `protobuf:"fixed32,6,opt,name=scrollX3,proto3" json:"scrollX3,omitempty"`    // 滚动系数3
	StayTimeX1   uint32           `protobuf:"varint,7,opt,name=stayTimeX1,proto3" json:"stayTimeX1,omitempty"` // 停留时间系数1
	StayTimeX2   uint32           `protobuf:"varint,8,opt,name=stayTimeX2,proto3" json:"stayTimeX2,omitempty"` // 停留时间系数2
	StayTimeX3   uint32           `protobuf:"varint,9,opt,name=stayTimeX3,proto3" json:"stayTimeX3,omitempty"` // 停留时间系数3
	RetX1        float32          `protobuf:"fixed32,10,opt,name=retX1,proto3" json:"retX1,omitempty"`         // 回调系数1
	RetX2        float32          `protobuf:"fixed32,11,opt,name=retX2,proto3" json:"retX2,omitempty"`         // 回调系数2
	Weixin       string           `protobuf:"bytes,12,opt,name=weixin,proto3" json:"weixin,omitempty"`
	QrcodeUrl    string           `protobuf:"bytes,13,opt,name=qrcode_url,json=qrcodeUrl,proto3" json:"qrcode_url,omitempty"`
	Phonenumber  string           `protobuf:"bytes,14,opt,name=phonenumber,proto3" json:"phonenumber,omitempty"`
	WebUrl       string           `protobuf:"bytes,15,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	Urls         []string         `protobuf:"bytes,16,rep,name=urls,proto3" json:"urls,omitempty"`
	HuokeUrls    []string         `protobuf:"bytes,17,rep,name=huoke_urls,json=huokeUrls,proto3" json:"huoke_urls,omitempty"`
	M            *GyroscopeParams `protobuf:"bytes,18,opt,name=m,proto3" json:"m,omitempty"`
	StateClickId string           `protobuf:"bytes,19,opt,name=state_click_id,json=stateClickId,proto3" json:"state_click_id,omitempty"`
	UsedScenes   []string         `protobuf:"bytes,20,rep,name=used_scenes,json=usedScenes,proto3" json:"used_scenes,omitempty"`
	ButtonDelay  *int32           `protobuf:"varint,21,opt,name=button_delay,json=buttonDelay,proto3,oneof" json:"button_delay,omitempty"`
}

func (x *Configure) Reset() {
	*x = Configure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configure) ProtoMessage() {}

func (x *Configure) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configure.ProtoReflect.Descriptor instead.
func (*Configure) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{3}
}

func (x *Configure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Configure) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *Configure) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Configure) GetScrollX1() float32 {
	if x != nil {
		return x.ScrollX1
	}
	return 0
}

func (x *Configure) GetScrollX2() float32 {
	if x != nil {
		return x.ScrollX2
	}
	return 0
}

func (x *Configure) GetScrollX3() float32 {
	if x != nil {
		return x.ScrollX3
	}
	return 0
}

func (x *Configure) GetStayTimeX1() uint32 {
	if x != nil {
		return x.StayTimeX1
	}
	return 0
}

func (x *Configure) GetStayTimeX2() uint32 {
	if x != nil {
		return x.StayTimeX2
	}
	return 0
}

func (x *Configure) GetStayTimeX3() uint32 {
	if x != nil {
		return x.StayTimeX3
	}
	return 0
}

func (x *Configure) GetRetX1() float32 {
	if x != nil {
		return x.RetX1
	}
	return 0
}

func (x *Configure) GetRetX2() float32 {
	if x != nil {
		return x.RetX2
	}
	return 0
}

func (x *Configure) GetWeixin() string {
	if x != nil {
		return x.Weixin
	}
	return ""
}

func (x *Configure) GetQrcodeUrl() string {
	if x != nil {
		return x.QrcodeUrl
	}
	return ""
}

func (x *Configure) GetPhonenumber() string {
	if x != nil {
		return x.Phonenumber
	}
	return ""
}

func (x *Configure) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *Configure) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *Configure) GetHuokeUrls() []string {
	if x != nil {
		return x.HuokeUrls
	}
	return nil
}

func (x *Configure) GetM() *GyroscopeParams {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *Configure) GetStateClickId() string {
	if x != nil {
		return x.StateClickId
	}
	return ""
}

func (x *Configure) GetUsedScenes() []string {
	if x != nil {
		return x.UsedScenes
	}
	return nil
}

func (x *Configure) GetButtonDelay() int32 {
	if x != nil && x.ButtonDelay != nil {
		return *x.ButtonDelay
	}
	return 0
}

type JumpSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Weburl   string `protobuf:"bytes,2,opt,name=weburl,proto3" json:"weburl,omitempty"`
	Minilink string `protobuf:"bytes,3,opt,name=minilink,proto3" json:"minilink,omitempty"`
}

func (x *JumpSchema) Reset() {
	*x = JumpSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JumpSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JumpSchema) ProtoMessage() {}

func (x *JumpSchema) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JumpSchema.ProtoReflect.Descriptor instead.
func (*JumpSchema) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{4}
}

func (x *JumpSchema) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *JumpSchema) GetWeburl() string {
	if x != nil {
		return x.Weburl
	}
	return ""
}

func (x *JumpSchema) GetMinilink() string {
	if x != nil {
		return x.Minilink
	}
	return ""
}

type ClickState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClickId string `protobuf:"bytes,1,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	State   string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ClickState) Reset() {
	*x = ClickState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickState) ProtoMessage() {}

func (x *ClickState) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickState.ProtoReflect.Descriptor instead.
func (*ClickState) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{5}
}

func (x *ClickState) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *ClickState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type TrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resp:
	//
	//	*TrackResponse_Empty
	//	*TrackResponse_Config
	//	*TrackResponse_Schema
	//	*TrackResponse_State
	Resp isTrackResponse_Resp `protobuf_oneof:"resp"`
}

func (x *TrackResponse) Reset() {
	*x = TrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackResponse) ProtoMessage() {}

func (x *TrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackResponse.ProtoReflect.Descriptor instead.
func (*TrackResponse) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{6}
}

func (m *TrackResponse) GetResp() isTrackResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (x *TrackResponse) GetEmpty() *emptypb.Empty {
	if x, ok := x.GetResp().(*TrackResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *TrackResponse) GetConfig() *Configure {
	if x, ok := x.GetResp().(*TrackResponse_Config); ok {
		return x.Config
	}
	return nil
}

func (x *TrackResponse) GetSchema() *JumpSchema {
	if x, ok := x.GetResp().(*TrackResponse_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *TrackResponse) GetState() *ClickState {
	if x, ok := x.GetResp().(*TrackResponse_State); ok {
		return x.State
	}
	return nil
}

type isTrackResponse_Resp interface {
	isTrackResponse_Resp()
}

type TrackResponse_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type TrackResponse_Config struct {
	Config *Configure `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

type TrackResponse_Schema struct {
	Schema *JumpSchema `protobuf:"bytes,3,opt,name=schema,proto3,oneof"`
}

type TrackResponse_State struct {
	State *ClickState `protobuf:"bytes,4,opt,name=state,proto3,oneof"`
}

func (*TrackResponse_Empty) isTrackResponse_Resp() {}

func (*TrackResponse_Config) isTrackResponse_Resp() {}

func (*TrackResponse_Schema) isTrackResponse_Resp() {}

func (*TrackResponse_State) isTrackResponse_Resp() {}

type ActionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Staytime        *uint32          `protobuf:"varint,1,opt,name=staytime,proto3,oneof" json:"staytime,omitempty"`
	ScrollPercent   *float32         `protobuf:"fixed32,2,opt,name=scrollPercent,proto3,oneof" json:"scrollPercent,omitempty"`
	Url             *string          `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Referrer        *string          `protobuf:"bytes,4,opt,name=referrer,proto3,oneof" json:"referrer,omitempty"`
	Weixin          *string          `protobuf:"bytes,5,opt,name=weixin,proto3,oneof" json:"weixin,omitempty"`
	Position        *string          `protobuf:"bytes,6,opt,name=position,proto3,oneof" json:"position,omitempty"`
	UserAgent       *string          `protobuf:"bytes,7,opt,name=userAgent,proto3,oneof" json:"userAgent,omitempty"`
	ProductName     *string          `protobuf:"bytes,8,opt,name=product_name,json=productName,proto3,oneof" json:"product_name,omitempty"`
	ProductPrice    *float32         `protobuf:"fixed32,9,opt,name=product_price,json=productPrice,proto3,oneof" json:"product_price,omitempty"`
	ProductTotal    *float32         `protobuf:"fixed32,10,opt,name=product_total,json=productTotal,proto3,oneof" json:"product_total,omitempty"`
	ProductQuantity *int32           `protobuf:"varint,11,opt,name=product_quantity,json=productQuantity,proto3,oneof" json:"product_quantity,omitempty"`
	Phonenumber     *string          `protobuf:"bytes,12,opt,name=phonenumber,proto3,oneof" json:"phonenumber,omitempty"`
	M               *GyroscopeParams `protobuf:"bytes,13,opt,name=m,proto3,oneof" json:"m,omitempty"`
	Scene           *string          `protobuf:"bytes,14,opt,name=scene,proto3,oneof" json:"scene,omitempty"`
}

func (x *ActionParams) Reset() {
	*x = ActionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionParams) ProtoMessage() {}

func (x *ActionParams) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionParams.ProtoReflect.Descriptor instead.
func (*ActionParams) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{7}
}

func (x *ActionParams) GetStaytime() uint32 {
	if x != nil && x.Staytime != nil {
		return *x.Staytime
	}
	return 0
}

func (x *ActionParams) GetScrollPercent() float32 {
	if x != nil && x.ScrollPercent != nil {
		return *x.ScrollPercent
	}
	return 0
}

func (x *ActionParams) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ActionParams) GetReferrer() string {
	if x != nil && x.Referrer != nil {
		return *x.Referrer
	}
	return ""
}

func (x *ActionParams) GetWeixin() string {
	if x != nil && x.Weixin != nil {
		return *x.Weixin
	}
	return ""
}

func (x *ActionParams) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *ActionParams) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *ActionParams) GetProductName() string {
	if x != nil && x.ProductName != nil {
		return *x.ProductName
	}
	return ""
}

func (x *ActionParams) GetProductPrice() float32 {
	if x != nil && x.ProductPrice != nil {
		return *x.ProductPrice
	}
	return 0
}

func (x *ActionParams) GetProductTotal() float32 {
	if x != nil && x.ProductTotal != nil {
		return *x.ProductTotal
	}
	return 0
}

func (x *ActionParams) GetProductQuantity() int32 {
	if x != nil && x.ProductQuantity != nil {
		return *x.ProductQuantity
	}
	return 0
}

func (x *ActionParams) GetPhonenumber() string {
	if x != nil && x.Phonenumber != nil {
		return *x.Phonenumber
	}
	return ""
}

func (x *ActionParams) GetM() *GyroscopeParams {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *ActionParams) GetScene() string {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return ""
}

type GyroscopeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *GyroscopeParams) Reset() {
	*x = GyroscopeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GyroscopeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GyroscopeParams) ProtoMessage() {}

func (x *GyroscopeParams) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GyroscopeParams.ProtoReflect.Descriptor instead.
func (*GyroscopeParams) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{8}
}

func (x *GyroscopeParams) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *GyroscopeParams) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *GyroscopeParams) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type PixelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trackid string `protobuf:"bytes,1,opt,name=trackid,proto3" json:"trackid,omitempty"`
}

func (x *PixelRequest) Reset() {
	*x = PixelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PixelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PixelRequest) ProtoMessage() {}

func (x *PixelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PixelRequest.ProtoReflect.Descriptor instead.
func (*PixelRequest) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{9}
}

func (x *PixelRequest) GetTrackid() string {
	if x != nil {
		return x.Trackid
	}
	return ""
}

type PixelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image   []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Trackid string `protobuf:"bytes,2,opt,name=trackid,proto3" json:"trackid,omitempty"`
}

func (x *PixelResponse) Reset() {
	*x = PixelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PixelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PixelResponse) ProtoMessage() {}

func (x *PixelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PixelResponse.ProtoReflect.Descriptor instead.
func (*PixelResponse) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{10}
}

func (x *PixelResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *PixelResponse) GetTrackid() string {
	if x != nil {
		return x.Trackid
	}
	return ""
}

type Pushed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AdsetId       uint32                 `protobuf:"varint,2,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PushAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=push_at,json=pushAt,proto3" json:"push_at,omitempty"`
	Delay         *durationpb.Duration   `protobuf:"bytes,5,opt,name=delay,proto3" json:"delay,omitempty"`
	TrackId       string                 `protobuf:"bytes,6,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	ClickId       string                 `protobuf:"bytes,7,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	AccountId     string                 `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EventType     string                 `protobuf:"bytes,9,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Group         string                 `protobuf:"bytes,10,opt,name=group,proto3" json:"group,omitempty"`
	StayTime      uint32                 `protobuf:"varint,11,opt,name=stay_time,json=stayTime,proto3" json:"stay_time,omitempty"`
	ScrollPercent float32                `protobuf:"fixed32,12,opt,name=scroll_percent,json=scrollPercent,proto3" json:"scroll_percent,omitempty"`
	Status        string                 `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	UserId        uint32                 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	User          *common.User           `protobuf:"bytes,15,opt,name=user,proto3" json:"user,omitempty"`
	Weixin        string                 `protobuf:"bytes,16,opt,name=weixin,proto3" json:"weixin,omitempty"`
	Lock          bool                   `protobuf:"varint,17,opt,name=lock,proto3" json:"lock,omitempty"`
	Deep          bool                   `protobuf:"varint,18,opt,name=deep,proto3" json:"deep,omitempty"`
	M             *GyroscopeParams       `protobuf:"bytes,19,opt,name=m,proto3" json:"m,omitempty"`
	UserInfo      *common.UserInfo       `protobuf:"bytes,20,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
}

func (x *Pushed) Reset() {
	*x = Pushed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pushed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pushed) ProtoMessage() {}

func (x *Pushed) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pushed.ProtoReflect.Descriptor instead.
func (*Pushed) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{11}
}

func (x *Pushed) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pushed) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *Pushed) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Pushed) GetPushAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PushAt
	}
	return nil
}

func (x *Pushed) GetDelay() *durationpb.Duration {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *Pushed) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *Pushed) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *Pushed) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Pushed) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Pushed) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Pushed) GetStayTime() uint32 {
	if x != nil {
		return x.StayTime
	}
	return 0
}

func (x *Pushed) GetScrollPercent() float32 {
	if x != nil {
		return x.ScrollPercent
	}
	return 0
}

func (x *Pushed) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Pushed) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Pushed) GetUser() *common.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Pushed) GetWeixin() string {
	if x != nil {
		return x.Weixin
	}
	return ""
}

func (x *Pushed) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

func (x *Pushed) GetDeep() bool {
	if x != nil {
		return x.Deep
	}
	return false
}

func (x *Pushed) GetM() *GyroscopeParams {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *Pushed) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type RecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
}

func (x *RecordRequest) Reset() {
	*x = RecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRequest) ProtoMessage() {}

func (x *RecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRequest.ProtoReflect.Descriptor instead.
func (*RecordRequest) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{12}
}

func (x *RecordRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

type RecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
}

func (x *RecordResponse) Reset() {
	*x = RecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordResponse) ProtoMessage() {}

func (x *RecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordResponse.ProtoReflect.Descriptor instead.
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{13}
}

func (x *RecordResponse) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

type CallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider    string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"` // 来源方
	Aid         string                 `protobuf:"bytes,2,opt,name=aid,proto3" json:"aid,omitempty"`
	Adid        string                 `protobuf:"bytes,3,opt,name=adid,proto3" json:"adid,omitempty"`
	AccountId   string                 `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ClickId     string                 `protobuf:"bytes,5,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	CallbackUrl string                 `protobuf:"bytes,6,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"` // 回调 url
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ip          string                 `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	UserAgent   string                 `protobuf:"bytes,9,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Imei        *string                `protobuf:"bytes,10,opt,name=imei,proto3,oneof" json:"imei,omitempty"`
	Idfa        *string                `protobuf:"bytes,11,opt,name=idfa,proto3,oneof" json:"idfa,omitempty"`
	Os          *string                `protobuf:"bytes,12,opt,name=os,proto3,oneof" json:"os,omitempty"`
	Mac         *string                `protobuf:"bytes,13,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	Model       *string                `protobuf:"bytes,14,opt,name=model,proto3,oneof" json:"model,omitempty"`
	ImeiMd5     *string                `protobuf:"bytes,15,opt,name=imei_md5,json=imeiMd5,proto3,oneof" json:"imei_md5,omitempty"`
	IdfaMd5     *string                `protobuf:"bytes,16,opt,name=idfa_md5,json=idfaMd5,proto3,oneof" json:"idfa_md5,omitempty"`
}

func (x *CallbackRequest) Reset() {
	*x = CallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackRequest) ProtoMessage() {}

func (x *CallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackRequest.ProtoReflect.Descriptor instead.
func (*CallbackRequest) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{14}
}

func (x *CallbackRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CallbackRequest) GetAid() string {
	if x != nil {
		return x.Aid
	}
	return ""
}

func (x *CallbackRequest) GetAdid() string {
	if x != nil {
		return x.Adid
	}
	return ""
}

func (x *CallbackRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CallbackRequest) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *CallbackRequest) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *CallbackRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CallbackRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CallbackRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *CallbackRequest) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *CallbackRequest) GetIdfa() string {
	if x != nil && x.Idfa != nil {
		return *x.Idfa
	}
	return ""
}

func (x *CallbackRequest) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *CallbackRequest) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CallbackRequest) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *CallbackRequest) GetImeiMd5() string {
	if x != nil && x.ImeiMd5 != nil {
		return *x.ImeiMd5
	}
	return ""
}

func (x *CallbackRequest) GetIdfaMd5() string {
	if x != nil && x.IdfaMd5 != nil {
		return *x.IdfaMd5
	}
	return ""
}

type Callback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider    string                 `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"` // 来源方
	Aid         string                 `protobuf:"bytes,3,opt,name=aid,proto3" json:"aid,omitempty"`
	AdsetId     uint32                 `protobuf:"varint,4,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	AccountId   string                 `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ClickId     string                 `protobuf:"bytes,6,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	CallbackUrl string                 `protobuf:"bytes,7,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"` // 回调 url
	Ip          string                 `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	UserAgent   string                 `protobuf:"bytes,9,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Imei        *string                `protobuf:"bytes,11,opt,name=imei,proto3,oneof" json:"imei,omitempty"`
	Mac         *string                `protobuf:"bytes,12,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	Model       *string                `protobuf:"bytes,13,opt,name=model,proto3,oneof" json:"model,omitempty"`
	Idfa        *string                `protobuf:"bytes,14,opt,name=idfa,proto3,oneof" json:"idfa,omitempty"`
	ImeiMd5     *string                `protobuf:"bytes,15,opt,name=imei_md5,json=imeiMd5,proto3,oneof" json:"imei_md5,omitempty"`
	IdfaMd5     *string                `protobuf:"bytes,16,opt,name=idfa_md5,json=idfaMd5,proto3,oneof" json:"idfa_md5,omitempty"`
	Os          *string                `protobuf:"bytes,17,opt,name=os,proto3,oneof" json:"os,omitempty"`
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdateTime  *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	PushTime    *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=push_time,json=pushTime,proto3" json:"push_time,omitempty"`
}

func (x *Callback) Reset() {
	*x = Callback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Callback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Callback) ProtoMessage() {}

func (x *Callback) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Callback.ProtoReflect.Descriptor instead.
func (*Callback) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{15}
}

func (x *Callback) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Callback) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Callback) GetAid() string {
	if x != nil {
		return x.Aid
	}
	return ""
}

func (x *Callback) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *Callback) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Callback) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *Callback) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *Callback) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Callback) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Callback) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Callback) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *Callback) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *Callback) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Callback) GetIdfa() string {
	if x != nil && x.Idfa != nil {
		return *x.Idfa
	}
	return ""
}

func (x *Callback) GetImeiMd5() string {
	if x != nil && x.ImeiMd5 != nil {
		return *x.ImeiMd5
	}
	return ""
}

func (x *Callback) GetIdfaMd5() string {
	if x != nil && x.IdfaMd5 != nil {
		return *x.IdfaMd5
	}
	return ""
}

func (x *Callback) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *Callback) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Callback) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Callback) GetPushTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PushTime
	}
	return nil
}

type CallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallbackResponse) Reset() {
	*x = CallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackResponse) ProtoMessage() {}

func (x *CallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackResponse.ProtoReflect.Descriptor instead.
func (*CallbackResponse) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{16}
}

var File_track_proto protoreflect.FileDescriptor

var file_track_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcc, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xa9, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0xf6, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x31, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x31, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x58, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x58, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x58, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x58, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x58, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x58, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x58, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x58, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x58, 0x31, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x65, 0x74, 0x58, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x74, 0x58, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x65, 0x74, 0x58,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x75, 0x6f, 0x6b, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x75, 0x6f,
	0x6b, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x01, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x01, 0x6d, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x52, 0x0a, 0x0a,
	0x4a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x62, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65,
	0x62, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x3d, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xcb, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4a, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0xd0, 0x05,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x01, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x0c, 0x52, 0x01, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x74, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x04, 0x0a, 0x02, 0x5f, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x28, 0x0a,
	0x0c, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x22, 0x8a, 0x05, 0x0a, 0x06, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x41, 0x74, 0x12, 0x2f,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x65, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x65, 0x70,
	0x12, 0x24, 0x0a, 0x01, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x2e, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x01, 0x6d, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x2b, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x97,
	0x04, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72,
	0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6d,
	0x65, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x64, 0x66, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x64, 0x66, 0x61, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6d, 0x65, 0x69, 0x5f, 0x6d, 0x64, 0x35, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x69, 0x6d, 0x65, 0x69, 0x4d, 0x64, 0x35,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x64, 0x66, 0x61, 0x5f, 0x6d, 0x64, 0x35, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x69, 0x64, 0x66, 0x61, 0x4d, 0x64, 0x35,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6d, 0x65, 0x69, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x64, 0x66, 0x61, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6f, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6d, 0x61, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x65, 0x69, 0x5f, 0x6d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x64, 0x66, 0x61, 0x5f, 0x6d, 0x64, 0x35, 0x22, 0xdc, 0x05, 0x0a, 0x08, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x69, 0x64, 0x66, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x04, 0x69, 0x64, 0x66, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6d, 0x65, 0x69,
	0x5f, 0x6d, 0x64, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x69, 0x6d,
	0x65, 0x69, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x64, 0x66, 0x61,
	0x5f, 0x6d, 0x64, 0x35, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x69, 0x64,
	0x66, 0x61, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x02, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6d, 0x65, 0x69, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x61, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x65, 0x69, 0x5f,
	0x6d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x5f, 0x6d, 0x64, 0x35,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6f, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x44, 0x0a, 0x06, 0x41,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x4b, 0x45, 0x10,
	0x02, 0x32, 0x9e, 0x05, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x92, 0x41, 0x5b, 0x0a, 0x19, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x64, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x20, 0x61,
	0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x44, 0x1a, 0x2a, 0x50, 0x6f,
	0x73, 0x74, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01,
	0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x05,
	0x50, 0x69, 0x78, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x69,
	0x78, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5b, 0x92, 0x41, 0x40, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x41, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x31, 0x78, 0x31, 0x20, 0x70, 0x69, 0x78,
	0x65, 0x6c, 0x20, 0x67, 0x69, 0x66, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x12, 0x97, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x92, 0x41, 0x3d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x28, 0x01, 0x30, 0x01, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x92, 0x41, 0x45, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x75, 0x72, 0x6c, 0x1a, 0x1f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x76, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x75, 0x72, 0x6c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x7d, 0x42, 0x77, 0x92, 0x41, 0x4b, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02,
	0x01, 0x02, 0x72, 0x3e, 0x0a, 0x17, 0x4d, 0x58, 0x20, 0x61, 0x64, 0x73, 0x20, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x68, 0x6e, 0x68, 0x75, 0x61, 0x78, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x6e, 0x68, 0x75, 0x61, 0x78, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_track_proto_rawDescOnce sync.Once
	file_track_proto_rawDescData = file_track_proto_rawDesc
)

func file_track_proto_rawDescGZIP() []byte {
	file_track_proto_rawDescOnce.Do(func() {
		file_track_proto_rawDescData = protoimpl.X.CompressGZIP(file_track_proto_rawDescData)
	})
	return file_track_proto_rawDescData
}

var file_track_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_track_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_track_proto_goTypes = []interface{}{
	(AdMode)(0),                   // 0: track.AdMode
	(*Track)(nil),                 // 1: track.Track
	(*TrackState)(nil),            // 2: track.TrackState
	(*TrackRequest)(nil),          // 3: track.TrackRequest
	(*Configure)(nil),             // 4: track.Configure
	(*JumpSchema)(nil),            // 5: track.JumpSchema
	(*ClickState)(nil),            // 6: track.ClickState
	(*TrackResponse)(nil),         // 7: track.TrackResponse
	(*ActionParams)(nil),          // 8: track.ActionParams
	(*GyroscopeParams)(nil),       // 9: track.GyroscopeParams
	(*PixelRequest)(nil),          // 10: track.PixelRequest
	(*PixelResponse)(nil),         // 11: track.PixelResponse
	(*Pushed)(nil),                // 12: track.Pushed
	(*RecordRequest)(nil),         // 13: track.RecordRequest
	(*RecordResponse)(nil),        // 14: track.RecordResponse
	(*CallbackRequest)(nil),       // 15: track.CallbackRequest
	(*Callback)(nil),              // 16: track.Callback
	(*CallbackResponse)(nil),      // 17: track.CallbackResponse
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
	(*common.UserInfo)(nil),       // 19: common.UserInfo
	(*emptypb.Empty)(nil),         // 20: google.protobuf.Empty
	(*durationpb.Duration)(nil),   // 21: google.protobuf.Duration
	(*common.User)(nil),           // 22: common.User
}
var file_track_proto_depIdxs = []int32{
	18, // 0: track.Track.created_at:type_name -> google.protobuf.Timestamp
	8,  // 1: track.Track.params:type_name -> track.ActionParams
	19, // 2: track.Track.user_info:type_name -> common.UserInfo
	18, // 3: track.TrackState.created_at:type_name -> google.protobuf.Timestamp
	8,  // 4: track.TrackRequest.params:type_name -> track.ActionParams
	9,  // 5: track.Configure.m:type_name -> track.GyroscopeParams
	20, // 6: track.TrackResponse.empty:type_name -> google.protobuf.Empty
	4,  // 7: track.TrackResponse.config:type_name -> track.Configure
	5,  // 8: track.TrackResponse.schema:type_name -> track.JumpSchema
	6,  // 9: track.TrackResponse.state:type_name -> track.ClickState
	9,  // 10: track.ActionParams.m:type_name -> track.GyroscopeParams
	18, // 11: track.Pushed.created_at:type_name -> google.protobuf.Timestamp
	18, // 12: track.Pushed.push_at:type_name -> google.protobuf.Timestamp
	21, // 13: track.Pushed.delay:type_name -> google.protobuf.Duration
	22, // 14: track.Pushed.user:type_name -> common.User
	9,  // 15: track.Pushed.m:type_name -> track.GyroscopeParams
	19, // 16: track.Pushed.user_info:type_name -> common.UserInfo
	18, // 17: track.CallbackRequest.timestamp:type_name -> google.protobuf.Timestamp
	18, // 18: track.Callback.timestamp:type_name -> google.protobuf.Timestamp
	18, // 19: track.Callback.created_time:type_name -> google.protobuf.Timestamp
	18, // 20: track.Callback.update_time:type_name -> google.protobuf.Timestamp
	18, // 21: track.Callback.push_time:type_name -> google.protobuf.Timestamp
	3,  // 22: track.TrackService.Track:input_type -> track.TrackRequest
	10, // 23: track.TrackService.Pixel:input_type -> track.PixelRequest
	13, // 24: track.TrackService.Record:input_type -> track.RecordRequest
	15, // 25: track.TrackService.Callback:input_type -> track.CallbackRequest
	7,  // 26: track.TrackService.Track:output_type -> track.TrackResponse
	11, // 27: track.TrackService.Pixel:output_type -> track.PixelResponse
	14, // 28: track.TrackService.Record:output_type -> track.RecordResponse
	17, // 29: track.TrackService.Callback:output_type -> track.CallbackResponse
	26, // [26:30] is the sub-list for method output_type
	22, // [22:26] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_track_proto_init() }
func file_track_proto_init() {
	if File_track_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_track_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JumpSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GyroscopeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PixelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PixelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pushed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Callback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_track_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_track_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*TrackResponse_Empty)(nil),
		(*TrackResponse_Config)(nil),
		(*TrackResponse_Schema)(nil),
		(*TrackResponse_State)(nil),
	}
	file_track_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_track_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_track_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_track_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_track_proto_goTypes,
		DependencyIndexes: file_track_proto_depIdxs,
		EnumInfos:         file_track_proto_enumTypes,
		MessageInfos:      file_track_proto_msgTypes,
	}.Build()
	File_track_proto = out.File
	file_track_proto_rawDesc = nil
	file_track_proto_goTypes = nil
	file_track_proto_depIdxs = nil
}
