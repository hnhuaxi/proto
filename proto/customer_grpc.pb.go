// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: customer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceServiceClient is the client API for CustomerServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceServiceClient interface {
	ListCustomerServices(ctx context.Context, in *ListCustomerServiceRequest, opts ...grpc.CallOption) (*ListCustomerServiceResponse, error)
	ListEnterpriseCustomerServices(ctx context.Context, in *ListCustomerServiceRequest, opts ...grpc.CallOption) (*ListCustomerServiceResponse, error)
	CreateEnterpriseCustomerService(ctx context.Context, in *CreateCustomerServiceRequest, opts ...grpc.CallOption) (*CreateCustomerServiceResponse, error)
	BatchCreateEnterpriseCustomerService(ctx context.Context, in *BatchCreateCustomerServiceRequest, opts ...grpc.CallOption) (*BatchCreateCustomerServiceResponse, error)
	GetEnterpriseCustomerService(ctx context.Context, in *GetCustomerServiceRequest, opts ...grpc.CallOption) (*GetCustomerServiceResponse, error)
	UpdateEnterpriseCustomerService(ctx context.Context, in *UpdateCustomerServiceRequest, opts ...grpc.CallOption) (*UpdateCustomerServiceResponse, error)
	DeleteEnterpriseCustomerService(ctx context.Context, in *DeleteCustomerServiceRequest, opts ...grpc.CallOption) (*DeleteCustomerServiceResponse, error)
	AppendCustomerServiceToAdset(ctx context.Context, in *AppendCustomerServiceRequest, opts ...grpc.CallOption) (*AppendCustomerServiceResponse, error)
	RemoveCustomerServiceFromAdset(ctx context.Context, in *RemoveCustomerServiceRequest, opts ...grpc.CallOption) (*RemoveCustomerServiceResponse, error)
	ReplaceCustomerServiceFromAdset(ctx context.Context, in *ReplaceCustomerServiceRequest, opts ...grpc.CallOption) (*ReplaceCustomerServiceResponse, error)
}

type customerServiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceServiceClient(cc grpc.ClientConnInterface) CustomerServiceServiceClient {
	return &customerServiceServiceClient{cc}
}

func (c *customerServiceServiceClient) ListCustomerServices(ctx context.Context, in *ListCustomerServiceRequest, opts ...grpc.CallOption) (*ListCustomerServiceResponse, error) {
	out := new(ListCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/ListCustomerServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) ListEnterpriseCustomerServices(ctx context.Context, in *ListCustomerServiceRequest, opts ...grpc.CallOption) (*ListCustomerServiceResponse, error) {
	out := new(ListCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/ListEnterpriseCustomerServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) CreateEnterpriseCustomerService(ctx context.Context, in *CreateCustomerServiceRequest, opts ...grpc.CallOption) (*CreateCustomerServiceResponse, error) {
	out := new(CreateCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/CreateEnterpriseCustomerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) BatchCreateEnterpriseCustomerService(ctx context.Context, in *BatchCreateCustomerServiceRequest, opts ...grpc.CallOption) (*BatchCreateCustomerServiceResponse, error) {
	out := new(BatchCreateCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/BatchCreateEnterpriseCustomerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) GetEnterpriseCustomerService(ctx context.Context, in *GetCustomerServiceRequest, opts ...grpc.CallOption) (*GetCustomerServiceResponse, error) {
	out := new(GetCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/GetEnterpriseCustomerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) UpdateEnterpriseCustomerService(ctx context.Context, in *UpdateCustomerServiceRequest, opts ...grpc.CallOption) (*UpdateCustomerServiceResponse, error) {
	out := new(UpdateCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/UpdateEnterpriseCustomerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) DeleteEnterpriseCustomerService(ctx context.Context, in *DeleteCustomerServiceRequest, opts ...grpc.CallOption) (*DeleteCustomerServiceResponse, error) {
	out := new(DeleteCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/DeleteEnterpriseCustomerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) AppendCustomerServiceToAdset(ctx context.Context, in *AppendCustomerServiceRequest, opts ...grpc.CallOption) (*AppendCustomerServiceResponse, error) {
	out := new(AppendCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/AppendCustomerServiceToAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) RemoveCustomerServiceFromAdset(ctx context.Context, in *RemoveCustomerServiceRequest, opts ...grpc.CallOption) (*RemoveCustomerServiceResponse, error) {
	out := new(RemoveCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/RemoveCustomerServiceFromAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceServiceClient) ReplaceCustomerServiceFromAdset(ctx context.Context, in *ReplaceCustomerServiceRequest, opts ...grpc.CallOption) (*ReplaceCustomerServiceResponse, error) {
	out := new(ReplaceCustomerServiceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerServiceService/ReplaceCustomerServiceFromAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServiceServer is the server API for CustomerServiceService service.
// All implementations must embed UnimplementedCustomerServiceServiceServer
// for forward compatibility
type CustomerServiceServiceServer interface {
	ListCustomerServices(context.Context, *ListCustomerServiceRequest) (*ListCustomerServiceResponse, error)
	ListEnterpriseCustomerServices(context.Context, *ListCustomerServiceRequest) (*ListCustomerServiceResponse, error)
	CreateEnterpriseCustomerService(context.Context, *CreateCustomerServiceRequest) (*CreateCustomerServiceResponse, error)
	BatchCreateEnterpriseCustomerService(context.Context, *BatchCreateCustomerServiceRequest) (*BatchCreateCustomerServiceResponse, error)
	GetEnterpriseCustomerService(context.Context, *GetCustomerServiceRequest) (*GetCustomerServiceResponse, error)
	UpdateEnterpriseCustomerService(context.Context, *UpdateCustomerServiceRequest) (*UpdateCustomerServiceResponse, error)
	DeleteEnterpriseCustomerService(context.Context, *DeleteCustomerServiceRequest) (*DeleteCustomerServiceResponse, error)
	AppendCustomerServiceToAdset(context.Context, *AppendCustomerServiceRequest) (*AppendCustomerServiceResponse, error)
	RemoveCustomerServiceFromAdset(context.Context, *RemoveCustomerServiceRequest) (*RemoveCustomerServiceResponse, error)
	ReplaceCustomerServiceFromAdset(context.Context, *ReplaceCustomerServiceRequest) (*ReplaceCustomerServiceResponse, error)
	mustEmbedUnimplementedCustomerServiceServiceServer()
}

// UnimplementedCustomerServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServiceServer struct {
}

func (UnimplementedCustomerServiceServiceServer) ListCustomerServices(context.Context, *ListCustomerServiceRequest) (*ListCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomerServices not implemented")
}
func (UnimplementedCustomerServiceServiceServer) ListEnterpriseCustomerServices(context.Context, *ListCustomerServiceRequest) (*ListCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnterpriseCustomerServices not implemented")
}
func (UnimplementedCustomerServiceServiceServer) CreateEnterpriseCustomerService(context.Context, *CreateCustomerServiceRequest) (*CreateCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnterpriseCustomerService not implemented")
}
func (UnimplementedCustomerServiceServiceServer) BatchCreateEnterpriseCustomerService(context.Context, *BatchCreateCustomerServiceRequest) (*BatchCreateCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateEnterpriseCustomerService not implemented")
}
func (UnimplementedCustomerServiceServiceServer) GetEnterpriseCustomerService(context.Context, *GetCustomerServiceRequest) (*GetCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseCustomerService not implemented")
}
func (UnimplementedCustomerServiceServiceServer) UpdateEnterpriseCustomerService(context.Context, *UpdateCustomerServiceRequest) (*UpdateCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnterpriseCustomerService not implemented")
}
func (UnimplementedCustomerServiceServiceServer) DeleteEnterpriseCustomerService(context.Context, *DeleteCustomerServiceRequest) (*DeleteCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnterpriseCustomerService not implemented")
}
func (UnimplementedCustomerServiceServiceServer) AppendCustomerServiceToAdset(context.Context, *AppendCustomerServiceRequest) (*AppendCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendCustomerServiceToAdset not implemented")
}
func (UnimplementedCustomerServiceServiceServer) RemoveCustomerServiceFromAdset(context.Context, *RemoveCustomerServiceRequest) (*RemoveCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomerServiceFromAdset not implemented")
}
func (UnimplementedCustomerServiceServiceServer) ReplaceCustomerServiceFromAdset(context.Context, *ReplaceCustomerServiceRequest) (*ReplaceCustomerServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceCustomerServiceFromAdset not implemented")
}
func (UnimplementedCustomerServiceServiceServer) mustEmbedUnimplementedCustomerServiceServiceServer() {
}

// UnsafeCustomerServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServiceServer()
}

func RegisterCustomerServiceServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServiceServer) {
	s.RegisterService(&CustomerServiceService_ServiceDesc, srv)
}

func _CustomerServiceService_ListCustomerServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).ListCustomerServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/ListCustomerServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).ListCustomerServices(ctx, req.(*ListCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_ListEnterpriseCustomerServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).ListEnterpriseCustomerServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/ListEnterpriseCustomerServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).ListEnterpriseCustomerServices(ctx, req.(*ListCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_CreateEnterpriseCustomerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).CreateEnterpriseCustomerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/CreateEnterpriseCustomerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).CreateEnterpriseCustomerService(ctx, req.(*CreateCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_BatchCreateEnterpriseCustomerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).BatchCreateEnterpriseCustomerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/BatchCreateEnterpriseCustomerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).BatchCreateEnterpriseCustomerService(ctx, req.(*BatchCreateCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_GetEnterpriseCustomerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).GetEnterpriseCustomerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/GetEnterpriseCustomerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).GetEnterpriseCustomerService(ctx, req.(*GetCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_UpdateEnterpriseCustomerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).UpdateEnterpriseCustomerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/UpdateEnterpriseCustomerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).UpdateEnterpriseCustomerService(ctx, req.(*UpdateCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_DeleteEnterpriseCustomerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).DeleteEnterpriseCustomerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/DeleteEnterpriseCustomerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).DeleteEnterpriseCustomerService(ctx, req.(*DeleteCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_AppendCustomerServiceToAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).AppendCustomerServiceToAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/AppendCustomerServiceToAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).AppendCustomerServiceToAdset(ctx, req.(*AppendCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_RemoveCustomerServiceFromAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).RemoveCustomerServiceFromAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/RemoveCustomerServiceFromAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).RemoveCustomerServiceFromAdset(ctx, req.(*RemoveCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerServiceService_ReplaceCustomerServiceFromAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceCustomerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServiceServer).ReplaceCustomerServiceFromAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerServiceService/ReplaceCustomerServiceFromAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServiceServer).ReplaceCustomerServiceFromAdset(ctx, req.(*ReplaceCustomerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerServiceService_ServiceDesc is the grpc.ServiceDesc for CustomerServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerServiceService",
	HandlerType: (*CustomerServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCustomerServices",
			Handler:    _CustomerServiceService_ListCustomerServices_Handler,
		},
		{
			MethodName: "ListEnterpriseCustomerServices",
			Handler:    _CustomerServiceService_ListEnterpriseCustomerServices_Handler,
		},
		{
			MethodName: "CreateEnterpriseCustomerService",
			Handler:    _CustomerServiceService_CreateEnterpriseCustomerService_Handler,
		},
		{
			MethodName: "BatchCreateEnterpriseCustomerService",
			Handler:    _CustomerServiceService_BatchCreateEnterpriseCustomerService_Handler,
		},
		{
			MethodName: "GetEnterpriseCustomerService",
			Handler:    _CustomerServiceService_GetEnterpriseCustomerService_Handler,
		},
		{
			MethodName: "UpdateEnterpriseCustomerService",
			Handler:    _CustomerServiceService_UpdateEnterpriseCustomerService_Handler,
		},
		{
			MethodName: "DeleteEnterpriseCustomerService",
			Handler:    _CustomerServiceService_DeleteEnterpriseCustomerService_Handler,
		},
		{
			MethodName: "AppendCustomerServiceToAdset",
			Handler:    _CustomerServiceService_AppendCustomerServiceToAdset_Handler,
		},
		{
			MethodName: "RemoveCustomerServiceFromAdset",
			Handler:    _CustomerServiceService_RemoveCustomerServiceFromAdset_Handler,
		},
		{
			MethodName: "ReplaceCustomerServiceFromAdset",
			Handler:    _CustomerServiceService_ReplaceCustomerServiceFromAdset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}
