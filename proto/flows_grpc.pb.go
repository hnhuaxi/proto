// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: flows.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowsServiceClient is the client API for FlowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowsServiceClient interface {
	CreateFlow(ctx context.Context, in *AddFlowRequest, opts ...grpc.CallOption) (*Flow, error)
}

type flowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowsServiceClient(cc grpc.ClientConnInterface) FlowsServiceClient {
	return &flowsServiceClient{cc}
}

func (c *flowsServiceClient) CreateFlow(ctx context.Context, in *AddFlowRequest, opts ...grpc.CallOption) (*Flow, error) {
	out := new(Flow)
	err := c.cc.Invoke(ctx, "/flows.FlowsService/CreateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowsServiceServer is the server API for FlowsService service.
// All implementations must embed UnimplementedFlowsServiceServer
// for forward compatibility
type FlowsServiceServer interface {
	CreateFlow(context.Context, *AddFlowRequest) (*Flow, error)
	mustEmbedUnimplementedFlowsServiceServer()
}

// UnimplementedFlowsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowsServiceServer struct {
}

func (UnimplementedFlowsServiceServer) CreateFlow(context.Context, *AddFlowRequest) (*Flow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlow not implemented")
}
func (UnimplementedFlowsServiceServer) mustEmbedUnimplementedFlowsServiceServer() {}

// UnsafeFlowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowsServiceServer will
// result in compilation errors.
type UnsafeFlowsServiceServer interface {
	mustEmbedUnimplementedFlowsServiceServer()
}

func RegisterFlowsServiceServer(s grpc.ServiceRegistrar, srv FlowsServiceServer) {
	s.RegisterService(&FlowsService_ServiceDesc, srv)
}

func _FlowsService_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowsServiceServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flows.FlowsService/CreateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowsServiceServer).CreateFlow(ctx, req.(*AddFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowsService_ServiceDesc is the grpc.ServiceDesc for FlowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flows.FlowsService",
	HandlerType: (*FlowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlow",
			Handler:    _FlowsService_CreateFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flows.proto",
}
