// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: enterprise.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnterpriseServiceClient is the client API for EnterpriseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterpriseServiceClient interface {
	// 查询企业
	ListEnterprise(ctx context.Context, in *ListEnterpriseRequest, opts ...grpc.CallOption) (*ListEnterpriseResponse, error)
	// 创建企业
	CreateEnterprise(ctx context.Context, in *CreateEnterpriseRequest, opts ...grpc.CallOption) (*CreateEnterpriseResponse, error)
	// 获取企业
	GetEnterprise(ctx context.Context, in *GetEnterpriseRequest, opts ...grpc.CallOption) (*GetEnterpriseResponse, error)
	// 更新企业
	UpdateEnterprise(ctx context.Context, in *UpdateEnterpriseRequest, opts ...grpc.CallOption) (*UpdateEnterpriseResponse, error)
	// 删除企业
	DeleteEnterprise(ctx context.Context, in *DeleteEnterpriseRequest, opts ...grpc.CallOption) (*DeleteEnterpriseResponse, error)
	// 转让企业所有权
	TransferEnterprise(ctx context.Context, in *TransferEnterpriseRequest, opts ...grpc.CallOption) (*TransferEnterpriseResponse, error)
	// 移动企业成为子企业
	MoveEnterprise(ctx context.Context, in *MoveEnterpriseRequest, opts ...grpc.CallOption) (*MoveEnterpriseResponse, error)
	// 升级企业
	UpgradeEnterprise(ctx context.Context, in *UpgradeEnterpriseRequest, opts ...grpc.CallOption) (*UpgradeEnterpriseResponse, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	SelectEnterprise(ctx context.Context, in *SelectEnterpriseRequest, opts ...grpc.CallOption) (*SelectEnterpriseResponse, error)
}

type enterpriseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterpriseServiceClient(cc grpc.ClientConnInterface) EnterpriseServiceClient {
	return &enterpriseServiceClient{cc}
}

func (c *enterpriseServiceClient) ListEnterprise(ctx context.Context, in *ListEnterpriseRequest, opts ...grpc.CallOption) (*ListEnterpriseResponse, error) {
	out := new(ListEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/ListEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) CreateEnterprise(ctx context.Context, in *CreateEnterpriseRequest, opts ...grpc.CallOption) (*CreateEnterpriseResponse, error) {
	out := new(CreateEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/CreateEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) GetEnterprise(ctx context.Context, in *GetEnterpriseRequest, opts ...grpc.CallOption) (*GetEnterpriseResponse, error) {
	out := new(GetEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/GetEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) UpdateEnterprise(ctx context.Context, in *UpdateEnterpriseRequest, opts ...grpc.CallOption) (*UpdateEnterpriseResponse, error) {
	out := new(UpdateEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/UpdateEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) DeleteEnterprise(ctx context.Context, in *DeleteEnterpriseRequest, opts ...grpc.CallOption) (*DeleteEnterpriseResponse, error) {
	out := new(DeleteEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/DeleteEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) TransferEnterprise(ctx context.Context, in *TransferEnterpriseRequest, opts ...grpc.CallOption) (*TransferEnterpriseResponse, error) {
	out := new(TransferEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/TransferEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) MoveEnterprise(ctx context.Context, in *MoveEnterpriseRequest, opts ...grpc.CallOption) (*MoveEnterpriseResponse, error) {
	out := new(MoveEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/MoveEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) UpgradeEnterprise(ctx context.Context, in *UpgradeEnterpriseRequest, opts ...grpc.CallOption) (*UpgradeEnterpriseResponse, error) {
	out := new(UpgradeEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/UpgradeEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error) {
	out := new(AddMemberResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseServiceClient) SelectEnterprise(ctx context.Context, in *SelectEnterpriseRequest, opts ...grpc.CallOption) (*SelectEnterpriseResponse, error) {
	out := new(SelectEnterpriseResponse)
	err := c.cc.Invoke(ctx, "/enterprise.EnterpriseService/SelectEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnterpriseServiceServer is the server API for EnterpriseService service.
// All implementations must embed UnimplementedEnterpriseServiceServer
// for forward compatibility
type EnterpriseServiceServer interface {
	// 查询企业
	ListEnterprise(context.Context, *ListEnterpriseRequest) (*ListEnterpriseResponse, error)
	// 创建企业
	CreateEnterprise(context.Context, *CreateEnterpriseRequest) (*CreateEnterpriseResponse, error)
	// 获取企业
	GetEnterprise(context.Context, *GetEnterpriseRequest) (*GetEnterpriseResponse, error)
	// 更新企业
	UpdateEnterprise(context.Context, *UpdateEnterpriseRequest) (*UpdateEnterpriseResponse, error)
	// 删除企业
	DeleteEnterprise(context.Context, *DeleteEnterpriseRequest) (*DeleteEnterpriseResponse, error)
	// 转让企业所有权
	TransferEnterprise(context.Context, *TransferEnterpriseRequest) (*TransferEnterpriseResponse, error)
	// 移动企业成为子企业
	MoveEnterprise(context.Context, *MoveEnterpriseRequest) (*MoveEnterpriseResponse, error)
	// 升级企业
	UpgradeEnterprise(context.Context, *UpgradeEnterpriseRequest) (*UpgradeEnterpriseResponse, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	SelectEnterprise(context.Context, *SelectEnterpriseRequest) (*SelectEnterpriseResponse, error)
	mustEmbedUnimplementedEnterpriseServiceServer()
}

// UnimplementedEnterpriseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnterpriseServiceServer struct {
}

func (UnimplementedEnterpriseServiceServer) ListEnterprise(context.Context, *ListEnterpriseRequest) (*ListEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) CreateEnterprise(context.Context, *CreateEnterpriseRequest) (*CreateEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) GetEnterprise(context.Context, *GetEnterpriseRequest) (*GetEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) UpdateEnterprise(context.Context, *UpdateEnterpriseRequest) (*UpdateEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) DeleteEnterprise(context.Context, *DeleteEnterpriseRequest) (*DeleteEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) TransferEnterprise(context.Context, *TransferEnterpriseRequest) (*TransferEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) MoveEnterprise(context.Context, *MoveEnterpriseRequest) (*MoveEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) UpgradeEnterprise(context.Context, *UpgradeEnterpriseRequest) (*UpgradeEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedEnterpriseServiceServer) AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedEnterpriseServiceServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedEnterpriseServiceServer) SelectEnterprise(context.Context, *SelectEnterpriseRequest) (*SelectEnterpriseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectEnterprise not implemented")
}
func (UnimplementedEnterpriseServiceServer) mustEmbedUnimplementedEnterpriseServiceServer() {}

// UnsafeEnterpriseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterpriseServiceServer will
// result in compilation errors.
type UnsafeEnterpriseServiceServer interface {
	mustEmbedUnimplementedEnterpriseServiceServer()
}

func RegisterEnterpriseServiceServer(s grpc.ServiceRegistrar, srv EnterpriseServiceServer) {
	s.RegisterService(&EnterpriseService_ServiceDesc, srv)
}

func _EnterpriseService_ListEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).ListEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/ListEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).ListEnterprise(ctx, req.(*ListEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_CreateEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).CreateEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/CreateEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).CreateEnterprise(ctx, req.(*CreateEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_GetEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).GetEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/GetEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).GetEnterprise(ctx, req.(*GetEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_UpdateEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).UpdateEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/UpdateEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).UpdateEnterprise(ctx, req.(*UpdateEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_DeleteEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).DeleteEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/DeleteEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).DeleteEnterprise(ctx, req.(*DeleteEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_TransferEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).TransferEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/TransferEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).TransferEnterprise(ctx, req.(*TransferEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_MoveEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).MoveEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/MoveEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).MoveEnterprise(ctx, req.(*MoveEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_UpgradeEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).UpgradeEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/UpgradeEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).UpgradeEnterprise(ctx, req.(*UpgradeEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseService_SelectEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).SelectEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.EnterpriseService/SelectEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).SelectEnterprise(ctx, req.(*SelectEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnterpriseService_ServiceDesc is the grpc.ServiceDesc for EnterpriseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterpriseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enterprise.EnterpriseService",
	HandlerType: (*EnterpriseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEnterprise",
			Handler:    _EnterpriseService_ListEnterprise_Handler,
		},
		{
			MethodName: "CreateEnterprise",
			Handler:    _EnterpriseService_CreateEnterprise_Handler,
		},
		{
			MethodName: "GetEnterprise",
			Handler:    _EnterpriseService_GetEnterprise_Handler,
		},
		{
			MethodName: "UpdateEnterprise",
			Handler:    _EnterpriseService_UpdateEnterprise_Handler,
		},
		{
			MethodName: "DeleteEnterprise",
			Handler:    _EnterpriseService_DeleteEnterprise_Handler,
		},
		{
			MethodName: "TransferEnterprise",
			Handler:    _EnterpriseService_TransferEnterprise_Handler,
		},
		{
			MethodName: "MoveEnterprise",
			Handler:    _EnterpriseService_MoveEnterprise_Handler,
		},
		{
			MethodName: "UpgradeEnterprise",
			Handler:    _EnterpriseService_UpgradeEnterprise_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _EnterpriseService_ListMembers_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _EnterpriseService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _EnterpriseService_RemoveMember_Handler,
		},
		{
			MethodName: "SelectEnterprise",
			Handler:    _EnterpriseService_SelectEnterprise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enterprise.proto",
}
