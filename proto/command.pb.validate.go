// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: command.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImportResourceCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportResourceCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportResourceCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportResourceCommandMultiError, or nil if none found.
func (m *ImportResourceCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportResourceCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AccountId

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportResourceCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportResourceCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportResourceCommandValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportResourceCommandMultiError(errors)
	}

	return nil
}

// ImportResourceCommandMultiError is an error wrapping multiple validation
// errors returned by ImportResourceCommand.ValidateAll() if the designated
// constraints aren't met.
type ImportResourceCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportResourceCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportResourceCommandMultiError) AllErrors() []error { return m }

// ImportResourceCommandValidationError is the validation error returned by
// ImportResourceCommand.Validate if the designated constraints aren't met.
type ImportResourceCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportResourceCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportResourceCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportResourceCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportResourceCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportResourceCommandValidationError) ErrorName() string {
	return "ImportResourceCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ImportResourceCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportResourceCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportResourceCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportResourceCommandValidationError{}

// Validate checks the field values on ReceivedResourcesEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceivedResourcesEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivedResourcesEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivedResourcesEventMultiError, or nil if none found.
func (m *ReceivedResourcesEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivedResourcesEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceivedResourcesEventValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceivedResourcesEventValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceivedResourcesEventValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReceivedResourcesEventMultiError(errors)
	}

	return nil
}

// ReceivedResourcesEventMultiError is an error wrapping multiple validation
// errors returned by ReceivedResourcesEvent.ValidateAll() if the designated
// constraints aren't met.
type ReceivedResourcesEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivedResourcesEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivedResourcesEventMultiError) AllErrors() []error { return m }

// ReceivedResourcesEventValidationError is the validation error returned by
// ReceivedResourcesEvent.Validate if the designated constraints aren't met.
type ReceivedResourcesEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivedResourcesEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivedResourcesEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivedResourcesEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivedResourcesEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivedResourcesEventValidationError) ErrorName() string {
	return "ReceivedResourcesEventValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivedResourcesEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivedResourcesEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivedResourcesEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivedResourcesEventValidationError{}

// Validate checks the field values on AdCommitReviewCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdCommitReviewCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdCommitReviewCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdCommitReviewCommandMultiError, or nil if none found.
func (m *AdCommitReviewCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AdCommitReviewCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AccountId

	// no validation rules for AdcreativeId

	if len(errors) > 0 {
		return AdCommitReviewCommandMultiError(errors)
	}

	return nil
}

// AdCommitReviewCommandMultiError is an error wrapping multiple validation
// errors returned by AdCommitReviewCommand.ValidateAll() if the designated
// constraints aren't met.
type AdCommitReviewCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdCommitReviewCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdCommitReviewCommandMultiError) AllErrors() []error { return m }

// AdCommitReviewCommandValidationError is the validation error returned by
// AdCommitReviewCommand.Validate if the designated constraints aren't met.
type AdCommitReviewCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdCommitReviewCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdCommitReviewCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdCommitReviewCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdCommitReviewCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdCommitReviewCommandValidationError) ErrorName() string {
	return "AdCommitReviewCommandValidationError"
}

// Error satisfies the builtin error interface
func (e AdCommitReviewCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdCommitReviewCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdCommitReviewCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdCommitReviewCommandValidationError{}

// Validate checks the field values on AdStartCommand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdStartCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStartCommand with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdStartCommandMultiError,
// or nil if none found.
func (m *AdStartCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStartCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AdStartCommandMultiError(errors)
	}

	return nil
}

// AdStartCommandMultiError is an error wrapping multiple validation errors
// returned by AdStartCommand.ValidateAll() if the designated constraints
// aren't met.
type AdStartCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStartCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStartCommandMultiError) AllErrors() []error { return m }

// AdStartCommandValidationError is the validation error returned by
// AdStartCommand.Validate if the designated constraints aren't met.
type AdStartCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStartCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStartCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStartCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStartCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStartCommandValidationError) ErrorName() string { return "AdStartCommandValidationError" }

// Error satisfies the builtin error interface
func (e AdStartCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStartCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStartCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStartCommandValidationError{}

// Validate checks the field values on AdPauseCommand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdPauseCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdPauseCommand with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdPauseCommandMultiError,
// or nil if none found.
func (m *AdPauseCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AdPauseCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AdPauseCommandMultiError(errors)
	}

	return nil
}

// AdPauseCommandMultiError is an error wrapping multiple validation errors
// returned by AdPauseCommand.ValidateAll() if the designated constraints
// aren't met.
type AdPauseCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdPauseCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdPauseCommandMultiError) AllErrors() []error { return m }

// AdPauseCommandValidationError is the validation error returned by
// AdPauseCommand.Validate if the designated constraints aren't met.
type AdPauseCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdPauseCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdPauseCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdPauseCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdPauseCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdPauseCommandValidationError) ErrorName() string { return "AdPauseCommandValidationError" }

// Error satisfies the builtin error interface
func (e AdPauseCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdPauseCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdPauseCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdPauseCommandValidationError{}

// Validate checks the field values on AdStopCommand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdStopCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStopCommand with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdStopCommandMultiError, or
// nil if none found.
func (m *AdStopCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStopCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AdStopCommandMultiError(errors)
	}

	return nil
}

// AdStopCommandMultiError is an error wrapping multiple validation errors
// returned by AdStopCommand.ValidateAll() if the designated constraints
// aren't met.
type AdStopCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStopCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStopCommandMultiError) AllErrors() []error { return m }

// AdStopCommandValidationError is the validation error returned by
// AdStopCommand.Validate if the designated constraints aren't met.
type AdStopCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStopCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStopCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStopCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStopCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStopCommandValidationError) ErrorName() string { return "AdStopCommandValidationError" }

// Error satisfies the builtin error interface
func (e AdStopCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStopCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStopCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStopCommandValidationError{}

// Validate checks the field values on AdChangePriceCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdChangePriceCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdChangePriceCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdChangePriceCommandMultiError, or nil if none found.
func (m *AdChangePriceCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AdChangePriceCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AdChangePriceCommandMultiError(errors)
	}

	return nil
}

// AdChangePriceCommandMultiError is an error wrapping multiple validation
// errors returned by AdChangePriceCommand.ValidateAll() if the designated
// constraints aren't met.
type AdChangePriceCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdChangePriceCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdChangePriceCommandMultiError) AllErrors() []error { return m }

// AdChangePriceCommandValidationError is the validation error returned by
// AdChangePriceCommand.Validate if the designated constraints aren't met.
type AdChangePriceCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdChangePriceCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdChangePriceCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdChangePriceCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdChangePriceCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdChangePriceCommandValidationError) ErrorName() string {
	return "AdChangePriceCommandValidationError"
}

// Error satisfies the builtin error interface
func (e AdChangePriceCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdChangePriceCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdChangePriceCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdChangePriceCommandValidationError{}
