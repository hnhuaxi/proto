// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: account.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// 建立主体账户
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// 查询主体账户
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// 查询企业主体账户
	ListEnterpriseAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// 查询主体子账户
	ListAgentAccounts(ctx context.Context, in *ListAgentAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// 导入代理子账户
	ImportAgentAccount(ctx context.Context, in *ImportAgentAccountRequest, opts ...grpc.CallOption) (*ImportAgentAccountsResponse, error)
	// 更新账户
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// 删除账户
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// 授予帐户权限
	GrantAccount(ctx context.Context, in *GrantToRequest, opts ...grpc.CallOption) (*GrantToResponse, error)
	// 撤销帐户权限
	RevokeAccount(ctx context.Context, in *RevokeFromRequest, opts ...grpc.CallOption) (*RevokeFromResponse, error)
	// Import Schemas  导入账户模式
	ImportSchemas(ctx context.Context, in *ImportSchemasRequest, opts ...grpc.CallOption) (*ImportSchemasResponse, error)
	// Import Auth 导入账户授权
	ImportAuth(ctx context.Context, in *ImportAuthRequest, opts ...grpc.CallOption) (*ImportAuthResponse, error)
	// ImportAccount 导入帐号
	ImportAccount(ctx context.Context, in *ImportAccountRequest, opts ...grpc.CallOption) (*ImportAccountResponse, error)
	// BindingAccount 帐号绑定
	BindingAccount(ctx context.Context, in *BindingAccountRequest, opts ...grpc.CallOption) (*BindingAccountResponse, error)
	// 解绑帐号
	UnbindingAccount(ctx context.Context, in *UnbindingAccountRequest, opts ...grpc.CallOption) (*UnbindingAccountResponse, error)
	// 查询主体账户
	ListUserActionSetIds(ctx context.Context, in *ListUserActionSetRequest, opts ...grpc.CallOption) (*UserActionsSetResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/account.AccountService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ListEnterpriseAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ListEnterpriseAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ListAgentAccounts(ctx context.Context, in *ListAgentAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ListAgentAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ImportAgentAccount(ctx context.Context, in *ImportAgentAccountRequest, opts ...grpc.CallOption) (*ImportAgentAccountsResponse, error) {
	out := new(ImportAgentAccountsResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ImportAgentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/account.AccountService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/account.AccountService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GrantAccount(ctx context.Context, in *GrantToRequest, opts ...grpc.CallOption) (*GrantToResponse, error) {
	out := new(GrantToResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/GrantAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) RevokeAccount(ctx context.Context, in *RevokeFromRequest, opts ...grpc.CallOption) (*RevokeFromResponse, error) {
	out := new(RevokeFromResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/RevokeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ImportSchemas(ctx context.Context, in *ImportSchemasRequest, opts ...grpc.CallOption) (*ImportSchemasResponse, error) {
	out := new(ImportSchemasResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ImportSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ImportAuth(ctx context.Context, in *ImportAuthRequest, opts ...grpc.CallOption) (*ImportAuthResponse, error) {
	out := new(ImportAuthResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ImportAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ImportAccount(ctx context.Context, in *ImportAccountRequest, opts ...grpc.CallOption) (*ImportAccountResponse, error) {
	out := new(ImportAccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ImportAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) BindingAccount(ctx context.Context, in *BindingAccountRequest, opts ...grpc.CallOption) (*BindingAccountResponse, error) {
	out := new(BindingAccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/BindingAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UnbindingAccount(ctx context.Context, in *UnbindingAccountRequest, opts ...grpc.CallOption) (*UnbindingAccountResponse, error) {
	out := new(UnbindingAccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/UnbindingAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ListUserActionSetIds(ctx context.Context, in *ListUserActionSetRequest, opts ...grpc.CallOption) (*UserActionsSetResponse, error) {
	out := new(UserActionsSetResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/ListUserActionSetIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// 建立主体账户
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	// 查询主体账户
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// 查询企业主体账户
	ListEnterpriseAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// 查询主体子账户
	ListAgentAccounts(context.Context, *ListAgentAccountsRequest) (*ListAccountsResponse, error)
	// 导入代理子账户
	ImportAgentAccount(context.Context, *ImportAgentAccountRequest) (*ImportAgentAccountsResponse, error)
	// 更新账户
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	// 删除账户
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	// 授予帐户权限
	GrantAccount(context.Context, *GrantToRequest) (*GrantToResponse, error)
	// 撤销帐户权限
	RevokeAccount(context.Context, *RevokeFromRequest) (*RevokeFromResponse, error)
	// Import Schemas  导入账户模式
	ImportSchemas(context.Context, *ImportSchemasRequest) (*ImportSchemasResponse, error)
	// Import Auth 导入账户授权
	ImportAuth(context.Context, *ImportAuthRequest) (*ImportAuthResponse, error)
	// ImportAccount 导入帐号
	ImportAccount(context.Context, *ImportAccountRequest) (*ImportAccountResponse, error)
	// BindingAccount 帐号绑定
	BindingAccount(context.Context, *BindingAccountRequest) (*BindingAccountResponse, error)
	// 解绑帐号
	UnbindingAccount(context.Context, *UnbindingAccountRequest) (*UnbindingAccountResponse, error)
	// 查询主体账户
	ListUserActionSetIds(context.Context, *ListUserActionSetRequest) (*UserActionsSetResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountServiceServer) ListEnterpriseAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnterpriseAccounts not implemented")
}
func (UnimplementedAccountServiceServer) ListAgentAccounts(context.Context, *ListAgentAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentAccounts not implemented")
}
func (UnimplementedAccountServiceServer) ImportAgentAccount(context.Context, *ImportAgentAccountRequest) (*ImportAgentAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAgentAccount not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountServiceServer) GrantAccount(context.Context, *GrantToRequest) (*GrantToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccount not implemented")
}
func (UnimplementedAccountServiceServer) RevokeAccount(context.Context, *RevokeFromRequest) (*RevokeFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccount not implemented")
}
func (UnimplementedAccountServiceServer) ImportSchemas(context.Context, *ImportSchemasRequest) (*ImportSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSchemas not implemented")
}
func (UnimplementedAccountServiceServer) ImportAuth(context.Context, *ImportAuthRequest) (*ImportAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAuth not implemented")
}
func (UnimplementedAccountServiceServer) ImportAccount(context.Context, *ImportAccountRequest) (*ImportAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAccount not implemented")
}
func (UnimplementedAccountServiceServer) BindingAccount(context.Context, *BindingAccountRequest) (*BindingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindingAccount not implemented")
}
func (UnimplementedAccountServiceServer) UnbindingAccount(context.Context, *UnbindingAccountRequest) (*UnbindingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindingAccount not implemented")
}
func (UnimplementedAccountServiceServer) ListUserActionSetIds(context.Context, *ListUserActionSetRequest) (*UserActionsSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserActionSetIds not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ListEnterpriseAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListEnterpriseAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ListEnterpriseAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListEnterpriseAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ListAgentAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListAgentAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ListAgentAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListAgentAccounts(ctx, req.(*ListAgentAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ImportAgentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAgentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ImportAgentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ImportAgentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ImportAgentAccount(ctx, req.(*ImportAgentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GrantAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GrantAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GrantAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GrantAccount(ctx, req.(*GrantToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_RevokeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).RevokeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/RevokeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).RevokeAccount(ctx, req.(*RevokeFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ImportSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ImportSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ImportSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ImportSchemas(ctx, req.(*ImportSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ImportAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ImportAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ImportAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ImportAuth(ctx, req.(*ImportAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ImportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ImportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ImportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ImportAccount(ctx, req.(*ImportAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_BindingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).BindingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/BindingAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).BindingAccount(ctx, req.(*BindingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UnbindingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UnbindingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/UnbindingAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UnbindingAccount(ctx, req.(*UnbindingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ListUserActionSetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserActionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListUserActionSetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/ListUserActionSetIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListUserActionSetIds(ctx, req.(*ListUserActionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _AccountService_ListAccounts_Handler,
		},
		{
			MethodName: "ListEnterpriseAccounts",
			Handler:    _AccountService_ListEnterpriseAccounts_Handler,
		},
		{
			MethodName: "ListAgentAccounts",
			Handler:    _AccountService_ListAgentAccounts_Handler,
		},
		{
			MethodName: "ImportAgentAccount",
			Handler:    _AccountService_ImportAgentAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
		{
			MethodName: "GrantAccount",
			Handler:    _AccountService_GrantAccount_Handler,
		},
		{
			MethodName: "RevokeAccount",
			Handler:    _AccountService_RevokeAccount_Handler,
		},
		{
			MethodName: "ImportSchemas",
			Handler:    _AccountService_ImportSchemas_Handler,
		},
		{
			MethodName: "ImportAuth",
			Handler:    _AccountService_ImportAuth_Handler,
		},
		{
			MethodName: "ImportAccount",
			Handler:    _AccountService_ImportAccount_Handler,
		},
		{
			MethodName: "BindingAccount",
			Handler:    _AccountService_BindingAccount_Handler,
		},
		{
			MethodName: "UnbindingAccount",
			Handler:    _AccountService_UnbindingAccount_Handler,
		},
		{
			MethodName: "ListUserActionSetIds",
			Handler:    _AccountService_ListUserActionSetIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
