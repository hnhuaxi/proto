// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: enterprise.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/hnhuaxi/proto/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.EnterpriseGrade(0)
)

// Validate checks the field values on ListEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEnterpriseRequestMultiError, or nil if none found.
func (m *ListEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEnterpriseRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEnterpriseRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEnterpriseRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if len(errors) > 0 {
		return ListEnterpriseRequestMultiError(errors)
	}

	return nil
}

// ListEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by ListEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEnterpriseRequestMultiError) AllErrors() []error { return m }

// ListEnterpriseRequestValidationError is the validation error returned by
// ListEnterpriseRequest.Validate if the designated constraints aren't met.
type ListEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnterpriseRequestValidationError) ErrorName() string {
	return "ListEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnterpriseRequestValidationError{}

// Validate checks the field values on ListEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEnterpriseResponseMultiError, or nil if none found.
func (m *ListEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEnterprise() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEnterpriseResponseValidationError{
						field:  fmt.Sprintf("Enterprise[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEnterpriseResponseValidationError{
						field:  fmt.Sprintf("Enterprise[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEnterpriseResponseValidationError{
					field:  fmt.Sprintf("Enterprise[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEnterpriseResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEnterpriseResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEnterpriseResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEnterpriseResponseMultiError(errors)
	}

	return nil
}

// ListEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by ListEnterpriseResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEnterpriseResponseMultiError) AllErrors() []error { return m }

// ListEnterpriseResponseValidationError is the validation error returned by
// ListEnterpriseResponse.Validate if the designated constraints aren't met.
type ListEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnterpriseResponseValidationError) ErrorName() string {
	return "ListEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnterpriseResponseValidationError{}

// Validate checks the field values on CreateEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnterpriseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnterpriseRequestMultiError, or nil if none found.
func (m *CreateEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Grade

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Website != nil {
		// no validation rules for Website
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if len(errors) > 0 {
		return CreateEnterpriseRequestMultiError(errors)
	}

	return nil
}

// CreateEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnterpriseRequestMultiError) AllErrors() []error { return m }

// CreateEnterpriseRequestValidationError is the validation error returned by
// CreateEnterpriseRequest.Validate if the designated constraints aren't met.
type CreateEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnterpriseRequestValidationError) ErrorName() string {
	return "CreateEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnterpriseRequestValidationError{}

// Validate checks the field values on CreateEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnterpriseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnterpriseResponseMultiError, or nil if none found.
func (m *CreateEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEnterpriseResponseValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEnterpriseResponseMultiError(errors)
	}

	return nil
}

// CreateEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEnterpriseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnterpriseResponseMultiError) AllErrors() []error { return m }

// CreateEnterpriseResponseValidationError is the validation error returned by
// CreateEnterpriseResponse.Validate if the designated constraints aren't met.
type CreateEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnterpriseResponseValidationError) ErrorName() string {
	return "CreateEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnterpriseResponseValidationError{}

// Validate checks the field values on GetEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEnterpriseRequestMultiError, or nil if none found.
func (m *GetEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetEnterpriseRequestMultiError(errors)
	}

	return nil
}

// GetEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by GetEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnterpriseRequestMultiError) AllErrors() []error { return m }

// GetEnterpriseRequestValidationError is the validation error returned by
// GetEnterpriseRequest.Validate if the designated constraints aren't met.
type GetEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnterpriseRequestValidationError) ErrorName() string {
	return "GetEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnterpriseRequestValidationError{}

// Validate checks the field values on GetEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEnterpriseResponseMultiError, or nil if none found.
func (m *GetEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEnterpriseResponseValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEnterpriseResponseMultiError(errors)
	}

	return nil
}

// GetEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by GetEnterpriseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnterpriseResponseMultiError) AllErrors() []error { return m }

// GetEnterpriseResponseValidationError is the validation error returned by
// GetEnterpriseResponse.Validate if the designated constraints aren't met.
type GetEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnterpriseResponseValidationError) ErrorName() string {
	return "GetEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnterpriseResponseValidationError{}

// Validate checks the field values on UpdateEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnterpriseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEnterpriseRequestMultiError, or nil if none found.
func (m *UpdateEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Website != nil {
		// no validation rules for Website
	}

	if len(errors) > 0 {
		return UpdateEnterpriseRequestMultiError(errors)
	}

	return nil
}

// UpdateEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnterpriseRequestMultiError) AllErrors() []error { return m }

// UpdateEnterpriseRequestValidationError is the validation error returned by
// UpdateEnterpriseRequest.Validate if the designated constraints aren't met.
type UpdateEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnterpriseRequestValidationError) ErrorName() string {
	return "UpdateEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnterpriseRequestValidationError{}

// Validate checks the field values on UpdateEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnterpriseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEnterpriseResponseMultiError, or nil if none found.
func (m *UpdateEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEnterpriseResponseValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEnterpriseResponseMultiError(errors)
	}

	return nil
}

// UpdateEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEnterpriseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnterpriseResponseMultiError) AllErrors() []error { return m }

// UpdateEnterpriseResponseValidationError is the validation error returned by
// UpdateEnterpriseResponse.Validate if the designated constraints aren't met.
type UpdateEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnterpriseResponseValidationError) ErrorName() string {
	return "UpdateEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnterpriseResponseValidationError{}

// Validate checks the field values on DeleteEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnterpriseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnterpriseRequestMultiError, or nil if none found.
func (m *DeleteEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteEnterpriseRequestMultiError(errors)
	}

	return nil
}

// DeleteEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnterpriseRequestMultiError) AllErrors() []error { return m }

// DeleteEnterpriseRequestValidationError is the validation error returned by
// DeleteEnterpriseRequest.Validate if the designated constraints aren't met.
type DeleteEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnterpriseRequestValidationError) ErrorName() string {
	return "DeleteEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnterpriseRequestValidationError{}

// Validate checks the field values on DeleteEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnterpriseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnterpriseResponseMultiError, or nil if none found.
func (m *DeleteEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEnterpriseResponseValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEnterpriseResponseMultiError(errors)
	}

	return nil
}

// DeleteEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEnterpriseResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnterpriseResponseMultiError) AllErrors() []error { return m }

// DeleteEnterpriseResponseValidationError is the validation error returned by
// DeleteEnterpriseResponse.Validate if the designated constraints aren't met.
type DeleteEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnterpriseResponseValidationError) ErrorName() string {
	return "DeleteEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnterpriseResponseValidationError{}

// Validate checks the field values on TransferEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferEnterpriseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferEnterpriseRequestMultiError, or nil if none found.
func (m *TransferEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ReceiveId

	if len(errors) > 0 {
		return TransferEnterpriseRequestMultiError(errors)
	}

	return nil
}

// TransferEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by TransferEnterpriseRequest.ValidateAll() if the
// designated constraints aren't met.
type TransferEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferEnterpriseRequestMultiError) AllErrors() []error { return m }

// TransferEnterpriseRequestValidationError is the validation error returned by
// TransferEnterpriseRequest.Validate if the designated constraints aren't met.
type TransferEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferEnterpriseRequestValidationError) ErrorName() string {
	return "TransferEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferEnterpriseRequestValidationError{}

// Validate checks the field values on TransferEnterpriseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferEnterpriseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferEnterpriseResponseMultiError, or nil if none found.
func (m *TransferEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return TransferEnterpriseResponseMultiError(errors)
	}

	return nil
}

// TransferEnterpriseResponseMultiError is an error wrapping multiple
// validation errors returned by TransferEnterpriseResponse.ValidateAll() if
// the designated constraints aren't met.
type TransferEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferEnterpriseResponseMultiError) AllErrors() []error { return m }

// TransferEnterpriseResponseValidationError is the validation error returned
// by TransferEnterpriseResponse.Validate if the designated constraints aren't met.
type TransferEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferEnterpriseResponseValidationError) ErrorName() string {
	return "TransferEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferEnterpriseResponseValidationError{}

// Validate checks the field values on MoveEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MoveEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveEnterpriseRequestMultiError, or nil if none found.
func (m *MoveEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	if len(errors) > 0 {
		return MoveEnterpriseRequestMultiError(errors)
	}

	return nil
}

// MoveEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by MoveEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type MoveEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveEnterpriseRequestMultiError) AllErrors() []error { return m }

// MoveEnterpriseRequestValidationError is the validation error returned by
// MoveEnterpriseRequest.Validate if the designated constraints aren't met.
type MoveEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveEnterpriseRequestValidationError) ErrorName() string {
	return "MoveEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MoveEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveEnterpriseRequestValidationError{}

// Validate checks the field values on MoveEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MoveEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveEnterpriseResponseMultiError, or nil if none found.
func (m *MoveEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return MoveEnterpriseResponseMultiError(errors)
	}

	return nil
}

// MoveEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by MoveEnterpriseResponse.ValidateAll() if the designated
// constraints aren't met.
type MoveEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveEnterpriseResponseMultiError) AllErrors() []error { return m }

// MoveEnterpriseResponseValidationError is the validation error returned by
// MoveEnterpriseResponse.Validate if the designated constraints aren't met.
type MoveEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveEnterpriseResponseValidationError) ErrorName() string {
	return "MoveEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MoveEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveEnterpriseResponseValidationError{}

// Validate checks the field values on UpgradeEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpgradeEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpgradeEnterpriseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpgradeEnterpriseRequestMultiError, or nil if none found.
func (m *UpgradeEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpgradeEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Grade

	if len(errors) > 0 {
		return UpgradeEnterpriseRequestMultiError(errors)
	}

	return nil
}

// UpgradeEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by UpgradeEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpgradeEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpgradeEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpgradeEnterpriseRequestMultiError) AllErrors() []error { return m }

// UpgradeEnterpriseRequestValidationError is the validation error returned by
// UpgradeEnterpriseRequest.Validate if the designated constraints aren't met.
type UpgradeEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeEnterpriseRequestValidationError) ErrorName() string {
	return "UpgradeEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeEnterpriseRequestValidationError{}

// Validate checks the field values on UpgradeEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpgradeEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpgradeEnterpriseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpgradeEnterpriseResponseMultiError, or nil if none found.
func (m *UpgradeEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpgradeEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpgradeEnterpriseResponseMultiError(errors)
	}

	return nil
}

// UpgradeEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by UpgradeEnterpriseResponse.ValidateAll() if the
// designated constraints aren't met.
type UpgradeEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpgradeEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpgradeEnterpriseResponseMultiError) AllErrors() []error { return m }

// UpgradeEnterpriseResponseValidationError is the validation error returned by
// UpgradeEnterpriseResponse.Validate if the designated constraints aren't met.
type UpgradeEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeEnterpriseResponseValidationError) ErrorName() string {
	return "UpgradeEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeEnterpriseResponseValidationError{}

// Validate checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersRequestMultiError, or nil if none found.
func (m *ListMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMembersRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMembersRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMembersRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters2() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  fmt.Sprintf("Filters2[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  fmt.Sprintf("Filters2[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersRequestValidationError{
					field:  fmt.Sprintf("Filters2[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersRequestValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMembersRequestMultiError(errors)
	}

	return nil
}

// ListMembersRequestMultiError is an error wrapping multiple validation errors
// returned by ListMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersRequestMultiError) AllErrors() []error { return m }

// ListMembersRequestValidationError is the validation error returned by
// ListMembersRequest.Validate if the designated constraints aren't met.
type ListMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersRequestValidationError) ErrorName() string {
	return "ListMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersRequestValidationError{}

// Validate checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersResponseMultiError, or nil if none found.
func (m *ListMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMembersResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMembersResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMembersResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMembersResponseMultiError(errors)
	}

	return nil
}

// ListMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersResponseMultiError) AllErrors() []error { return m }

// ListMembersResponseValidationError is the validation error returned by
// ListMembersResponse.Validate if the designated constraints aren't met.
type ListMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersResponseValidationError) ErrorName() string {
	return "ListMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersResponseValidationError{}

// Validate checks the field values on AddMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMemberRequestMultiError, or nil if none found.
func (m *AddMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddMemberRequestMultiError(errors)
	}

	return nil
}

// AddMemberRequestMultiError is an error wrapping multiple validation errors
// returned by AddMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type AddMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMemberRequestMultiError) AllErrors() []error { return m }

// AddMemberRequestValidationError is the validation error returned by
// AddMemberRequest.Validate if the designated constraints aren't met.
type AddMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMemberRequestValidationError) ErrorName() string { return "AddMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMemberRequestValidationError{}

// Validate checks the field values on AddMemberResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMemberResponseMultiError, or nil if none found.
func (m *AddMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AddMemberResponseMultiError(errors)
	}

	return nil
}

// AddMemberResponseMultiError is an error wrapping multiple validation errors
// returned by AddMemberResponse.ValidateAll() if the designated constraints
// aren't met.
type AddMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMemberResponseMultiError) AllErrors() []error { return m }

// AddMemberResponseValidationError is the validation error returned by
// AddMemberResponse.Validate if the designated constraints aren't met.
type AddMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMemberResponseValidationError) ErrorName() string {
	return "AddMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMemberResponseValidationError{}

// Validate checks the field values on RemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMemberRequestMultiError, or nil if none found.
func (m *RemoveMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MemberId

	if len(errors) > 0 {
		return RemoveMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveMemberRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMemberRequestMultiError) AllErrors() []error { return m }

// RemoveMemberRequestValidationError is the validation error returned by
// RemoveMemberRequest.Validate if the designated constraints aren't met.
type RemoveMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberRequestValidationError) ErrorName() string {
	return "RemoveMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberRequestValidationError{}

// Validate checks the field values on RemoveMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMemberResponseMultiError, or nil if none found.
func (m *RemoveMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveMemberResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMemberResponseMultiError) AllErrors() []error { return m }

// RemoveMemberResponseValidationError is the validation error returned by
// RemoveMemberResponse.Validate if the designated constraints aren't met.
type RemoveMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberResponseValidationError) ErrorName() string {
	return "RemoveMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberResponseValidationError{}

// Validate checks the field values on SelectEnterpriseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectEnterpriseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectEnterpriseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectEnterpriseRequestMultiError, or nil if none found.
func (m *SelectEnterpriseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectEnterpriseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return SelectEnterpriseRequestMultiError(errors)
	}

	return nil
}

// SelectEnterpriseRequestMultiError is an error wrapping multiple validation
// errors returned by SelectEnterpriseRequest.ValidateAll() if the designated
// constraints aren't met.
type SelectEnterpriseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectEnterpriseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectEnterpriseRequestMultiError) AllErrors() []error { return m }

// SelectEnterpriseRequestValidationError is the validation error returned by
// SelectEnterpriseRequest.Validate if the designated constraints aren't met.
type SelectEnterpriseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectEnterpriseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectEnterpriseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectEnterpriseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectEnterpriseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectEnterpriseRequestValidationError) ErrorName() string {
	return "SelectEnterpriseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectEnterpriseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectEnterpriseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectEnterpriseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectEnterpriseRequestValidationError{}

// Validate checks the field values on SelectEnterpriseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectEnterpriseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectEnterpriseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectEnterpriseResponseMultiError, or nil if none found.
func (m *SelectEnterpriseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectEnterpriseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectEnterpriseResponseValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectEnterpriseResponseValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SelectEnterpriseResponseMultiError(errors)
	}

	return nil
}

// SelectEnterpriseResponseMultiError is an error wrapping multiple validation
// errors returned by SelectEnterpriseResponse.ValidateAll() if the designated
// constraints aren't met.
type SelectEnterpriseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectEnterpriseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectEnterpriseResponseMultiError) AllErrors() []error { return m }

// SelectEnterpriseResponseValidationError is the validation error returned by
// SelectEnterpriseResponse.Validate if the designated constraints aren't met.
type SelectEnterpriseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectEnterpriseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectEnterpriseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectEnterpriseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectEnterpriseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectEnterpriseResponseValidationError) ErrorName() string {
	return "SelectEnterpriseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SelectEnterpriseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectEnterpriseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectEnterpriseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectEnterpriseResponseValidationError{}
