// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: adset.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	common "github.com/hnhuaxi/platform/proto/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_AD_PREPARE Status = 0
	Status_AD_RUNNING Status = 1
	Status_AD_STOP    Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "AD_PREPARE",
		1: "AD_RUNNING",
		2: "AD_STOP",
	}
	Status_value = map[string]int32{
		"AD_PREPARE": 0,
		"AD_RUNNING": 1,
		"AD_STOP":    2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_adset_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_adset_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{0}
}

type OperActionType int32

const (
	OperActionType_OP_Push          OperActionType = 0
	OperActionType_OP_Ack           OperActionType = 1
	OperActionType_OP_ChangeSetting OperActionType = 2
)

// Enum value maps for OperActionType.
var (
	OperActionType_name = map[int32]string{
		0: "OP_Push",
		1: "OP_Ack",
		2: "OP_ChangeSetting",
	}
	OperActionType_value = map[string]int32{
		"OP_Push":          0,
		"OP_Ack":           1,
		"OP_ChangeSetting": 2,
	}
)

func (x OperActionType) Enum() *OperActionType {
	p := new(OperActionType)
	*p = x
	return p
}

func (x OperActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_adset_proto_enumTypes[1].Descriptor()
}

func (OperActionType) Type() protoreflect.EnumType {
	return &file_adset_proto_enumTypes[1]
}

func (x OperActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperActionType.Descriptor instead.
func (OperActionType) EnumDescriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{1}
}

type PushMode int32

const (
	PushMode_PMAuto  PushMode = 0
	PushMode_PMPID   PushMode = 1
	PushMode_PMTable PushMode = 2
)

// Enum value maps for PushMode.
var (
	PushMode_name = map[int32]string{
		0: "PMAuto",
		1: "PMPID",
		2: "PMTable",
	}
	PushMode_value = map[string]int32{
		"PMAuto":  0,
		"PMPID":   1,
		"PMTable": 2,
	}
)

func (x PushMode) Enum() *PushMode {
	p := new(PushMode)
	*p = x
	return p
}

func (x PushMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushMode) Descriptor() protoreflect.EnumDescriptor {
	return file_adset_proto_enumTypes[2].Descriptor()
}

func (PushMode) Type() protoreflect.EnumType {
	return &file_adset_proto_enumTypes[2]
}

func (x PushMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PushMode.Descriptor instead.
func (PushMode) EnumDescriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{2}
}

type ListAdsetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         *common.Paginate `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	EnterpriseId uint32           `protobuf:"varint,2,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
	UserId       uint32           `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Filters      []string         `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Columns      []string         `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	Scopes       []string         `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListAdsetsRequest) Reset() {
	*x = ListAdsetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdsetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdsetsRequest) ProtoMessage() {}

func (x *ListAdsetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdsetsRequest.ProtoReflect.Descriptor instead.
func (*ListAdsetsRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{0}
}

func (x *ListAdsetsRequest) GetPage() *common.Paginate {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListAdsetsRequest) GetEnterpriseId() uint32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *ListAdsetsRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListAdsetsRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListAdsetsRequest) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ListAdsetsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListAdsetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adsets []*Adset                  `protobuf:"bytes,1,rep,name=adsets,proto3" json:"adsets,omitempty"`
	Page   *common.PaginatedResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListAdsetsResponse) Reset() {
	*x = ListAdsetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdsetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdsetsResponse) ProtoMessage() {}

func (x *ListAdsetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdsetsResponse.ProtoReflect.Descriptor instead.
func (*ListAdsetsResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{1}
}

func (x *ListAdsetsResponse) GetAdsets() []*Adset {
	if x != nil {
		return x.Adsets
	}
	return nil
}

func (x *ListAdsetsResponse) GetPage() *common.PaginatedResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

type CreateAdsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Provider        string       `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	StrategyName    string       `protobuf:"bytes,3,opt,name=strategy_name,json=strategyName,proto3" json:"strategy_name,omitempty"` // 策略类型
	Strategy        *AdStrategy  `protobuf:"bytes,4,opt,name=strategy,proto3" json:"strategy,omitempty"`
	AccountId       uint32       `protobuf:"varint,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Adids           []uint32     `protobuf:"varint,6,rep,packed,name=adids,proto3" json:"adids,omitempty"`
	DoneActions     []string     `protobuf:"bytes,7,rep,name=done_actions,json=doneActions,proto3" json:"done_actions,omitempty"`
	EnterpriseId    uint32       `protobuf:"varint,8,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
	UserActionSetId int64        `protobuf:"varint,9,opt,name=user_action_set_id,json=userActionSetId,proto3" json:"user_action_set_id,omitempty"`
	Goal            string       `protobuf:"bytes,10,opt,name=goal,proto3" json:"goal,omitempty"`
	DeepGoal        string       `protobuf:"bytes,11,opt,name=deep_goal,json=deepGoal,proto3" json:"deep_goal,omitempty"`
	Params          *AdsetParams `protobuf:"bytes,12,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateAdsetRequest) Reset() {
	*x = CreateAdsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdsetRequest) ProtoMessage() {}

func (x *CreateAdsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdsetRequest.ProtoReflect.Descriptor instead.
func (*CreateAdsetRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAdsetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAdsetRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateAdsetRequest) GetStrategyName() string {
	if x != nil {
		return x.StrategyName
	}
	return ""
}

func (x *CreateAdsetRequest) GetStrategy() *AdStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *CreateAdsetRequest) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreateAdsetRequest) GetAdids() []uint32 {
	if x != nil {
		return x.Adids
	}
	return nil
}

func (x *CreateAdsetRequest) GetDoneActions() []string {
	if x != nil {
		return x.DoneActions
	}
	return nil
}

func (x *CreateAdsetRequest) GetEnterpriseId() uint32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *CreateAdsetRequest) GetUserActionSetId() int64 {
	if x != nil {
		return x.UserActionSetId
	}
	return 0
}

func (x *CreateAdsetRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *CreateAdsetRequest) GetDeepGoal() string {
	if x != nil {
		return x.DeepGoal
	}
	return ""
}

func (x *CreateAdsetRequest) GetParams() *AdsetParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetAdsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnterpriseId uint32 `protobuf:"varint,2,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
}

func (x *GetAdsetRequest) Reset() {
	*x = GetAdsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdsetRequest) ProtoMessage() {}

func (x *GetAdsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdsetRequest.ProtoReflect.Descriptor instead.
func (*GetAdsetRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{3}
}

func (x *GetAdsetRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAdsetRequest) GetEnterpriseId() uint32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

type UpdateAdsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// string strategy = 2; // 策略类型
	AccountId *uint32  `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	Adids     []uint32 `protobuf:"varint,4,rep,packed,name=adids,proto3" json:"adids,omitempty"`
	// uint32 enterprise_id  = 5;
	UserActionSetId *int64        `protobuf:"varint,5,opt,name=user_action_set_id,json=userActionSetId,proto3,oneof" json:"user_action_set_id,omitempty"`
	Goal            *string       `protobuf:"bytes,6,opt,name=goal,proto3,oneof" json:"goal,omitempty"`
	DeepGoal        *string       `protobuf:"bytes,7,opt,name=deep_goal,json=deepGoal,proto3,oneof" json:"deep_goal,omitempty"`
	FreezeCustomer  *bool         `protobuf:"varint,8,opt,name=freeze_customer,json=freezeCustomer,proto3,oneof" json:"freeze_customer,omitempty"`
	Params          *AdsetParams  `protobuf:"bytes,9,opt,name=params,proto3,oneof" json:"params,omitempty"`
	DoneActions     []string      `protobuf:"bytes,10,rep,name=done_actions,json=doneActions,proto3" json:"done_actions,omitempty"`
	Expirment       *bool         `protobuf:"varint,11,opt,name=expirment,proto3,oneof" json:"expirment,omitempty"`
	Review          *bool         `protobuf:"varint,12,opt,name=review,proto3,oneof" json:"review,omitempty"`
	PushStrategy    *PushStrategy `protobuf:"bytes,13,opt,name=push_strategy,json=pushStrategy,proto3,oneof" json:"push_strategy,omitempty"`
	StrategyName    *string       `protobuf:"bytes,14,opt,name=strategy_name,json=strategyName,proto3,oneof" json:"strategy_name,omitempty"` // 策略类型
	Strategy        *AdStrategy   `protobuf:"bytes,15,opt,name=strategy,proto3,oneof" json:"strategy,omitempty"`
	Version         *string       `protobuf:"bytes,16,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *UpdateAdsetRequest) Reset() {
	*x = UpdateAdsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdsetRequest) ProtoMessage() {}

func (x *UpdateAdsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdsetRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdsetRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAdsetRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAdsetRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateAdsetRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *UpdateAdsetRequest) GetAdids() []uint32 {
	if x != nil {
		return x.Adids
	}
	return nil
}

func (x *UpdateAdsetRequest) GetUserActionSetId() int64 {
	if x != nil && x.UserActionSetId != nil {
		return *x.UserActionSetId
	}
	return 0
}

func (x *UpdateAdsetRequest) GetGoal() string {
	if x != nil && x.Goal != nil {
		return *x.Goal
	}
	return ""
}

func (x *UpdateAdsetRequest) GetDeepGoal() string {
	if x != nil && x.DeepGoal != nil {
		return *x.DeepGoal
	}
	return ""
}

func (x *UpdateAdsetRequest) GetFreezeCustomer() bool {
	if x != nil && x.FreezeCustomer != nil {
		return *x.FreezeCustomer
	}
	return false
}

func (x *UpdateAdsetRequest) GetParams() *AdsetParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateAdsetRequest) GetDoneActions() []string {
	if x != nil {
		return x.DoneActions
	}
	return nil
}

func (x *UpdateAdsetRequest) GetExpirment() bool {
	if x != nil && x.Expirment != nil {
		return *x.Expirment
	}
	return false
}

func (x *UpdateAdsetRequest) GetReview() bool {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return false
}

func (x *UpdateAdsetRequest) GetPushStrategy() *PushStrategy {
	if x != nil {
		return x.PushStrategy
	}
	return nil
}

func (x *UpdateAdsetRequest) GetStrategyName() string {
	if x != nil && x.StrategyName != nil {
		return *x.StrategyName
	}
	return ""
}

func (x *UpdateAdsetRequest) GetStrategy() *AdStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *UpdateAdsetRequest) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type CorrectAdsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CorrectAdsetRequest) Reset() {
	*x = CorrectAdsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectAdsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectAdsetRequest) ProtoMessage() {}

func (x *CorrectAdsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectAdsetRequest.ProtoReflect.Descriptor instead.
func (*CorrectAdsetRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{5}
}

func (x *CorrectAdsetRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AdsetCorrectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Correction *Correction `protobuf:"bytes,2,opt,name=correction,proto3" json:"correction,omitempty"`
}

func (x *AdsetCorrectionResponse) Reset() {
	*x = AdsetCorrectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetCorrectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetCorrectionResponse) ProtoMessage() {}

func (x *AdsetCorrectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetCorrectionResponse.ProtoReflect.Descriptor instead.
func (*AdsetCorrectionResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{6}
}

func (x *AdsetCorrectionResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdsetCorrectionResponse) GetCorrection() *Correction {
	if x != nil {
		return x.Correction
	}
	return nil
}

type ChangeAdsetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnterpriseId uint32 `protobuf:"varint,2,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
	Status       string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChangeAdsetStateRequest) Reset() {
	*x = ChangeAdsetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdsetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdsetStateRequest) ProtoMessage() {}

func (x *ChangeAdsetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdsetStateRequest.ProtoReflect.Descriptor instead.
func (*ChangeAdsetStateRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeAdsetStateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChangeAdsetStateRequest) GetEnterpriseId() uint32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *ChangeAdsetStateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeleteAdsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAdsetRequest) Reset() {
	*x = DeleteAdsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdsetRequest) ProtoMessage() {}

func (x *DeleteAdsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdsetRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdsetRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAdsetRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SendActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Action string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Args   []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *SendActionRequest) Reset() {
	*x = SendActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendActionRequest) ProtoMessage() {}

func (x *SendActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendActionRequest.ProtoReflect.Descriptor instead.
func (*SendActionRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{9}
}

func (x *SendActionRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SendActionRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type SendActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActionId string `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SendActionResponse) Reset() {
	*x = SendActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendActionResponse) ProtoMessage() {}

func (x *SendActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendActionResponse.ProtoReflect.Descriptor instead.
func (*SendActionResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{10}
}

func (x *SendActionResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendActionResponse) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *SendActionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AdsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adset *Adset `protobuf:"bytes,1,opt,name=adset,proto3" json:"adset,omitempty"`
}

func (x *AdsetResponse) Reset() {
	*x = AdsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetResponse) ProtoMessage() {}

func (x *AdsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetResponse.ProtoReflect.Descriptor instead.
func (*AdsetResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{11}
}

func (x *AdsetResponse) GetAdset() *Adset {
	if x != nil {
		return x.Adset
	}
	return nil
}

type AdsetAppendAdsReqeust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId uint32   `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Adids     []uint32 `protobuf:"varint,3,rep,packed,name=adids,proto3" json:"adids,omitempty"`
}

func (x *AdsetAppendAdsReqeust) Reset() {
	*x = AdsetAppendAdsReqeust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetAppendAdsReqeust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetAppendAdsReqeust) ProtoMessage() {}

func (x *AdsetAppendAdsReqeust) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetAppendAdsReqeust.ProtoReflect.Descriptor instead.
func (*AdsetAppendAdsReqeust) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{12}
}

func (x *AdsetAppendAdsReqeust) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdsetAppendAdsReqeust) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AdsetAppendAdsReqeust) GetAdids() []uint32 {
	if x != nil {
		return x.Adids
	}
	return nil
}

type AdsetAppendAdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ads []*Ad `protobuf:"bytes,1,rep,name=ads,proto3" json:"ads,omitempty"`
}

func (x *AdsetAppendAdsResponse) Reset() {
	*x = AdsetAppendAdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetAppendAdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetAppendAdsResponse) ProtoMessage() {}

func (x *AdsetAppendAdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetAppendAdsResponse.ProtoReflect.Descriptor instead.
func (*AdsetAppendAdsResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{13}
}

func (x *AdsetAppendAdsResponse) GetAds() []*Ad {
	if x != nil {
		return x.Ads
	}
	return nil
}

type AdsetTracksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnterpriseId uint32 `protobuf:"varint,2,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
}

func (x *AdsetTracksRequest) Reset() {
	*x = AdsetTracksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetTracksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetTracksRequest) ProtoMessage() {}

func (x *AdsetTracksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetTracksRequest.ProtoReflect.Descriptor instead.
func (*AdsetTracksRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{14}
}

func (x *AdsetTracksRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdsetTracksRequest) GetEnterpriseId() uint32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

type AdsetTracksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*Track                  `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	Page   *common.PaginatedResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *AdsetTracksResponse) Reset() {
	*x = AdsetTracksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetTracksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetTracksResponse) ProtoMessage() {}

func (x *AdsetTracksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetTracksResponse.ProtoReflect.Descriptor instead.
func (*AdsetTracksResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{15}
}

func (x *AdsetTracksResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *AdsetTracksResponse) GetPage() *common.PaginatedResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

type AdsetTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnterpriseId uint32           `protobuf:"varint,2,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
	OnlyDones    bool             `protobuf:"varint,3,opt,name=only_dones,json=onlyDones,proto3" json:"only_dones,omitempty"`
	Page         *common.Paginate `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	StartTime    uint32           `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      uint32           `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	StartDate    string           `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      string           `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *AdsetTimelineRequest) Reset() {
	*x = AdsetTimelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetTimelineRequest) ProtoMessage() {}

func (x *AdsetTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetTimelineRequest.ProtoReflect.Descriptor instead.
func (*AdsetTimelineRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{16}
}

func (x *AdsetTimelineRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdsetTimelineRequest) GetEnterpriseId() uint32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *AdsetTimelineRequest) GetOnlyDones() bool {
	if x != nil {
		return x.OnlyDones
	}
	return false
}

func (x *AdsetTimelineRequest) GetPage() *common.Paginate {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AdsetTimelineRequest) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdsetTimelineRequest) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AdsetTimelineRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *AdsetTimelineRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type AdsetTimelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeline []*Timeline               `protobuf:"bytes,1,rep,name=timeline,proto3" json:"timeline,omitempty"`
	Page     *common.PaginatedResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *AdsetTimelineResponse) Reset() {
	*x = AdsetTimelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetTimelineResponse) ProtoMessage() {}

func (x *AdsetTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetTimelineResponse.ProtoReflect.Descriptor instead.
func (*AdsetTimelineResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{17}
}

func (x *AdsetTimelineResponse) GetTimeline() []*Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *AdsetTimelineResponse) GetPage() *common.PaginatedResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

type AdsetDeleteAdsReqeust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId uint32   `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Adids     []uint32 `protobuf:"varint,3,rep,packed,name=adids,proto3" json:"adids,omitempty"`
}

func (x *AdsetDeleteAdsReqeust) Reset() {
	*x = AdsetDeleteAdsReqeust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetDeleteAdsReqeust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetDeleteAdsReqeust) ProtoMessage() {}

func (x *AdsetDeleteAdsReqeust) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetDeleteAdsReqeust.ProtoReflect.Descriptor instead.
func (*AdsetDeleteAdsReqeust) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{18}
}

func (x *AdsetDeleteAdsReqeust) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdsetDeleteAdsReqeust) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AdsetDeleteAdsReqeust) GetAdids() []uint32 {
	if x != nil {
		return x.Adids
	}
	return nil
}

type Correction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrectTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=correct_time,json=correctTime,proto3" json:"correct_time,omitempty"`
	// string correct_date = 1;
	OftPush int32 `protobuf:"varint,2,opt,name=oft_push,json=oftPush,proto3" json:"oft_push,omitempty"`
	OftDone int32 `protobuf:"varint,3,opt,name=oft_done,json=oftDone,proto3" json:"oft_done,omitempty"`
}

func (x *Correction) Reset() {
	*x = Correction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Correction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Correction) ProtoMessage() {}

func (x *Correction) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Correction.ProtoReflect.Descriptor instead.
func (*Correction) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{19}
}

func (x *Correction) GetCorrectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CorrectTime
	}
	return nil
}

func (x *Correction) GetOftPush() int32 {
	if x != nil {
		return x.OftPush
	}
	return 0
}

func (x *Correction) GetOftDone() int32 {
	if x != nil {
		return x.OftDone
	}
	return 0
}

type Adset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider         string                 `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Prompt           string                 `protobuf:"bytes,4,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Ads              []*Ad                  `protobuf:"bytes,5,rep,name=ads,proto3" json:"ads,omitempty"`
	Preview          string                 `protobuf:"bytes,6,opt,name=preview,proto3" json:"preview,omitempty"`
	AccountId        uint32                 `protobuf:"varint,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatorId        uint32                 `protobuf:"varint,8,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Creator          *common.User           `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	Account          *Account               `protobuf:"bytes,10,opt,name=account,proto3" json:"account,omitempty"`
	SourceAccountId  string                 `protobuf:"bytes,11,opt,name=source_account_id,json=sourceAccountId,proto3" json:"source_account_id,omitempty"`
	EnterpriseId     uint32                 `protobuf:"varint,12,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
	StrategyName     string                 `protobuf:"bytes,13,opt,name=strategy_name,json=strategyName,proto3" json:"strategy_name,omitempty"` // 策略类型
	Strategy         *AdStrategy            `protobuf:"bytes,14,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Correction       *Correction            `protobuf:"bytes,15,opt,name=correction,proto3" json:"correction,omitempty"`
	UserActionSetId  int64                  `protobuf:"varint,16,opt,name=user_action_set_id,json=userActionSetId,proto3" json:"user_action_set_id,omitempty"`
	ProductSourceId  string                 `protobuf:"bytes,17,opt,name=product_source_id,json=productSourceId,proto3" json:"product_source_id,omitempty"`
	Status           Status                 `protobuf:"varint,18,opt,name=status,proto3,enum=ads.Status" json:"status,omitempty"`
	Goal             string                 `protobuf:"bytes,19,opt,name=goal,proto3" json:"goal,omitempty"`
	DeepGoal         string                 `protobuf:"bytes,20,opt,name=deep_goal,json=deepGoal,proto3" json:"deep_goal,omitempty"`
	FreezeCustomer   bool                   `protobuf:"varint,21,opt,name=freeze_customer,json=freezeCustomer,proto3" json:"freeze_customer,omitempty"`
	Expirment        bool                   `protobuf:"varint,22,opt,name=expirment,proto3" json:"expirment,omitempty"` // 实验
	Review           bool                   `protobuf:"varint,23,opt,name=review,proto3" json:"review,omitempty"`
	Params           *AdsetParams           `protobuf:"bytes,24,opt,name=params,proto3" json:"params,omitempty"`
	DoneActions      []string               `protobuf:"bytes,25,rep,name=done_actions,json=doneActions,proto3" json:"done_actions,omitempty"`
	Enterprise       *common.Enterprise     `protobuf:"bytes,26,opt,name=enterprise,proto3" json:"enterprise,omitempty"`
	Product          *Product               `protobuf:"bytes,27,opt,name=product,proto3,oneof" json:"product,omitempty"`
	CustomerServices []*CustomerService     `protobuf:"bytes,28,rep,name=customer_services,json=customerServices,proto3" json:"customer_services,omitempty"`
	ThirdpartyApps   []*ThirdPartyApp       `protobuf:"bytes,29,rep,name=thirdparty_apps,json=thirdpartyApps,proto3" json:"thirdparty_apps,omitempty"`
	PushStrategy     *PushStrategy          `protobuf:"bytes,30,opt,name=push_strategy,json=pushStrategy,proto3" json:"push_strategy,omitempty"`
	CreatedTime      *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime      *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	Count            float32                `protobuf:"fixed32,33,opt,name=count,proto3" json:"count,omitempty"`
	Cost             float32                `protobuf:"fixed32,34,opt,name=cost,proto3" json:"cost,omitempty"`
	TotalCost        float32                `protobuf:"fixed32,35,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	View             float32                `protobuf:"fixed32,36,opt,name=view,proto3" json:"view,omitempty"`
	Click            float32                `protobuf:"fixed32,37,opt,name=click,proto3" json:"click,omitempty"`
	Version          string                 `protobuf:"bytes,38,opt,name=version,proto3" json:"version,omitempty"`
	ProductPrice     float32                `protobuf:"fixed32,39,opt,name=product_price,json=productPrice,proto3" json:"product_price,omitempty"`
	Tags             []string               `protobuf:"bytes,40,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Adset) Reset() {
	*x = Adset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adset) ProtoMessage() {}

func (x *Adset) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adset.ProtoReflect.Descriptor instead.
func (*Adset) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{20}
}

func (x *Adset) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Adset) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Adset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Adset) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *Adset) GetAds() []*Ad {
	if x != nil {
		return x.Ads
	}
	return nil
}

func (x *Adset) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *Adset) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Adset) GetCreatorId() uint32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Adset) GetCreator() *common.User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Adset) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Adset) GetSourceAccountId() string {
	if x != nil {
		return x.SourceAccountId
	}
	return ""
}

func (x *Adset) GetEnterpriseId() uint32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

func (x *Adset) GetStrategyName() string {
	if x != nil {
		return x.StrategyName
	}
	return ""
}

func (x *Adset) GetStrategy() *AdStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *Adset) GetCorrection() *Correction {
	if x != nil {
		return x.Correction
	}
	return nil
}

func (x *Adset) GetUserActionSetId() int64 {
	if x != nil {
		return x.UserActionSetId
	}
	return 0
}

func (x *Adset) GetProductSourceId() string {
	if x != nil {
		return x.ProductSourceId
	}
	return ""
}

func (x *Adset) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_AD_PREPARE
}

func (x *Adset) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *Adset) GetDeepGoal() string {
	if x != nil {
		return x.DeepGoal
	}
	return ""
}

func (x *Adset) GetFreezeCustomer() bool {
	if x != nil {
		return x.FreezeCustomer
	}
	return false
}

func (x *Adset) GetExpirment() bool {
	if x != nil {
		return x.Expirment
	}
	return false
}

func (x *Adset) GetReview() bool {
	if x != nil {
		return x.Review
	}
	return false
}

func (x *Adset) GetParams() *AdsetParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Adset) GetDoneActions() []string {
	if x != nil {
		return x.DoneActions
	}
	return nil
}

func (x *Adset) GetEnterprise() *common.Enterprise {
	if x != nil {
		return x.Enterprise
	}
	return nil
}

func (x *Adset) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Adset) GetCustomerServices() []*CustomerService {
	if x != nil {
		return x.CustomerServices
	}
	return nil
}

func (x *Adset) GetThirdpartyApps() []*ThirdPartyApp {
	if x != nil {
		return x.ThirdpartyApps
	}
	return nil
}

func (x *Adset) GetPushStrategy() *PushStrategy {
	if x != nil {
		return x.PushStrategy
	}
	return nil
}

func (x *Adset) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Adset) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

func (x *Adset) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Adset) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Adset) GetTotalCost() float32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *Adset) GetView() float32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Adset) GetClick() float32 {
	if x != nil {
		return x.Click
	}
	return 0
}

func (x *Adset) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Adset) GetProductPrice() float32 {
	if x != nil {
		return x.ProductPrice
	}
	return 0
}

func (x *Adset) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Timeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Duration uint32                 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Subject  string                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// Types that are assignable to Action:
	//
	//	*Timeline_Oper
	//	*Timeline_Track
	Action isTimeline_Action `protobuf_oneof:"action"`
}

func (x *Timeline) Reset() {
	*x = Timeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeline) ProtoMessage() {}

func (x *Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeline.ProtoReflect.Descriptor instead.
func (*Timeline) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{21}
}

func (x *Timeline) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Timeline) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Timeline) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (m *Timeline) GetAction() isTimeline_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Timeline) GetOper() *OperAction {
	if x, ok := x.GetAction().(*Timeline_Oper); ok {
		return x.Oper
	}
	return nil
}

func (x *Timeline) GetTrack() *TrackAction {
	if x, ok := x.GetAction().(*Timeline_Track); ok {
		return x.Track
	}
	return nil
}

type isTimeline_Action interface {
	isTimeline_Action()
}

type Timeline_Oper struct {
	Oper *OperAction `protobuf:"bytes,6,opt,name=oper,proto3,oneof"`
}

type Timeline_Track struct {
	Track *TrackAction `protobuf:"bytes,7,opt,name=track,proto3,oneof"`
}

func (*Timeline_Oper) isTimeline_Action() {}

func (*Timeline_Track) isTimeline_Action() {}

type OperAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushCount  uint32            `protobuf:"varint,1,opt,name=pushCount,proto3" json:"pushCount,omitempty"`
	Ack        uint32            `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`
	ActionType OperActionType    `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3,enum=ads.OperActionType" json:"action_type,omitempty"`
	Target     string            `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Params     map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OperAction) Reset() {
	*x = OperAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperAction) ProtoMessage() {}

func (x *OperAction) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperAction.ProtoReflect.Descriptor instead.
func (*OperAction) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{22}
}

func (x *OperAction) GetPushCount() uint32 {
	if x != nil {
		return x.PushCount
	}
	return 0
}

func (x *OperAction) GetAck() uint32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

func (x *OperAction) GetActionType() OperActionType {
	if x != nil {
		return x.ActionType
	}
	return OperActionType_OP_Push
}

func (x *OperAction) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *OperAction) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type TrackAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions  []*Action              `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	CanPush  bool                   `protobuf:"varint,2,opt,name=canPush,proto3" json:"canPush,omitempty"`
	Pushed   bool                   `protobuf:"varint,3,opt,name=pushed,proto3" json:"pushed,omitempty"`
	Weixin   string                 `protobuf:"bytes,4,opt,name=weixin,proto3" json:"weixin,omitempty"`
	Ips      []string               `protobuf:"bytes,5,rep,name=ips,proto3" json:"ips,omitempty"`
	Cities   []string               `protobuf:"bytes,6,rep,name=cities,proto3" json:"cities,omitempty"`
	PushedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=pushed_at,json=pushedAt,proto3,oneof" json:"pushed_at,omitempty"`
}

func (x *TrackAction) Reset() {
	*x = TrackAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackAction) ProtoMessage() {}

func (x *TrackAction) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackAction.ProtoReflect.Descriptor instead.
func (*TrackAction) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{23}
}

func (x *TrackAction) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TrackAction) GetCanPush() bool {
	if x != nil {
		return x.CanPush
	}
	return false
}

func (x *TrackAction) GetPushed() bool {
	if x != nil {
		return x.Pushed
	}
	return false
}

func (x *TrackAction) GetWeixin() string {
	if x != nil {
		return x.Weixin
	}
	return ""
}

func (x *TrackAction) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *TrackAction) GetCities() []string {
	if x != nil {
		return x.Cities
	}
	return nil
}

func (x *TrackAction) GetPushedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PushedAt
	}
	return nil
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType string        `protobuf:"bytes,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Time       uint32        `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Scroll     float32       `protobuf:"fixed32,3,opt,name=scroll,proto3" json:"scroll,omitempty"`
	Params     *ActionParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{24}
}

func (x *Action) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *Action) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Action) GetScroll() float32 {
	if x != nil {
		return x.Scroll
	}
	return 0
}

func (x *Action) GetParams() *ActionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type PushStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode   PushMode    `protobuf:"varint,1,opt,name=mode,proto3,enum=ads.PushMode" json:"mode,omitempty"`
	Config *PushConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PushStrategy) Reset() {
	*x = PushStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushStrategy) ProtoMessage() {}

func (x *PushStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushStrategy.ProtoReflect.Descriptor instead.
func (*PushStrategy) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{25}
}

func (x *PushStrategy) GetMode() PushMode {
	if x != nil {
		return x.Mode
	}
	return PushMode_PMAuto
}

func (x *PushStrategy) GetConfig() *PushConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type PushConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auto  *AutoConfig  `protobuf:"bytes,1,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	Pid   *PIDConfig   `protobuf:"bytes,2,opt,name=pid,proto3,oneof" json:"pid,omitempty"`
	Table *TableConfig `protobuf:"bytes,3,opt,name=table,proto3,oneof" json:"table,omitempty"`
}

func (x *PushConfig) Reset() {
	*x = PushConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushConfig) ProtoMessage() {}

func (x *PushConfig) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushConfig.ProtoReflect.Descriptor instead.
func (*PushConfig) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{26}
}

func (x *PushConfig) GetAuto() *AutoConfig {
	if x != nil {
		return x.Auto
	}
	return nil
}

func (x *PushConfig) GetPid() *PIDConfig {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *PushConfig) GetTable() *TableConfig {
	if x != nil {
		return x.Table
	}
	return nil
}

type PIDConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratio          float32              `protobuf:"fixed32,1,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Start          uint32               `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	MaxPushCount   uint32               `protobuf:"varint,3,opt,name=max_push_count,json=maxPushCount,proto3" json:"max_push_count,omitempty"`
	Pgain          float32              `protobuf:"fixed32,4,opt,name=pgain,proto3" json:"pgain,omitempty"`
	Igain          float32              `protobuf:"fixed32,5,opt,name=igain,proto3" json:"igain,omitempty"`
	Dgain          float32              `protobuf:"fixed32,6,opt,name=dgain,proto3" json:"dgain,omitempty"`
	WorkerInternal *durationpb.Duration `protobuf:"bytes,7,opt,name=worker_internal,json=workerInternal,proto3" json:"worker_internal,omitempty"`
}

func (x *PIDConfig) Reset() {
	*x = PIDConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PIDConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PIDConfig) ProtoMessage() {}

func (x *PIDConfig) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PIDConfig.ProtoReflect.Descriptor instead.
func (*PIDConfig) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{27}
}

func (x *PIDConfig) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *PIDConfig) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PIDConfig) GetMaxPushCount() uint32 {
	if x != nil {
		return x.MaxPushCount
	}
	return 0
}

func (x *PIDConfig) GetPgain() float32 {
	if x != nil {
		return x.Pgain
	}
	return 0
}

func (x *PIDConfig) GetIgain() float32 {
	if x != nil {
		return x.Igain
	}
	return 0
}

func (x *PIDConfig) GetDgain() float32 {
	if x != nil {
		return x.Dgain
	}
	return 0
}

func (x *PIDConfig) GetWorkerInternal() *durationpb.Duration {
	if x != nil {
		return x.WorkerInternal
	}
	return nil
}

type AutoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint32  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Ratio float32 `protobuf:"fixed32,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (x *AutoConfig) Reset() {
	*x = AutoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoConfig) ProtoMessage() {}

func (x *AutoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoConfig.ProtoReflect.Descriptor instead.
func (*AutoConfig) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{28}
}

func (x *AutoConfig) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AutoConfig) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

type TableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  uint32  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Ratio  float32 `protobuf:"fixed32,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	MRatio float32 `protobuf:"fixed32,3,opt,name=m_ratio,json=mRatio,proto3" json:"m_ratio,omitempty"`
}

func (x *TableConfig) Reset() {
	*x = TableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableConfig) ProtoMessage() {}

func (x *TableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableConfig.ProtoReflect.Descriptor instead.
func (*TableConfig) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{29}
}

func (x *TableConfig) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TableConfig) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *TableConfig) GetMRatio() float32 {
	if x != nil {
		return x.MRatio
	}
	return 0
}

type AdsetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScrollX1    float32  `protobuf:"fixed32,1,opt,name=scrollX1,proto3" json:"scrollX1,omitempty"`                          // 滚动系数1
	ScrollX2    float32  `protobuf:"fixed32,2,opt,name=scrollX2,proto3" json:"scrollX2,omitempty"`                          // 滚动系数2
	ScrollX3    float32  `protobuf:"fixed32,3,opt,name=scrollX3,proto3" json:"scrollX3,omitempty"`                          // 滚动系数3
	StayTimeX1  uint32   `protobuf:"varint,4,opt,name=stayTimeX1,proto3" json:"stayTimeX1,omitempty"`                       // 停留时间系数1
	StayTimeX2  uint32   `protobuf:"varint,5,opt,name=stayTimeX2,proto3" json:"stayTimeX2,omitempty"`                       // 停留时间系数2
	StayTimeX3  uint32   `protobuf:"varint,6,opt,name=stayTimeX3,proto3" json:"stayTimeX3,omitempty"`                       // 停留时间系数3
	RetX1       float32  `protobuf:"fixed32,7,opt,name=retX1,proto3" json:"retX1,omitempty"`                                // 回调系数1
	RetX2       float32  `protobuf:"fixed32,8,opt,name=retX2,proto3" json:"retX2,omitempty"`                                // 回调系数2
	Start       uint32   `protobuf:"varint,9,opt,name=start,proto3" json:"start,omitempty"`                                 // 启动阈值
	UseScene    bool     `protobuf:"varint,10,opt,name=use_scene,json=useScene,proto3" json:"use_scene,omitempty"`          // 启用场景
	Scenes      []string `protobuf:"bytes,11,rep,name=scenes,proto3" json:"scenes,omitempty"`                               // 场景
	ButtonDelay int32    `protobuf:"varint,12,opt,name=button_delay,json=buttonDelay,proto3" json:"button_delay,omitempty"` // 按钮延迟
}

func (x *AdsetParams) Reset() {
	*x = AdsetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetParams) ProtoMessage() {}

func (x *AdsetParams) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetParams.ProtoReflect.Descriptor instead.
func (*AdsetParams) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{30}
}

func (x *AdsetParams) GetScrollX1() float32 {
	if x != nil {
		return x.ScrollX1
	}
	return 0
}

func (x *AdsetParams) GetScrollX2() float32 {
	if x != nil {
		return x.ScrollX2
	}
	return 0
}

func (x *AdsetParams) GetScrollX3() float32 {
	if x != nil {
		return x.ScrollX3
	}
	return 0
}

func (x *AdsetParams) GetStayTimeX1() uint32 {
	if x != nil {
		return x.StayTimeX1
	}
	return 0
}

func (x *AdsetParams) GetStayTimeX2() uint32 {
	if x != nil {
		return x.StayTimeX2
	}
	return 0
}

func (x *AdsetParams) GetStayTimeX3() uint32 {
	if x != nil {
		return x.StayTimeX3
	}
	return 0
}

func (x *AdsetParams) GetRetX1() float32 {
	if x != nil {
		return x.RetX1
	}
	return 0
}

func (x *AdsetParams) GetRetX2() float32 {
	if x != nil {
		return x.RetX2
	}
	return 0
}

func (x *AdsetParams) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AdsetParams) GetUseScene() bool {
	if x != nil {
		return x.UseScene
	}
	return false
}

func (x *AdsetParams) GetScenes() []string {
	if x != nil {
		return x.Scenes
	}
	return nil
}

func (x *AdsetParams) GetButtonDelay() int32 {
	if x != nil {
		return x.ButtonDelay
	}
	return 0
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId     uint32                 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Count       uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Weixin      string                 `protobuf:"bytes,3,opt,name=weixin,proto3" json:"weixin,omitempty"`
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UserId      uint32                 `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username    string                 `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{31}
}

func (x *Ack) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *Ack) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Ack) GetWeixin() string {
	if x != nil {
		return x.Weixin
	}
	return ""
}

func (x *Ack) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Ack) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Ack) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PushbackAckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Count   uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Weixin  string `protobuf:"bytes,3,opt,name=weixin,proto3" json:"weixin,omitempty"`
}

func (x *PushbackAckRequest) Reset() {
	*x = PushbackAckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushbackAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushbackAckRequest) ProtoMessage() {}

func (x *PushbackAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushbackAckRequest.ProtoReflect.Descriptor instead.
func (*PushbackAckRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{32}
}

func (x *PushbackAckRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushbackAckRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PushbackAckRequest) GetWeixin() string {
	if x != nil {
		return x.Weixin
	}
	return ""
}

type PushbackReplenishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32  `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Count   uint32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ClickId *string `protobuf:"bytes,3,opt,name=click_id,json=clickId,proto3,oneof" json:"click_id,omitempty"`
	Mock    bool    `protobuf:"varint,4,opt,name=mock,proto3" json:"mock,omitempty"`
}

func (x *PushbackReplenishRequest) Reset() {
	*x = PushbackReplenishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushbackReplenishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushbackReplenishRequest) ProtoMessage() {}

func (x *PushbackReplenishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushbackReplenishRequest.ProtoReflect.Descriptor instead.
func (*PushbackReplenishRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{33}
}

func (x *PushbackReplenishRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushbackReplenishRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PushbackReplenishRequest) GetClickId() string {
	if x != nil && x.ClickId != nil {
		return *x.ClickId
	}
	return ""
}

func (x *PushbackReplenishRequest) GetMock() bool {
	if x != nil {
		return x.Mock
	}
	return false
}

type ReplenishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Fails   uint32 `protobuf:"varint,2,opt,name=fails,proto3" json:"fails,omitempty"`
	Warning string `protobuf:"bytes,3,opt,name=warning,proto3" json:"warning,omitempty"`
}

func (x *ReplenishResponse) Reset() {
	*x = ReplenishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplenishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplenishResponse) ProtoMessage() {}

func (x *ReplenishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplenishResponse.ProtoReflect.Descriptor instead.
func (*ReplenishResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{34}
}

func (x *ReplenishResponse) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *ReplenishResponse) GetFails() uint32 {
	if x != nil {
		return x.Fails
	}
	return 0
}

func (x *ReplenishResponse) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

type PushbackRecallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Count   uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PushbackRecallRequest) Reset() {
	*x = PushbackRecallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushbackRecallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushbackRecallRequest) ProtoMessage() {}

func (x *PushbackRecallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushbackRecallRequest.ProtoReflect.Descriptor instead.
func (*PushbackRecallRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{35}
}

func (x *PushbackRecallRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushbackRecallRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LiveAdsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId   uint32                 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *LiveAdsetRequest) Reset() {
	*x = LiveAdsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveAdsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveAdsetRequest) ProtoMessage() {}

func (x *LiveAdsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveAdsetRequest.ProtoReflect.Descriptor instead.
func (*LiveAdsetRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{36}
}

func (x *LiveAdsetRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *LiveAdsetRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type AdsetStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId    uint32  `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Acks       uint32  `protobuf:"varint,2,opt,name=acks,proto3" json:"acks,omitempty"`
	DAcks      int32   `protobuf:"varint,3,opt,name=d_acks,json=dAcks,proto3" json:"d_acks,omitempty"`
	Push       uint32  `protobuf:"varint,4,opt,name=push,proto3" json:"push,omitempty"`
	DPush      int32   `protobuf:"varint,5,opt,name=d_push,json=dPush,proto3" json:"d_push,omitempty"`
	Pv         uint32  `protobuf:"varint,6,opt,name=pv,proto3" json:"pv,omitempty"`
	DPv        int32   `protobuf:"varint,7,opt,name=d_pv,json=dPv,proto3" json:"d_pv,omitempty"`
	Ol         uint32  `protobuf:"varint,8,opt,name=ol,proto3" json:"ol,omitempty"`
	DOl        int32   `protobuf:"varint,9,opt,name=d_ol,json=dOl,proto3" json:"d_ol,omitempty"`
	Done       uint32  `protobuf:"varint,10,opt,name=done,proto3" json:"done,omitempty"`
	DDone      int32   `protobuf:"varint,11,opt,name=d_done,json=dDone,proto3" json:"d_done,omitempty"`
	Adone      uint32  `protobuf:"varint,12,opt,name=adone,proto3" json:"adone,omitempty"`
	DAdone     int32   `protobuf:"varint,13,opt,name=d_adone,json=dAdone,proto3" json:"d_adone,omitempty"`
	TotalCost  float64 `protobuf:"fixed64,14,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	DTotalCost float64 `protobuf:"fixed64,15,opt,name=d_total_cost,json=dTotalCost,proto3" json:"d_total_cost,omitempty"`
	View       int32   `protobuf:"varint,16,opt,name=view,proto3" json:"view,omitempty"`
	DView      int32   `protobuf:"varint,17,opt,name=d_view,json=dView,proto3" json:"d_view,omitempty"`
	Clicks     int32   `protobuf:"varint,18,opt,name=clicks,proto3" json:"clicks,omitempty"`
	DClicks    int32   `protobuf:"varint,19,opt,name=d_clicks,json=dClicks,proto3" json:"d_clicks,omitempty"`
	Cost       float64 `protobuf:"fixed64,20,opt,name=cost,proto3" json:"cost,omitempty"`
	DCost      float64 `protobuf:"fixed64,21,opt,name=d_cost,json=dCost,proto3" json:"d_cost,omitempty"`
	Rdone      uint32  `protobuf:"varint,22,opt,name=rdone,proto3" json:"rdone,omitempty"`
	DRdone     int32   `protobuf:"varint,23,opt,name=d_rdone,json=dRdone,proto3" json:"d_rdone,omitempty"`
	Rrate      float64 `protobuf:"fixed64,24,opt,name=rrate,proto3" json:"rrate,omitempty"`
	DRrate     float64 `protobuf:"fixed64,25,opt,name=d_rrate,json=dRrate,proto3" json:"d_rrate,omitempty"`
	Remind     uint32  `protobuf:"varint,26,opt,name=remind,proto3" json:"remind,omitempty"`
	DRemind    int32   `protobuf:"varint,27,opt,name=d_remind,json=dRemind,proto3" json:"d_remind,omitempty"`
	Error      string  `protobuf:"bytes,28,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AdsetStat) Reset() {
	*x = AdsetStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsetStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsetStat) ProtoMessage() {}

func (x *AdsetStat) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsetStat.ProtoReflect.Descriptor instead.
func (*AdsetStat) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{37}
}

func (x *AdsetStat) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *AdsetStat) GetAcks() uint32 {
	if x != nil {
		return x.Acks
	}
	return 0
}

func (x *AdsetStat) GetDAcks() int32 {
	if x != nil {
		return x.DAcks
	}
	return 0
}

func (x *AdsetStat) GetPush() uint32 {
	if x != nil {
		return x.Push
	}
	return 0
}

func (x *AdsetStat) GetDPush() int32 {
	if x != nil {
		return x.DPush
	}
	return 0
}

func (x *AdsetStat) GetPv() uint32 {
	if x != nil {
		return x.Pv
	}
	return 0
}

func (x *AdsetStat) GetDPv() int32 {
	if x != nil {
		return x.DPv
	}
	return 0
}

func (x *AdsetStat) GetOl() uint32 {
	if x != nil {
		return x.Ol
	}
	return 0
}

func (x *AdsetStat) GetDOl() int32 {
	if x != nil {
		return x.DOl
	}
	return 0
}

func (x *AdsetStat) GetDone() uint32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *AdsetStat) GetDDone() int32 {
	if x != nil {
		return x.DDone
	}
	return 0
}

func (x *AdsetStat) GetAdone() uint32 {
	if x != nil {
		return x.Adone
	}
	return 0
}

func (x *AdsetStat) GetDAdone() int32 {
	if x != nil {
		return x.DAdone
	}
	return 0
}

func (x *AdsetStat) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *AdsetStat) GetDTotalCost() float64 {
	if x != nil {
		return x.DTotalCost
	}
	return 0
}

func (x *AdsetStat) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *AdsetStat) GetDView() int32 {
	if x != nil {
		return x.DView
	}
	return 0
}

func (x *AdsetStat) GetClicks() int32 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *AdsetStat) GetDClicks() int32 {
	if x != nil {
		return x.DClicks
	}
	return 0
}

func (x *AdsetStat) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *AdsetStat) GetDCost() float64 {
	if x != nil {
		return x.DCost
	}
	return 0
}

func (x *AdsetStat) GetRdone() uint32 {
	if x != nil {
		return x.Rdone
	}
	return 0
}

func (x *AdsetStat) GetDRdone() int32 {
	if x != nil {
		return x.DRdone
	}
	return 0
}

func (x *AdsetStat) GetRrate() float64 {
	if x != nil {
		return x.Rrate
	}
	return 0
}

func (x *AdsetStat) GetDRrate() float64 {
	if x != nil {
		return x.DRrate
	}
	return 0
}

func (x *AdsetStat) GetRemind() uint32 {
	if x != nil {
		return x.Remind
	}
	return 0
}

func (x *AdsetStat) GetDRemind() int32 {
	if x != nil {
		return x.DRemind
	}
	return 0
}

func (x *AdsetStat) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId      uint32        `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	ClickId      string        `protobuf:"bytes,2,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	Deep         bool          `protobuf:"varint,3,opt,name=deep,proto3" json:"deep,omitempty"`
	Group        string        `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"` // 分组
	Kf           string        `protobuf:"bytes,5,opt,name=kf,proto3" json:"kf,omitempty"`       // 客服
	Params       *ActionParams `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	ProductPrice float32       `protobuf:"fixed32,7,opt,name=product_price,json=productPrice,proto3" json:"product_price,omitempty"`
	Tags         []string      `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{38}
}

func (x *PushRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushRequest) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *PushRequest) GetDeep() bool {
	if x != nil {
		return x.Deep
	}
	return false
}

func (x *PushRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *PushRequest) GetKf() string {
	if x != nil {
		return x.Kf
	}
	return ""
}

func (x *PushRequest) GetParams() *ActionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PushRequest) GetProductPrice() float32 {
	if x != nil {
		return x.ProductPrice
	}
	return 0
}

func (x *PushRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PushbackLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	ClickId string `protobuf:"bytes,2,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	Lock    bool   `protobuf:"varint,3,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (x *PushbackLockRequest) Reset() {
	*x = PushbackLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushbackLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushbackLockRequest) ProtoMessage() {}

func (x *PushbackLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushbackLockRequest.ProtoReflect.Descriptor instead.
func (*PushbackLockRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{39}
}

func (x *PushbackLockRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushbackLockRequest) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *PushbackLockRequest) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

type PushbackLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PushbackLockResponse) Reset() {
	*x = PushbackLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushbackLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushbackLockResponse) ProtoMessage() {}

func (x *PushbackLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushbackLockResponse.ProtoReflect.Descriptor instead.
func (*PushbackLockResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{40}
}

func (x *PushbackLockResponse) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushbackLockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PushbackLocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId  uint32   `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	ClickIds []string `protobuf:"bytes,2,rep,name=click_ids,json=clickIds,proto3" json:"click_ids,omitempty"`
	Lock     bool     `protobuf:"varint,3,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (x *PushbackLocksRequest) Reset() {
	*x = PushbackLocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushbackLocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushbackLocksRequest) ProtoMessage() {}

func (x *PushbackLocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushbackLocksRequest.ProtoReflect.Descriptor instead.
func (*PushbackLocksRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{41}
}

func (x *PushbackLocksRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushbackLocksRequest) GetClickIds() []string {
	if x != nil {
		return x.ClickIds
	}
	return nil
}

func (x *PushbackLocksRequest) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

type PushbackLocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PushbackLocksResponse) Reset() {
	*x = PushbackLocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushbackLocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushbackLocksResponse) ProtoMessage() {}

func (x *PushbackLocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushbackLocksResponse.ProtoReflect.Descriptor instead.
func (*PushbackLocksResponse) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{42}
}

func (x *PushbackLocksResponse) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *PushbackLocksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MoveAdsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdsetId        uint32 `protobuf:"varint,1,opt,name=adset_id,json=adsetId,proto3" json:"adset_id,omitempty"`
	ToEnterpriseId uint32 `protobuf:"varint,2,opt,name=to_enterprise_id,json=toEnterpriseId,proto3" json:"to_enterprise_id,omitempty"`
}

func (x *MoveAdsetRequest) Reset() {
	*x = MoveAdsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adset_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveAdsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveAdsetRequest) ProtoMessage() {}

func (x *MoveAdsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adset_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveAdsetRequest.ProtoReflect.Descriptor instead.
func (*MoveAdsetRequest) Descriptor() ([]byte, []int) {
	return file_adset_proto_rawDescGZIP(), []int{43}
}

func (x *MoveAdsetRequest) GetAdsetId() uint32 {
	if x != nil {
		return x.AdsetId
	}
	return 0
}

func (x *MoveAdsetRequest) GetToEnterpriseId() uint32 {
	if x != nil {
		return x.ToEnterpriseId
	}
	return 0
}

var File_adset_proto protoreflect.FileDescriptor

var file_adset_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x64, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61,
	0x64, 0x73, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x09, 0x61, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x64,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x06,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x2e, 0x41, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x69, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f,
	0x6e, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x6f, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x65, 0x70, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x9e, 0x06, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x69, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04,
	0x67, 0x6f, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x65, 0x70, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x64, 0x65,
	0x65, 0x70, 0x47, 0x6f, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x06, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f,
	0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x48, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x41, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x67, 0x6f, 0x61, 0x6c,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x17, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x59, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x31, 0x0a, 0x0d, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x64, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x22, 0x5c, 0x0a, 0x15, 0x41, 0x64, 0x73, 0x65, 0x74, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x41, 0x64, 0x73, 0x52, 0x65, 0x71, 0x65, 0x75, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x64, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x69, 0x64,
	0x73, 0x22, 0x37, 0x0a, 0x16, 0x41, 0x64, 0x73, 0x65, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x41, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x61,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x52, 0x03, 0x61, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x13, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x22, 0x84, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x71, 0x0a, 0x15, 0x41, 0x64, 0x73, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x15, 0x41,
	0x64, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x65, 0x75, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x69, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x74, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0xdc, 0x0b,
	0x0a, 0x05, 0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12,
	0x1d, 0x0a, 0x03, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x52, 0x03, 0x61, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x41, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x65, 0x70, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x65, 0x70,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x61, 0x70, 0x70, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x41, 0x70, 0x70, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x70, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0c,
	0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xcb, 0x01, 0x0a,
	0x08, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x0a, 0x4f,
	0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x82,
	0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x5a, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xa5, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x49, 0x44, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x03, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x02, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x69, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x09, 0x50, 0x49, 0x44, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x67, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x69, 0x67,
	0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x64, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x38, 0x0a,
	0x0a, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x52, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x0b,
	0x41, 0x64, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x58, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x58, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x33, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x58, 0x31, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x58, 0x31, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x58, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x58, 0x32, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x58, 0x33, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x58, 0x33, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x58, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x72, 0x65, 0x74, 0x58, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x58, 0x32, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x65, 0x74, 0x58, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x03, 0x41, 0x63,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d,
	0x0a, 0x12, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x22, 0x8c, 0x01,
	0x0a, 0x18, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x48, 0x0a, 0x15,
	0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x8d, 0x05, 0x0a, 0x09, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x41, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f, 0x70, 0x75,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x50, 0x75, 0x73, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x70, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x76, 0x12,
	0x11, 0x0a, 0x04, 0x64, 0x5f, 0x70, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64,
	0x50, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x6f, 0x6c, 0x12, 0x11, 0x0a, 0x04, 0x64, 0x5f, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x64, 0x4f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f, 0x64,
	0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x5f, 0x61, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x41, 0x64, 0x6f, 0x6e, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x5f, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x64, 0x52, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x72, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x5f, 0x72, 0x72, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x64, 0x52, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x65, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6b, 0x66,
	0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x5f, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61,
	0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4b, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x62,
	0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4c, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68,
	0x62, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x57, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x6f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x2a,
	0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x5f, 0x50,
	0x75, 0x73, 0x68, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x41, 0x63, 0x6b, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4d, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x4d, 0x50, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4d,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x32, 0xe0, 0x23, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x3b, 0x0a, 0x0c, 0x41,
	0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x12, 0xe1,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x92, 0x41, 0x63, 0x0a, 0x1e,
	0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x20,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x20, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x7b, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x73,
	0x65, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5b, 0x92, 0x41, 0x3f, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73,
	0x65, 0x74, 0x73, 0x1a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x12, 0xcf, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x92, 0x41, 0x51, 0x0a, 0x1e, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x12, 0x98,
	0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x92, 0x41, 0x44, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x1a, 0x24, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x92, 0x41, 0x44, 0x0a,
	0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x1a, 0x24, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x7b, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x92, 0x41, 0x44, 0x0a, 0x0c, 0x41, 0x64, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x1a, 0x24, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb4, 0x01,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x64, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x92, 0x41, 0x47, 0x0a, 0x09, 0x41, 0x64, 0x73, 0x20, 0x41,
	0x64, 0x73, 0x65, 0x74, 0x12, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x61, 0x20, 0x61,
	0x64, 0x73, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x24, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92,
	0x41, 0x4f, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x17, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x61,
	0x64, 0x73, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x1a, 0x26, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x1a, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x92, 0x41, 0x3f, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x92,
	0x41, 0x4f, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x1a, 0x26, 0x73, 0x65, 0x6e, 0x64, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x73,
	0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x41, 0x64, 0x73, 0x65, 0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x65, 0x75, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7d, 0x92, 0x41, 0x58, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x6d, 0x61,
	0x6e, 0x79, 0x20, 0x61, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x1a,
	0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x20, 0x61, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64,
	0x73, 0x12, 0xc0, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x73, 0x52, 0x65, 0x71, 0x65, 0x75, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7a, 0x92, 0x41, 0x58, 0x0a, 0x0c, 0x41,
	0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x61, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x1a, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x64, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x64, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x92, 0x41, 0x30, 0x0a, 0x19, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x13, 0x67, 0x65, 0x74, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x97,
	0x01, 0x0a, 0x0d, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x19, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x92, 0x41, 0x25, 0x0a, 0x0c, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x15, 0x67, 0x65, 0x74, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x19, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x50, 0x92, 0x41, 0x25, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x15, 0x67, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x32, 0x12, 0xcd, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x17,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x80, 0x01, 0x92, 0x41, 0x40, 0x0a, 0x1e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x67, 0x65, 0x74, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68, 0x12, 0x10, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x60, 0x92, 0x41, 0x34, 0x0a, 0x0c, 0x41, 0x64,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x61, 0x64, 0x64, 0x20,
	0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x12, 0xd5, 0x01, 0x0a, 0x0b, 0x50, 0x75,
	0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x94, 0x01, 0x92, 0x41, 0x69,
	0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x73, 0x68,
	0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x1a, 0x35, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x6b, 0x20, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63,
	0x6b, 0x12, 0xea, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d,
	0x01, 0x92, 0x41, 0x6d, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x26, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x65,
	0x6e, 0x69, 0x73, 0x68, 0x20, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x1a, 0x35, 0x53, 0x65, 0x6e, 0x64,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x20, 0x50, 0x75, 0x73,
	0x68, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x64, 0x73,
	0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x1a, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x12, 0xc2,
	0x01, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x18, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x92, 0x41, 0x51, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x4c, 0x6f, 0x63, 0x6b, 0x20, 0x61, 0x20,
	0x70, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x1a, 0x27, 0x4c, 0x6f, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x70, 0x75, 0x73, 0x68, 0x62, 0x61,
	0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0xc6, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x62, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x92, 0x41,
	0x51, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x4c, 0x6f, 0x63, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x27, 0x4c, 0x6f, 0x63, 0x6b, 0x20,
	0x70, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x73,
	0x65, 0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0xca, 0x01, 0x0a,
	0x0e, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x1a, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x83, 0x01, 0x92, 0x41, 0x55, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x20,
	0x61, 0x20, 0x70, 0x75, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64,
	0x73, 0x65, 0x74, 0x1a, 0x29, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x20, 0x61, 0x20, 0x70, 0x75,
	0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x4c, 0x69,
	0x76, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x22, 0x66,
	0x92, 0x41, 0x3d, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x4c, 0x69, 0x76, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x19, 0x4c, 0x69, 0x76, 0x65, 0x20, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x30, 0x01, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x76,
	0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x41, 0x64, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x63, 0x92, 0x41, 0x37, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x20, 0x61,
	0x20, 0x61, 0x64, 0x73, 0x65, 0x74, 0x1a, 0x19, 0x4d, 0x6f, 0x76, 0x65, 0x20, 0x61, 0x64, 0x73,
	0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x77, 0x92, 0x41, 0x4b, 0x12,
	0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x72, 0x3e, 0x0a, 0x17, 0x4d, 0x58,
	0x20, 0x61, 0x64, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6e, 0x68, 0x75, 0x61, 0x78,
	0x69, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6e, 0x68, 0x75, 0x61, 0x78, 0x69, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adset_proto_rawDescOnce sync.Once
	file_adset_proto_rawDescData = file_adset_proto_rawDesc
)

func file_adset_proto_rawDescGZIP() []byte {
	file_adset_proto_rawDescOnce.Do(func() {
		file_adset_proto_rawDescData = protoimpl.X.CompressGZIP(file_adset_proto_rawDescData)
	})
	return file_adset_proto_rawDescData
}

var file_adset_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_adset_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_adset_proto_goTypes = []interface{}{
	(Status)(0),                      // 0: ads.Status
	(OperActionType)(0),              // 1: ads.OperActionType
	(PushMode)(0),                    // 2: ads.PushMode
	(*ListAdsetsRequest)(nil),        // 3: ads.ListAdsetsRequest
	(*ListAdsetsResponse)(nil),       // 4: ads.ListAdsetsResponse
	(*CreateAdsetRequest)(nil),       // 5: ads.CreateAdsetRequest
	(*GetAdsetRequest)(nil),          // 6: ads.GetAdsetRequest
	(*UpdateAdsetRequest)(nil),       // 7: ads.UpdateAdsetRequest
	(*CorrectAdsetRequest)(nil),      // 8: ads.CorrectAdsetRequest
	(*AdsetCorrectionResponse)(nil),  // 9: ads.AdsetCorrectionResponse
	(*ChangeAdsetStateRequest)(nil),  // 10: ads.ChangeAdsetStateRequest
	(*DeleteAdsetRequest)(nil),       // 11: ads.DeleteAdsetRequest
	(*SendActionRequest)(nil),        // 12: ads.SendActionRequest
	(*SendActionResponse)(nil),       // 13: ads.SendActionResponse
	(*AdsetResponse)(nil),            // 14: ads.AdsetResponse
	(*AdsetAppendAdsReqeust)(nil),    // 15: ads.AdsetAppendAdsReqeust
	(*AdsetAppendAdsResponse)(nil),   // 16: ads.AdsetAppendAdsResponse
	(*AdsetTracksRequest)(nil),       // 17: ads.AdsetTracksRequest
	(*AdsetTracksResponse)(nil),      // 18: ads.AdsetTracksResponse
	(*AdsetTimelineRequest)(nil),     // 19: ads.AdsetTimelineRequest
	(*AdsetTimelineResponse)(nil),    // 20: ads.AdsetTimelineResponse
	(*AdsetDeleteAdsReqeust)(nil),    // 21: ads.AdsetDeleteAdsReqeust
	(*Correction)(nil),               // 22: ads.Correction
	(*Adset)(nil),                    // 23: ads.Adset
	(*Timeline)(nil),                 // 24: ads.Timeline
	(*OperAction)(nil),               // 25: ads.OperAction
	(*TrackAction)(nil),              // 26: ads.TrackAction
	(*Action)(nil),                   // 27: ads.Action
	(*PushStrategy)(nil),             // 28: ads.PushStrategy
	(*PushConfig)(nil),               // 29: ads.PushConfig
	(*PIDConfig)(nil),                // 30: ads.PIDConfig
	(*AutoConfig)(nil),               // 31: ads.AutoConfig
	(*TableConfig)(nil),              // 32: ads.TableConfig
	(*AdsetParams)(nil),              // 33: ads.AdsetParams
	(*Ack)(nil),                      // 34: ads.Ack
	(*PushbackAckRequest)(nil),       // 35: ads.PushbackAckRequest
	(*PushbackReplenishRequest)(nil), // 36: ads.PushbackReplenishRequest
	(*ReplenishResponse)(nil),        // 37: ads.ReplenishResponse
	(*PushbackRecallRequest)(nil),    // 38: ads.PushbackRecallRequest
	(*LiveAdsetRequest)(nil),         // 39: ads.LiveAdsetRequest
	(*AdsetStat)(nil),                // 40: ads.AdsetStat
	(*PushRequest)(nil),              // 41: ads.PushRequest
	(*PushbackLockRequest)(nil),      // 42: ads.PushbackLockRequest
	(*PushbackLockResponse)(nil),     // 43: ads.PushbackLockResponse
	(*PushbackLocksRequest)(nil),     // 44: ads.PushbackLocksRequest
	(*PushbackLocksResponse)(nil),    // 45: ads.PushbackLocksResponse
	(*MoveAdsetRequest)(nil),         // 46: ads.MoveAdsetRequest
	nil,                              // 47: ads.OperAction.ParamsEntry
	(*common.Paginate)(nil),          // 48: common.Paginate
	(*common.PaginatedResponse)(nil), // 49: common.PaginatedResponse
	(*AdStrategy)(nil),               // 50: adstrategy.AdStrategy
	(*Ad)(nil),                       // 51: account.Ad
	(*Track)(nil),                    // 52: track.Track
	(*timestamppb.Timestamp)(nil),    // 53: google.protobuf.Timestamp
	(*common.User)(nil),              // 54: common.User
	(*Account)(nil),                  // 55: account.Account
	(*common.Enterprise)(nil),        // 56: common.Enterprise
	(*Product)(nil),                  // 57: product.Product
	(*CustomerService)(nil),          // 58: customer.CustomerService
	(*ThirdPartyApp)(nil),            // 59: thirdpartyapp.ThirdPartyApp
	(*ActionParams)(nil),             // 60: track.ActionParams
	(*durationpb.Duration)(nil),      // 61: google.protobuf.Duration
	(*emptypb.Empty)(nil),            // 62: google.protobuf.Empty
}
var file_adset_proto_depIdxs = []int32{
	48, // 0: ads.ListAdsetsRequest.page:type_name -> common.Paginate
	23, // 1: ads.ListAdsetsResponse.adsets:type_name -> ads.Adset
	49, // 2: ads.ListAdsetsResponse.page:type_name -> common.PaginatedResponse
	50, // 3: ads.CreateAdsetRequest.strategy:type_name -> adstrategy.AdStrategy
	33, // 4: ads.CreateAdsetRequest.params:type_name -> ads.AdsetParams
	33, // 5: ads.UpdateAdsetRequest.params:type_name -> ads.AdsetParams
	28, // 6: ads.UpdateAdsetRequest.push_strategy:type_name -> ads.PushStrategy
	50, // 7: ads.UpdateAdsetRequest.strategy:type_name -> adstrategy.AdStrategy
	22, // 8: ads.AdsetCorrectionResponse.correction:type_name -> ads.Correction
	23, // 9: ads.AdsetResponse.adset:type_name -> ads.Adset
	51, // 10: ads.AdsetAppendAdsResponse.ads:type_name -> account.Ad
	52, // 11: ads.AdsetTracksResponse.tracks:type_name -> track.Track
	49, // 12: ads.AdsetTracksResponse.page:type_name -> common.PaginatedResponse
	48, // 13: ads.AdsetTimelineRequest.page:type_name -> common.Paginate
	24, // 14: ads.AdsetTimelineResponse.timeline:type_name -> ads.Timeline
	49, // 15: ads.AdsetTimelineResponse.page:type_name -> common.PaginatedResponse
	53, // 16: ads.Correction.correct_time:type_name -> google.protobuf.Timestamp
	51, // 17: ads.Adset.ads:type_name -> account.Ad
	54, // 18: ads.Adset.creator:type_name -> common.User
	55, // 19: ads.Adset.account:type_name -> account.Account
	50, // 20: ads.Adset.strategy:type_name -> adstrategy.AdStrategy
	22, // 21: ads.Adset.correction:type_name -> ads.Correction
	0,  // 22: ads.Adset.status:type_name -> ads.Status
	33, // 23: ads.Adset.params:type_name -> ads.AdsetParams
	56, // 24: ads.Adset.enterprise:type_name -> common.Enterprise
	57, // 25: ads.Adset.product:type_name -> product.Product
	58, // 26: ads.Adset.customer_services:type_name -> customer.CustomerService
	59, // 27: ads.Adset.thirdparty_apps:type_name -> thirdpartyapp.ThirdPartyApp
	28, // 28: ads.Adset.push_strategy:type_name -> ads.PushStrategy
	53, // 29: ads.Adset.created_time:type_name -> google.protobuf.Timestamp
	53, // 30: ads.Adset.updated_time:type_name -> google.protobuf.Timestamp
	53, // 31: ads.Timeline.time:type_name -> google.protobuf.Timestamp
	25, // 32: ads.Timeline.oper:type_name -> ads.OperAction
	26, // 33: ads.Timeline.track:type_name -> ads.TrackAction
	1,  // 34: ads.OperAction.action_type:type_name -> ads.OperActionType
	47, // 35: ads.OperAction.params:type_name -> ads.OperAction.ParamsEntry
	27, // 36: ads.TrackAction.actions:type_name -> ads.Action
	53, // 37: ads.TrackAction.pushed_at:type_name -> google.protobuf.Timestamp
	60, // 38: ads.Action.params:type_name -> track.ActionParams
	2,  // 39: ads.PushStrategy.mode:type_name -> ads.PushMode
	29, // 40: ads.PushStrategy.config:type_name -> ads.PushConfig
	31, // 41: ads.PushConfig.auto:type_name -> ads.AutoConfig
	30, // 42: ads.PushConfig.pid:type_name -> ads.PIDConfig
	32, // 43: ads.PushConfig.table:type_name -> ads.TableConfig
	61, // 44: ads.PIDConfig.worker_internal:type_name -> google.protobuf.Duration
	53, // 45: ads.Ack.created_time:type_name -> google.protobuf.Timestamp
	53, // 46: ads.LiveAdsetRequest.start_time:type_name -> google.protobuf.Timestamp
	60, // 47: ads.PushRequest.params:type_name -> track.ActionParams
	3,  // 48: ads.AdsetService.ListAdsets:input_type -> ads.ListAdsetsRequest
	3,  // 49: ads.AdsetService.ListEnterpriseAdsets:input_type -> ads.ListAdsetsRequest
	5,  // 50: ads.AdsetService.CreateAdset:input_type -> ads.CreateAdsetRequest
	5,  // 51: ads.AdsetService.CreateEnterpriseAdset:input_type -> ads.CreateAdsetRequest
	6,  // 52: ads.AdsetService.GetAdset:input_type -> ads.GetAdsetRequest
	6,  // 53: ads.AdsetService.GetEnterpriseAdset:input_type -> ads.GetAdsetRequest
	7,  // 54: ads.AdsetService.UpdateAdset:input_type -> ads.UpdateAdsetRequest
	10, // 55: ads.AdsetService.ChangeAdsetState:input_type -> ads.ChangeAdsetStateRequest
	8,  // 56: ads.AdsetService.CorrectAdset:input_type -> ads.CorrectAdsetRequest
	11, // 57: ads.AdsetService.DeleteAdset:input_type -> ads.DeleteAdsetRequest
	12, // 58: ads.AdsetService.Send:input_type -> ads.SendActionRequest
	15, // 59: ads.AdsetService.AdsetAppendAds:input_type -> ads.AdsetAppendAdsReqeust
	21, // 60: ads.AdsetService.AdsetDeleteAds:input_type -> ads.AdsetDeleteAdsReqeust
	17, // 61: ads.AdsetService.AdsetTracks:input_type -> ads.AdsetTracksRequest
	19, // 62: ads.AdsetService.AdsetTimeline:input_type -> ads.AdsetTimelineRequest
	19, // 63: ads.AdsetService.AdsetTimeline2:input_type -> ads.AdsetTimelineRequest
	17, // 64: ads.AdsetService.EnterpriseAdsetTracks:input_type -> ads.AdsetTracksRequest
	41, // 65: ads.AdsetService.Push:input_type -> ads.PushRequest
	35, // 66: ads.AdsetService.PushbackAck:input_type -> ads.PushbackAckRequest
	36, // 67: ads.AdsetService.PushbackReplenish:input_type -> ads.PushbackReplenishRequest
	42, // 68: ads.AdsetService.PushbackLock:input_type -> ads.PushbackLockRequest
	44, // 69: ads.AdsetService.PushbackLocks:input_type -> ads.PushbackLocksRequest
	38, // 70: ads.AdsetService.PushbackRecall:input_type -> ads.PushbackRecallRequest
	39, // 71: ads.AdsetService.LiveAdset:input_type -> ads.LiveAdsetRequest
	46, // 72: ads.AdsetService.MoveAdset:input_type -> ads.MoveAdsetRequest
	4,  // 73: ads.AdsetService.ListAdsets:output_type -> ads.ListAdsetsResponse
	4,  // 74: ads.AdsetService.ListEnterpriseAdsets:output_type -> ads.ListAdsetsResponse
	14, // 75: ads.AdsetService.CreateAdset:output_type -> ads.AdsetResponse
	14, // 76: ads.AdsetService.CreateEnterpriseAdset:output_type -> ads.AdsetResponse
	14, // 77: ads.AdsetService.GetAdset:output_type -> ads.AdsetResponse
	14, // 78: ads.AdsetService.GetEnterpriseAdset:output_type -> ads.AdsetResponse
	14, // 79: ads.AdsetService.UpdateAdset:output_type -> ads.AdsetResponse
	14, // 80: ads.AdsetService.ChangeAdsetState:output_type -> ads.AdsetResponse
	9,  // 81: ads.AdsetService.CorrectAdset:output_type -> ads.AdsetCorrectionResponse
	14, // 82: ads.AdsetService.DeleteAdset:output_type -> ads.AdsetResponse
	13, // 83: ads.AdsetService.Send:output_type -> ads.SendActionResponse
	16, // 84: ads.AdsetService.AdsetAppendAds:output_type -> ads.AdsetAppendAdsResponse
	62, // 85: ads.AdsetService.AdsetDeleteAds:output_type -> google.protobuf.Empty
	18, // 86: ads.AdsetService.AdsetTracks:output_type -> ads.AdsetTracksResponse
	20, // 87: ads.AdsetService.AdsetTimeline:output_type -> ads.AdsetTimelineResponse
	20, // 88: ads.AdsetService.AdsetTimeline2:output_type -> ads.AdsetTimelineResponse
	18, // 89: ads.AdsetService.EnterpriseAdsetTracks:output_type -> ads.AdsetTracksResponse
	62, // 90: ads.AdsetService.Push:output_type -> google.protobuf.Empty
	62, // 91: ads.AdsetService.PushbackAck:output_type -> google.protobuf.Empty
	37, // 92: ads.AdsetService.PushbackReplenish:output_type -> ads.ReplenishResponse
	43, // 93: ads.AdsetService.PushbackLock:output_type -> ads.PushbackLockResponse
	45, // 94: ads.AdsetService.PushbackLocks:output_type -> ads.PushbackLocksResponse
	62, // 95: ads.AdsetService.PushbackRecall:output_type -> google.protobuf.Empty
	40, // 96: ads.AdsetService.LiveAdset:output_type -> ads.AdsetStat
	62, // 97: ads.AdsetService.MoveAdset:output_type -> google.protobuf.Empty
	73, // [73:98] is the sub-list for method output_type
	48, // [48:73] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_adset_proto_init() }
func file_adset_proto_init() {
	if File_adset_proto != nil {
		return
	}
	file_account_proto_init()
	file_ads_proto_init()
	file_adstrategy_proto_init()
	file_customer_proto_init()
	file_product_proto_init()
	file_thirdpartyapp_proto_init()
	file_track_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_adset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdsetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdsetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectAdsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetCorrectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdsetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetAppendAdsReqeust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetAppendAdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetTracksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetTracksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetTimelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetTimelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetDeleteAdsReqeust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Correction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PIDConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushbackAckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushbackReplenishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplenishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushbackRecallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveAdsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsetStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushbackLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushbackLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushbackLocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushbackLocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adset_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveAdsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_adset_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_adset_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_adset_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Timeline_Oper)(nil),
		(*Timeline_Track)(nil),
	}
	file_adset_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_adset_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_adset_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adset_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_adset_proto_goTypes,
		DependencyIndexes: file_adset_proto_depIdxs,
		EnumInfos:         file_adset_proto_enumTypes,
		MessageInfos:      file_adset_proto_msgTypes,
	}.Build()
	File_adset_proto = out.File
	file_adset_proto_rawDesc = nil
	file_adset_proto_goTypes = nil
	file_adset_proto_depIdxs = nil
}
