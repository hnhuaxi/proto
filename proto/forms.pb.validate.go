// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: forms.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFormSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFormSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFormSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFormSchemaRequestMultiError, or nil if none found.
func (m *CreateFormSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFormSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for Name

	// no validation rules for Schema

	// no validation rules for Primary

	// no validation rules for ValidateOff

	if len(errors) > 0 {
		return CreateFormSchemaRequestMultiError(errors)
	}

	return nil
}

// CreateFormSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFormSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFormSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFormSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFormSchemaRequestMultiError) AllErrors() []error { return m }

// CreateFormSchemaRequestValidationError is the validation error returned by
// CreateFormSchemaRequest.Validate if the designated constraints aren't met.
type CreateFormSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFormSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFormSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFormSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFormSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFormSchemaRequestValidationError) ErrorName() string {
	return "CreateFormSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFormSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFormSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFormSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFormSchemaRequestValidationError{}

// Validate checks the field values on ListFormRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFormRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormRequestMultiError, or nil if none found.
func (m *ListFormRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFormRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFormRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFormRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return ListFormRequestMultiError(errors)
	}

	return nil
}

// ListFormRequestMultiError is an error wrapping multiple validation errors
// returned by ListFormRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFormRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormRequestMultiError) AllErrors() []error { return m }

// ListFormRequestValidationError is the validation error returned by
// ListFormRequest.Validate if the designated constraints aren't met.
type ListFormRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormRequestValidationError) ErrorName() string { return "ListFormRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFormRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormRequestValidationError{}

// Validate checks the field values on ListFormResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFormResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormResponseMultiError, or nil if none found.
func (m *ListFormResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetForms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFormResponseValidationError{
						field:  fmt.Sprintf("Forms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFormResponseValidationError{
						field:  fmt.Sprintf("Forms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFormResponseValidationError{
					field:  fmt.Sprintf("Forms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFormResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFormResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFormResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFormResponseMultiError(errors)
	}

	return nil
}

// ListFormResponseMultiError is an error wrapping multiple validation errors
// returned by ListFormResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFormResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormResponseMultiError) AllErrors() []error { return m }

// ListFormResponseValidationError is the validation error returned by
// ListFormResponse.Validate if the designated constraints aren't met.
type ListFormResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormResponseValidationError) ErrorName() string { return "ListFormResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListFormResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormResponseValidationError{}

// Validate checks the field values on FormSchema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FormSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FormSchemaMultiError, or
// nil if none found.
func (m *FormSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *FormSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for Name

	// no validation rules for Primary

	// no validation rules for Schema

	// no validation rules for ValidateOff

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormSchemaValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormSchemaValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormSchemaValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormSchemaValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormSchemaValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormSchemaValidationError{
				field:  "UpdatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FormSchemaMultiError(errors)
	}

	return nil
}

// FormSchemaMultiError is an error wrapping multiple validation errors
// returned by FormSchema.ValidateAll() if the designated constraints aren't met.
type FormSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormSchemaMultiError) AllErrors() []error { return m }

// FormSchemaValidationError is the validation error returned by
// FormSchema.Validate if the designated constraints aren't met.
type FormSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormSchemaValidationError) ErrorName() string { return "FormSchemaValidationError" }

// Error satisfies the builtin error interface
func (e FormSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormSchemaValidationError{}

// Validate checks the field values on Form with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Form) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Form with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FormMultiError, or nil if none found.
func (m *Form) ValidateAll() error {
	return m.validate(true)
}

func (m *Form) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for SchemaId

	// no validation rules for AdsetId

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Form

	// no validation rules for FormTitle

	// no validation rules for ClickId

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormValidationError{
				field:  "UpdatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Adset != nil {

		if all {
			switch v := interface{}(m.GetAdset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FormValidationError{
						field:  "Adset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FormValidationError{
						field:  "Adset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FormValidationError{
					field:  "Adset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FormMultiError(errors)
	}

	return nil
}

// FormMultiError is an error wrapping multiple validation errors returned by
// Form.ValidateAll() if the designated constraints aren't met.
type FormMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormMultiError) AllErrors() []error { return m }

// FormValidationError is the validation error returned by Form.Validate if the
// designated constraints aren't met.
type FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormValidationError) ErrorName() string { return "FormValidationError" }

// Error satisfies the builtin error interface
func (e FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormValidationError{}

// Validate checks the field values on ListFormSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormSchemasRequestMultiError, or nil if none found.
func (m *ListFormSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFormSchemasRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFormSchemasRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFormSchemasRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return ListFormSchemasRequestMultiError(errors)
	}

	return nil
}

// ListFormSchemasRequestMultiError is an error wrapping multiple validation
// errors returned by ListFormSchemasRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFormSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormSchemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormSchemasRequestMultiError) AllErrors() []error { return m }

// ListFormSchemasRequestValidationError is the validation error returned by
// ListFormSchemasRequest.Validate if the designated constraints aren't met.
type ListFormSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormSchemasRequestValidationError) ErrorName() string {
	return "ListFormSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormSchemasRequestValidationError{}

// Validate checks the field values on ListFormSchemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormSchemasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormSchemasResponseMultiError, or nil if none found.
func (m *ListFormSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFormSchemasResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFormSchemasResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFormSchemasResponseValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFormSchemasResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFormSchemasResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFormSchemasResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFormSchemasResponseMultiError(errors)
	}

	return nil
}

// ListFormSchemasResponseMultiError is an error wrapping multiple validation
// errors returned by ListFormSchemasResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFormSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormSchemasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormSchemasResponseMultiError) AllErrors() []error { return m }

// ListFormSchemasResponseValidationError is the validation error returned by
// ListFormSchemasResponse.Validate if the designated constraints aren't met.
type ListFormSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormSchemasResponseValidationError) ErrorName() string {
	return "ListFormSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormSchemasResponseValidationError{}

// Validate checks the field values on ChangeFormSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeFormSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeFormSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeFormSchemaRequestMultiError, or nil if none found.
func (m *ChangeFormSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeFormSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Schema != nil {
		// no validation rules for Schema
	}

	if m.ValidateOff != nil {
		// no validation rules for ValidateOff
	}

	if m.Primary != nil {
		// no validation rules for Primary
	}

	if len(errors) > 0 {
		return ChangeFormSchemaRequestMultiError(errors)
	}

	return nil
}

// ChangeFormSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeFormSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeFormSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeFormSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeFormSchemaRequestMultiError) AllErrors() []error { return m }

// ChangeFormSchemaRequestValidationError is the validation error returned by
// ChangeFormSchemaRequest.Validate if the designated constraints aren't met.
type ChangeFormSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeFormSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeFormSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeFormSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeFormSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeFormSchemaRequestValidationError) ErrorName() string {
	return "ChangeFormSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeFormSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeFormSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeFormSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeFormSchemaRequestValidationError{}

// Validate checks the field values on FormSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormSchemaResponseMultiError, or nil if none found.
func (m *FormSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FormSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for Name

	// no validation rules for Schema

	// no validation rules for ValidateOff

	// no validation rules for Primary

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormSchemaResponseValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormSchemaResponseValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormSchemaResponseValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormSchemaResponseValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormSchemaResponseValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormSchemaResponseValidationError{
				field:  "UpdatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FormSchemaResponseMultiError(errors)
	}

	return nil
}

// FormSchemaResponseMultiError is an error wrapping multiple validation errors
// returned by FormSchemaResponse.ValidateAll() if the designated constraints
// aren't met.
type FormSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormSchemaResponseMultiError) AllErrors() []error { return m }

// FormSchemaResponseValidationError is the validation error returned by
// FormSchemaResponse.Validate if the designated constraints aren't met.
type FormSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormSchemaResponseValidationError) ErrorName() string {
	return "FormSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FormSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormSchemaResponseValidationError{}

// Validate checks the field values on GetFormSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFormSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFormSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFormSchemaRequestMultiError, or nil if none found.
func (m *GetFormSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFormSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return GetFormSchemaRequestMultiError(errors)
	}

	return nil
}

// GetFormSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by GetFormSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFormSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFormSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFormSchemaRequestMultiError) AllErrors() []error { return m }

// GetFormSchemaRequestValidationError is the validation error returned by
// GetFormSchemaRequest.Validate if the designated constraints aren't met.
type GetFormSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFormSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFormSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFormSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFormSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFormSchemaRequestValidationError) ErrorName() string {
	return "GetFormSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFormSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFormSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFormSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFormSchemaRequestValidationError{}

// Validate checks the field values on DeleteFormReqeust with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFormReqeust) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFormReqeust with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFormReqeustMultiError, or nil if none found.
func (m *DeleteFormReqeust) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFormReqeust) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteFormReqeustMultiError(errors)
	}

	return nil
}

// DeleteFormReqeustMultiError is an error wrapping multiple validation errors
// returned by DeleteFormReqeust.ValidateAll() if the designated constraints
// aren't met.
type DeleteFormReqeustMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFormReqeustMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFormReqeustMultiError) AllErrors() []error { return m }

// DeleteFormReqeustValidationError is the validation error returned by
// DeleteFormReqeust.Validate if the designated constraints aren't met.
type DeleteFormReqeustValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFormReqeustValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFormReqeustValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFormReqeustValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFormReqeustValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFormReqeustValidationError) ErrorName() string {
	return "DeleteFormReqeustValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFormReqeustValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFormReqeust.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFormReqeustValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFormReqeustValidationError{}

// Validate checks the field values on DeleteFormSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFormSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFormSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFormSchemaRequestMultiError, or nil if none found.
func (m *DeleteFormSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFormSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return DeleteFormSchemaRequestMultiError(errors)
	}

	return nil
}

// DeleteFormSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFormSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFormSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFormSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFormSchemaRequestMultiError) AllErrors() []error { return m }

// DeleteFormSchemaRequestValidationError is the validation error returned by
// DeleteFormSchemaRequest.Validate if the designated constraints aren't met.
type DeleteFormSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFormSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFormSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFormSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFormSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFormSchemaRequestValidationError) ErrorName() string {
	return "DeleteFormSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFormSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFormSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFormSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFormSchemaRequestValidationError{}

// Validate checks the field values on PostFormRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostFormRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostFormRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostFormRequestMultiError, or nil if none found.
func (m *PostFormRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostFormRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SchemaId

	// no validation rules for ClickId

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetActionParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostFormRequestValidationError{
					field:  "ActionParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostFormRequestValidationError{
					field:  "ActionParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostFormRequestValidationError{
				field:  "ActionParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Deep

	if m.AdsetId != nil {
		// no validation rules for AdsetId
	}

	if len(errors) > 0 {
		return PostFormRequestMultiError(errors)
	}

	return nil
}

// PostFormRequestMultiError is an error wrapping multiple validation errors
// returned by PostFormRequest.ValidateAll() if the designated constraints
// aren't met.
type PostFormRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostFormRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostFormRequestMultiError) AllErrors() []error { return m }

// PostFormRequestValidationError is the validation error returned by
// PostFormRequest.Validate if the designated constraints aren't met.
type PostFormRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostFormRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostFormRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostFormRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostFormRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostFormRequestValidationError) ErrorName() string { return "PostFormRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostFormRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostFormRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostFormRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostFormRequestValidationError{}

// Validate checks the field values on PostFormResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostFormResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostFormResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostFormResponseMultiError, or nil if none found.
func (m *PostFormResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostFormResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PostFormResponseMultiError(errors)
	}

	return nil
}

// PostFormResponseMultiError is an error wrapping multiple validation errors
// returned by PostFormResponse.ValidateAll() if the designated constraints
// aren't met.
type PostFormResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostFormResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostFormResponseMultiError) AllErrors() []error { return m }

// PostFormResponseValidationError is the validation error returned by
// PostFormResponse.Validate if the designated constraints aren't met.
type PostFormResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostFormResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostFormResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostFormResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostFormResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostFormResponseValidationError) ErrorName() string { return "PostFormResponseValidationError" }

// Error satisfies the builtin error interface
func (e PostFormResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostFormResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostFormResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostFormResponseValidationError{}

// Validate checks the field values on GetFormRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFormRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFormRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFormRequestMultiError,
// or nil if none found.
func (m *GetFormRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFormRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return GetFormRequestMultiError(errors)
	}

	return nil
}

// GetFormRequestMultiError is an error wrapping multiple validation errors
// returned by GetFormRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFormRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFormRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFormRequestMultiError) AllErrors() []error { return m }

// GetFormRequestValidationError is the validation error returned by
// GetFormRequest.Validate if the designated constraints aren't met.
type GetFormRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFormRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFormRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFormRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFormRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFormRequestValidationError) ErrorName() string { return "GetFormRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFormRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFormRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFormRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFormRequestValidationError{}

// Validate checks the field values on FormResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FormResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FormResponseMultiError, or
// nil if none found.
func (m *FormResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FormResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Body

	if len(errors) > 0 {
		return FormResponseMultiError(errors)
	}

	return nil
}

// FormResponseMultiError is an error wrapping multiple validation errors
// returned by FormResponse.ValidateAll() if the designated constraints aren't met.
type FormResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormResponseMultiError) AllErrors() []error { return m }

// FormResponseValidationError is the validation error returned by
// FormResponse.Validate if the designated constraints aren't met.
type FormResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormResponseValidationError) ErrorName() string { return "FormResponseValidationError" }

// Error satisfies the builtin error interface
func (e FormResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormResponseValidationError{}

// Validate checks the field values on UpdateFormRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFormRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFormRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFormRequestMultiError, or nil if none found.
func (m *UpdateFormRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFormRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for Body

	if len(errors) > 0 {
		return UpdateFormRequestMultiError(errors)
	}

	return nil
}

// UpdateFormRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFormRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFormRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFormRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFormRequestMultiError) AllErrors() []error { return m }

// UpdateFormRequestValidationError is the validation error returned by
// UpdateFormRequest.Validate if the designated constraints aren't met.
type UpdateFormRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFormRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFormRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFormRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFormRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFormRequestValidationError) ErrorName() string {
	return "UpdateFormRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFormRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFormRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFormRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFormRequestValidationError{}

// Validate checks the field values on DeleteFormRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFormRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFormRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFormRequestMultiError, or nil if none found.
func (m *DeleteFormRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFormRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return DeleteFormRequestMultiError(errors)
	}

	return nil
}

// DeleteFormRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFormRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFormRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFormRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFormRequestMultiError) AllErrors() []error { return m }

// DeleteFormRequestValidationError is the validation error returned by
// DeleteFormRequest.Validate if the designated constraints aren't met.
type DeleteFormRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFormRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFormRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFormRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFormRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFormRequestValidationError) ErrorName() string {
	return "DeleteFormRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFormRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFormRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFormRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFormRequestValidationError{}

// Validate checks the field values on Form_Adset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Form_Adset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Form_Adset with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Form_AdsetMultiError, or
// nil if none found.
func (m *Form_Adset) ValidateAll() error {
	return m.validate(true)
}

func (m *Form_Adset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return Form_AdsetMultiError(errors)
	}

	return nil
}

// Form_AdsetMultiError is an error wrapping multiple validation errors
// returned by Form_Adset.ValidateAll() if the designated constraints aren't met.
type Form_AdsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Form_AdsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Form_AdsetMultiError) AllErrors() []error { return m }

// Form_AdsetValidationError is the validation error returned by
// Form_Adset.Validate if the designated constraints aren't met.
type Form_AdsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Form_AdsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Form_AdsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Form_AdsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Form_AdsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Form_AdsetValidationError) ErrorName() string { return "Form_AdsetValidationError" }

// Error satisfies the builtin error interface
func (e Form_AdsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForm_Adset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Form_AdsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Form_AdsetValidationError{}
