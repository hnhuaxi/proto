// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: thirdpartyapp.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ThirdPartyApp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThirdPartyApp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThirdPartyApp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThirdPartyAppMultiError, or
// nil if none found.
func (m *ThirdPartyApp) ValidateAll() error {
	return m.validate(true)
}

func (m *ThirdPartyApp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Provider

	// no validation rules for AppType

	// no validation rules for EnterpriseId

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorId

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ManageAppId

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for Username

	// no validation rules for Token

	// no validation rules for EncodingAesKey

	// no validation rules for Name

	// no validation rules for ComponentAccessToken

	if all {
		switch v := interface{}(m.GetComponentAccessTokenExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "ComponentAccessTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "ComponentAccessTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentAccessTokenExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "ComponentAccessTokenExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AuthorizerAccessToken

	if all {
		switch v := interface{}(m.GetAuthorizerAccessTokenExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "AuthorizerAccessTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "AuthorizerAccessTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorizerAccessTokenExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "AuthorizerAccessTokenExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AuthorizerRefreshToken

	if all {
		switch v := interface{}(m.GetAuthorizerRefreshTokenExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "AuthorizerRefreshTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "AuthorizerRefreshTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorizerRefreshTokenExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "AuthorizerRefreshTokenExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBlockedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "BlockedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "BlockedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "BlockedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BlockedReason

	// no validation rules for BlockedContent

	// no validation rules for AppVersion

	// no validation rules for AuditId

	// no validation rules for AuditStatus

	// no validation rules for AuditReason

	// no validation rules for IsIndependent

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThirdPartyAppValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThirdPartyAppValidationError{
				field:  "UpdatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ThirdPartyAppMultiError(errors)
	}

	return nil
}

// ThirdPartyAppMultiError is an error wrapping multiple validation errors
// returned by ThirdPartyApp.ValidateAll() if the designated constraints
// aren't met.
type ThirdPartyAppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThirdPartyAppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThirdPartyAppMultiError) AllErrors() []error { return m }

// ThirdPartyAppValidationError is the validation error returned by
// ThirdPartyApp.Validate if the designated constraints aren't met.
type ThirdPartyAppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdPartyAppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdPartyAppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdPartyAppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdPartyAppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdPartyAppValidationError) ErrorName() string { return "ThirdPartyAppValidationError" }

// Error satisfies the builtin error interface
func (e ThirdPartyAppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdPartyApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdPartyAppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdPartyAppValidationError{}

// Validate checks the field values on CreateThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThirdPartyAppRequestMultiError, or nil if none found.
func (m *CreateThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for AppType

	// no validation rules for EnterpriseId

	// no validation rules for ManageAppId

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for Token

	// no validation rules for EncodingAesKey

	// no validation rules for Name

	// no validation rules for AccessToken

	// no validation rules for AppVersion

	// no validation rules for AuditId

	// no validation rules for AuditStatus

	// no validation rules for AuditReason

	if len(errors) > 0 {
		return CreateThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// CreateThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by CreateThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// CreateThirdPartyAppRequestValidationError is the validation error returned
// by CreateThirdPartyAppRequest.Validate if the designated constraints aren't met.
type CreateThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThirdPartyAppRequestValidationError) ErrorName() string {
	return "CreateThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThirdPartyAppRequestValidationError{}

// Validate checks the field values on CreateThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThirdPartyAppResponseMultiError, or nil if none found.
func (m *CreateThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThirdPartyAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThirdPartyAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThirdPartyAppResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// CreateThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by CreateThirdPartyAppResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// CreateThirdPartyAppResponseValidationError is the validation error returned
// by CreateThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type CreateThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThirdPartyAppResponseValidationError) ErrorName() string {
	return "CreateThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThirdPartyAppResponseValidationError{}

// Validate checks the field values on ListThirdPartyAppsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyAppsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThirdPartyAppsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThirdPartyAppsRequestMultiError, or nil if none found.
func (m *ListThirdPartyAppsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyAppsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThirdPartyAppsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThirdPartyAppsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThirdPartyAppsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters2() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThirdPartyAppsRequestValidationError{
						field:  fmt.Sprintf("Filters2[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThirdPartyAppsRequestValidationError{
						field:  fmt.Sprintf("Filters2[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThirdPartyAppsRequestValidationError{
					field:  fmt.Sprintf("Filters2[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThirdPartyAppsRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThirdPartyAppsRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThirdPartyAppsRequestValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return ListThirdPartyAppsRequestMultiError(errors)
	}

	return nil
}

// ListThirdPartyAppsRequestMultiError is an error wrapping multiple validation
// errors returned by ListThirdPartyAppsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListThirdPartyAppsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyAppsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyAppsRequestMultiError) AllErrors() []error { return m }

// ListThirdPartyAppsRequestValidationError is the validation error returned by
// ListThirdPartyAppsRequest.Validate if the designated constraints aren't met.
type ListThirdPartyAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyAppsRequestValidationError) ErrorName() string {
	return "ListThirdPartyAppsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyAppsRequestValidationError{}

// Validate checks the field values on ListThirdPartyAppsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyAppsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThirdPartyAppsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThirdPartyAppsResponseMultiError, or nil if none found.
func (m *ListThirdPartyAppsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyAppsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThirdPartyAppsResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThirdPartyAppsResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThirdPartyAppsResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThirdPartyAppsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThirdPartyAppsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThirdPartyAppsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListThirdPartyAppsResponseMultiError(errors)
	}

	return nil
}

// ListThirdPartyAppsResponseMultiError is an error wrapping multiple
// validation errors returned by ListThirdPartyAppsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListThirdPartyAppsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyAppsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyAppsResponseMultiError) AllErrors() []error { return m }

// ListThirdPartyAppsResponseValidationError is the validation error returned
// by ListThirdPartyAppsResponse.Validate if the designated constraints aren't met.
type ListThirdPartyAppsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyAppsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyAppsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyAppsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyAppsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyAppsResponseValidationError) ErrorName() string {
	return "ListThirdPartyAppsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyAppsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyAppsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyAppsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyAppsResponseValidationError{}

// Validate checks the field values on DeleteThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThirdPartyAppRequestMultiError, or nil if none found.
func (m *DeleteThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// DeleteThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// DeleteThirdPartyAppRequestValidationError is the validation error returned
// by DeleteThirdPartyAppRequest.Validate if the designated constraints aren't met.
type DeleteThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThirdPartyAppRequestValidationError) ErrorName() string {
	return "DeleteThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThirdPartyAppRequestValidationError{}

// Validate checks the field values on DeleteThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThirdPartyAppResponseMultiError, or nil if none found.
func (m *DeleteThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteThirdPartyAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteThirdPartyAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteThirdPartyAppResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// DeleteThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteThirdPartyAppResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// DeleteThirdPartyAppResponseValidationError is the validation error returned
// by DeleteThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type DeleteThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThirdPartyAppResponseValidationError) ErrorName() string {
	return "DeleteThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThirdPartyAppResponseValidationError{}

// Validate checks the field values on UploadThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadThirdPartyAppRequestMultiError, or nil if none found.
func (m *UploadThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for TemplateId

	// no validation rules for ExtJson

	// no validation rules for Version

	// no validation rules for Description

	// no validation rules for Preview

	// no validation rules for Path

	if len(errors) > 0 {
		return UploadThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// UploadThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by UploadThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type UploadThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// UploadThirdPartyAppRequestValidationError is the validation error returned
// by UploadThirdPartyAppRequest.Validate if the designated constraints aren't met.
type UploadThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadThirdPartyAppRequestValidationError) ErrorName() string {
	return "UploadThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadThirdPartyAppRequestValidationError{}

// Validate checks the field values on UploadThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadThirdPartyAppResponseMultiError, or nil if none found.
func (m *UploadThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Qrcode

	if len(errors) > 0 {
		return UploadThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// UploadThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by UploadThirdPartyAppResponse.ValidateAll() if
// the designated constraints aren't met.
type UploadThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// UploadThirdPartyAppResponseValidationError is the validation error returned
// by UploadThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type UploadThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadThirdPartyAppResponseValidationError) ErrorName() string {
	return "UploadThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadThirdPartyAppResponseValidationError{}

// Validate checks the field values on AuditItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditItemMultiError, or nil
// if none found.
func (m *AuditItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Tag

	// no validation rules for FirstClass

	// no validation rules for SecondClass

	// no validation rules for ThirdClass

	// no validation rules for Title

	// no validation rules for FirstId

	// no validation rules for SecondId

	// no validation rules for ThirdId

	if len(errors) > 0 {
		return AuditItemMultiError(errors)
	}

	return nil
}

// AuditItemMultiError is an error wrapping multiple validation errors returned
// by AuditItem.ValidateAll() if the designated constraints aren't met.
type AuditItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditItemMultiError) AllErrors() []error { return m }

// AuditItemValidationError is the validation error returned by
// AuditItem.Validate if the designated constraints aren't met.
type AuditItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditItemValidationError) ErrorName() string { return "AuditItemValidationError" }

// Error satisfies the builtin error interface
func (e AuditItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditItemValidationError{}

// Validate checks the field values on SubmitThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitThirdPartyAppRequestMultiError, or nil if none found.
func (m *SubmitThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmitThirdPartyAppRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmitThirdPartyAppRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitThirdPartyAppRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrivacyApiNotUse

	if len(errors) > 0 {
		return SubmitThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// SubmitThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by SubmitThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type SubmitThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// SubmitThirdPartyAppRequestValidationError is the validation error returned
// by SubmitThirdPartyAppRequest.Validate if the designated constraints aren't met.
type SubmitThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitThirdPartyAppRequestValidationError) ErrorName() string {
	return "SubmitThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitThirdPartyAppRequestValidationError{}

// Validate checks the field values on SubmitThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitThirdPartyAppResponseMultiError, or nil if none found.
func (m *SubmitThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AuditId

	if len(errors) > 0 {
		return SubmitThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// SubmitThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by SubmitThirdPartyAppResponse.ValidateAll() if
// the designated constraints aren't met.
type SubmitThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// SubmitThirdPartyAppResponseValidationError is the validation error returned
// by SubmitThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type SubmitThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitThirdPartyAppResponseValidationError) ErrorName() string {
	return "SubmitThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitThirdPartyAppResponseValidationError{}

// Validate checks the field values on ReleaseThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseThirdPartyAppRequestMultiError, or nil if none found.
func (m *ReleaseThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return ReleaseThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// ReleaseThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by ReleaseThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type ReleaseThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// ReleaseThirdPartyAppRequestValidationError is the validation error returned
// by ReleaseThirdPartyAppRequest.Validate if the designated constraints
// aren't met.
type ReleaseThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseThirdPartyAppRequestValidationError) ErrorName() string {
	return "ReleaseThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseThirdPartyAppRequestValidationError{}

// Validate checks the field values on ReleaseThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseThirdPartyAppResponseMultiError, or nil if none found.
func (m *ReleaseThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ReleaseThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// ReleaseThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by ReleaseThirdPartyAppResponse.ValidateAll() if
// the designated constraints aren't met.
type ReleaseThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// ReleaseThirdPartyAppResponseValidationError is the validation error returned
// by ReleaseThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type ReleaseThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseThirdPartyAppResponseValidationError) ErrorName() string {
	return "ReleaseThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseThirdPartyAppResponseValidationError{}

// Validate checks the field values on WithdrawThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawThirdPartyAppRequestMultiError, or nil if none found.
func (m *WithdrawThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return WithdrawThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// WithdrawThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by WithdrawThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type WithdrawThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// WithdrawThirdPartyAppRequestValidationError is the validation error returned
// by WithdrawThirdPartyAppRequest.Validate if the designated constraints
// aren't met.
type WithdrawThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawThirdPartyAppRequestValidationError) ErrorName() string {
	return "WithdrawThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawThirdPartyAppRequestValidationError{}

// Validate checks the field values on WithdrawThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawThirdPartyAppResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WithdrawThirdPartyAppResponseMultiError, or nil if none found.
func (m *WithdrawThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return WithdrawThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// WithdrawThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by WithdrawThirdPartyAppResponse.ValidateAll()
// if the designated constraints aren't met.
type WithdrawThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// WithdrawThirdPartyAppResponseValidationError is the validation error
// returned by WithdrawThirdPartyAppResponse.Validate if the designated
// constraints aren't met.
type WithdrawThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawThirdPartyAppResponseValidationError) ErrorName() string {
	return "WithdrawThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawThirdPartyAppResponseValidationError{}

// Validate checks the field values on PreviewThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewThirdPartyAppRequestMultiError, or nil if none found.
func (m *PreviewThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for Path

	if len(errors) > 0 {
		return PreviewThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// PreviewThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by PreviewThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type PreviewThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// PreviewThirdPartyAppRequestValidationError is the validation error returned
// by PreviewThirdPartyAppRequest.Validate if the designated constraints
// aren't met.
type PreviewThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewThirdPartyAppRequestValidationError) ErrorName() string {
	return "PreviewThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewThirdPartyAppRequestValidationError{}

// Validate checks the field values on PreviewThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewThirdPartyAppResponseMultiError, or nil if none found.
func (m *PreviewThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Qrcode

	if len(errors) > 0 {
		return PreviewThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// PreviewThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by PreviewThirdPartyAppResponse.ValidateAll() if
// the designated constraints aren't met.
type PreviewThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// PreviewThirdPartyAppResponseValidationError is the validation error returned
// by PreviewThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type PreviewThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewThirdPartyAppResponseValidationError) ErrorName() string {
	return "PreviewThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewThirdPartyAppResponseValidationError{}

// Validate checks the field values on BatchSubmitThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchSubmitThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSubmitThirdPartyAppRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchSubmitThirdPartyAppRequestMultiError, or nil if none found.
func (m *BatchSubmitThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSubmitThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for TemplateId

	// no validation rules for ExtJson

	// no validation rules for Version

	// no validation rules for Description

	// no validation rules for Upload

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchSubmitThirdPartyAppRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchSubmitThirdPartyAppRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchSubmitThirdPartyAppRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrivacyApiNotUse

	if len(errors) > 0 {
		return BatchSubmitThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// BatchSubmitThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by BatchSubmitThirdPartyAppRequest.ValidateAll()
// if the designated constraints aren't met.
type BatchSubmitThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSubmitThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSubmitThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// BatchSubmitThirdPartyAppRequestValidationError is the validation error
// returned by BatchSubmitThirdPartyAppRequest.Validate if the designated
// constraints aren't met.
type BatchSubmitThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSubmitThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSubmitThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSubmitThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSubmitThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSubmitThirdPartyAppRequestValidationError) ErrorName() string {
	return "BatchSubmitThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSubmitThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSubmitThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSubmitThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSubmitThirdPartyAppRequestValidationError{}

// Validate checks the field values on BatchSubmitThirdPartyAppResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchSubmitThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSubmitThirdPartyAppResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchSubmitThirdPartyAppResponseMultiError, or nil if none found.
func (m *BatchSubmitThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSubmitThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchSubmitThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// BatchSubmitThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchSubmitThirdPartyAppResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchSubmitThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSubmitThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSubmitThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// BatchSubmitThirdPartyAppResponseValidationError is the validation error
// returned by BatchSubmitThirdPartyAppResponse.Validate if the designated
// constraints aren't met.
type BatchSubmitThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSubmitThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSubmitThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSubmitThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSubmitThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSubmitThirdPartyAppResponseValidationError) ErrorName() string {
	return "BatchSubmitThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSubmitThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSubmitThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSubmitThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSubmitThirdPartyAppResponseValidationError{}

// Validate checks the field values on ListThirdPartyTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThirdPartyTemplatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListThirdPartyTemplatesRequestMultiError, or nil if none found.
func (m *ListThirdPartyTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if len(errors) > 0 {
		return ListThirdPartyTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListThirdPartyTemplatesRequestMultiError is an error wrapping multiple
// validation errors returned by ListThirdPartyTemplatesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListThirdPartyTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyTemplatesRequestMultiError) AllErrors() []error { return m }

// ListThirdPartyTemplatesRequestValidationError is the validation error
// returned by ListThirdPartyTemplatesRequest.Validate if the designated
// constraints aren't met.
type ListThirdPartyTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyTemplatesRequestValidationError) ErrorName() string {
	return "ListThirdPartyTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyTemplatesRequestValidationError{}

// Validate checks the field values on ListThirdPartyTemplatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThirdPartyTemplatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListThirdPartyTemplatesResponseMultiError, or nil if none found.
func (m *ListThirdPartyTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	for idx, item := range m.GetTemplateList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThirdPartyTemplatesResponseValidationError{
						field:  fmt.Sprintf("TemplateList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThirdPartyTemplatesResponseValidationError{
						field:  fmt.Sprintf("TemplateList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThirdPartyTemplatesResponseValidationError{
					field:  fmt.Sprintf("TemplateList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThirdPartyTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListThirdPartyTemplatesResponseMultiError is an error wrapping multiple
// validation errors returned by ListThirdPartyTemplatesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListThirdPartyTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyTemplatesResponseMultiError) AllErrors() []error { return m }

// ListThirdPartyTemplatesResponseValidationError is the validation error
// returned by ListThirdPartyTemplatesResponse.Validate if the designated
// constraints aren't met.
type ListThirdPartyTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyTemplatesResponseValidationError) ErrorName() string {
	return "ListThirdPartyTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyTemplatesResponseValidationError{}

// Validate checks the field values on GetThirdPartyAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThirdPartyAppRequestMultiError, or nil if none found.
func (m *GetThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for GetInfo

	// no validation rules for ViewToken

	if len(errors) > 0 {
		return GetThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// GetThirdPartyAppRequestMultiError is an error wrapping multiple validation
// errors returned by GetThirdPartyAppRequest.ValidateAll() if the designated
// constraints aren't met.
type GetThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// GetThirdPartyAppRequestValidationError is the validation error returned by
// GetThirdPartyAppRequest.Validate if the designated constraints aren't met.
type GetThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThirdPartyAppRequestValidationError) ErrorName() string {
	return "GetThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThirdPartyAppRequestValidationError{}

// Validate checks the field values on GetThirdPartyAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThirdPartyAppResponseMultiError, or nil if none found.
func (m *GetThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThirdPartyAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThirdPartyAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThirdPartyAppResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// GetThirdPartyAppResponseMultiError is an error wrapping multiple validation
// errors returned by GetThirdPartyAppResponse.ValidateAll() if the designated
// constraints aren't met.
type GetThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// GetThirdPartyAppResponseValidationError is the validation error returned by
// GetThirdPartyAppResponse.Validate if the designated constraints aren't met.
type GetThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThirdPartyAppResponseValidationError) ErrorName() string {
	return "GetThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThirdPartyAppResponseValidationError{}

// Validate checks the field values on
// ListThirdPartyTemplatesResponse_TemplateList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyTemplatesResponse_TemplateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListThirdPartyTemplatesResponse_TemplateList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListThirdPartyTemplatesResponse_TemplateListMultiError, or nil if none found.
func (m *ListThirdPartyTemplatesResponse_TemplateList) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyTemplatesResponse_TemplateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThirdPartyTemplatesResponse_TemplateListValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThirdPartyTemplatesResponse_TemplateListValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThirdPartyTemplatesResponse_TemplateListValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserVersion

	// no validation rules for UserDesc

	// no validation rules for TemplateId

	// no validation rules for DraftId

	// no validation rules for SourceMiniprogramAppid

	// no validation rules for SourceMiniprogram

	// no validation rules for Developer

	// no validation rules for TemplateType

	if len(errors) > 0 {
		return ListThirdPartyTemplatesResponse_TemplateListMultiError(errors)
	}

	return nil
}

// ListThirdPartyTemplatesResponse_TemplateListMultiError is an error wrapping
// multiple validation errors returned by
// ListThirdPartyTemplatesResponse_TemplateList.ValidateAll() if the
// designated constraints aren't met.
type ListThirdPartyTemplatesResponse_TemplateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyTemplatesResponse_TemplateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyTemplatesResponse_TemplateListMultiError) AllErrors() []error { return m }

// ListThirdPartyTemplatesResponse_TemplateListValidationError is the
// validation error returned by
// ListThirdPartyTemplatesResponse_TemplateList.Validate if the designated
// constraints aren't met.
type ListThirdPartyTemplatesResponse_TemplateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyTemplatesResponse_TemplateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyTemplatesResponse_TemplateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyTemplatesResponse_TemplateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyTemplatesResponse_TemplateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyTemplatesResponse_TemplateListValidationError) ErrorName() string {
	return "ListThirdPartyTemplatesResponse_TemplateListValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyTemplatesResponse_TemplateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyTemplatesResponse_TemplateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyTemplatesResponse_TemplateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyTemplatesResponse_TemplateListValidationError{}
