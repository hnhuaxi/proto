// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: adset.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdsetServiceClient is the client API for AdsetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdsetServiceClient interface {
	// 查询广告集
	ListAdsets(ctx context.Context, in *ListAdsetsRequest, opts ...grpc.CallOption) (*ListAdsetsResponse, error)
	ListEnterpriseAdsets(ctx context.Context, in *ListAdsetsRequest, opts ...grpc.CallOption) (*ListAdsetsResponse, error)
	CreateAdset(ctx context.Context, in *CreateAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error)
	CreateEnterpriseAdset(ctx context.Context, in *CreateAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error)
	GetAdset(ctx context.Context, in *GetAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error)
	GetEnterpriseAdset(ctx context.Context, in *GetAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error)
	UpdateAdset(ctx context.Context, in *UpdateAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error)
	ChangeAdsetState(ctx context.Context, in *ChangeAdsetStateRequest, opts ...grpc.CallOption) (*AdsetResponse, error)
	CorrectAdset(ctx context.Context, in *CorrectAdsetRequest, opts ...grpc.CallOption) (*AdsetCorrectionResponse, error)
	DeleteAdset(ctx context.Context, in *DeleteAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error)
	Send(ctx context.Context, in *SendActionRequest, opts ...grpc.CallOption) (*SendActionResponse, error)
	AdsetAppendAds(ctx context.Context, in *AdsetAppendAdsReqeust, opts ...grpc.CallOption) (*AdsetAppendAdsResponse, error)
	AdsetDeleteAds(ctx context.Context, in *AdsetDeleteAdsReqeust, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AdsetTracks(ctx context.Context, in *AdsetTracksRequest, opts ...grpc.CallOption) (*AdsetTracksResponse, error)
	AdsetTimeline(ctx context.Context, in *AdsetTimelineRequest, opts ...grpc.CallOption) (*AdsetTimelineResponse, error)
	AdsetTimeline2(ctx context.Context, in *AdsetTimelineRequest, opts ...grpc.CallOption) (*AdsetTimelineResponse, error)
	EnterpriseAdsetTracks(ctx context.Context, in *AdsetTracksRequest, opts ...grpc.CallOption) (*AdsetTracksResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PushbackAck(ctx context.Context, in *PushbackAckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PushbackReplenish(ctx context.Context, in *PushbackReplenishRequest, opts ...grpc.CallOption) (*ReplenishResponse, error)
	PushbackLock(ctx context.Context, in *PushbackLockRequest, opts ...grpc.CallOption) (*PushbackLockResponse, error)
	// PushbackLocks 一次性锁定多个adset pushback
	PushbackLocks(ctx context.Context, in *PushbackLocksRequest, opts ...grpc.CallOption) (*PushbackLocksResponse, error)
	PushbackRecall(ctx context.Context, in *PushbackRecallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LiveAdset(ctx context.Context, in *LiveAdsetRequest, opts ...grpc.CallOption) (AdsetService_LiveAdsetClient, error)
	MoveAdset(ctx context.Context, in *MoveAdsetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adsetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdsetServiceClient(cc grpc.ClientConnInterface) AdsetServiceClient {
	return &adsetServiceClient{cc}
}

func (c *adsetServiceClient) ListAdsets(ctx context.Context, in *ListAdsetsRequest, opts ...grpc.CallOption) (*ListAdsetsResponse, error) {
	out := new(ListAdsetsResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/ListAdsets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) ListEnterpriseAdsets(ctx context.Context, in *ListAdsetsRequest, opts ...grpc.CallOption) (*ListAdsetsResponse, error) {
	out := new(ListAdsetsResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/ListEnterpriseAdsets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) CreateAdset(ctx context.Context, in *CreateAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error) {
	out := new(AdsetResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/CreateAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) CreateEnterpriseAdset(ctx context.Context, in *CreateAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error) {
	out := new(AdsetResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/CreateEnterpriseAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) GetAdset(ctx context.Context, in *GetAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error) {
	out := new(AdsetResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/GetAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) GetEnterpriseAdset(ctx context.Context, in *GetAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error) {
	out := new(AdsetResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/GetEnterpriseAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) UpdateAdset(ctx context.Context, in *UpdateAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error) {
	out := new(AdsetResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/UpdateAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) ChangeAdsetState(ctx context.Context, in *ChangeAdsetStateRequest, opts ...grpc.CallOption) (*AdsetResponse, error) {
	out := new(AdsetResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/ChangeAdsetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) CorrectAdset(ctx context.Context, in *CorrectAdsetRequest, opts ...grpc.CallOption) (*AdsetCorrectionResponse, error) {
	out := new(AdsetCorrectionResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/CorrectAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) DeleteAdset(ctx context.Context, in *DeleteAdsetRequest, opts ...grpc.CallOption) (*AdsetResponse, error) {
	out := new(AdsetResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/DeleteAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) Send(ctx context.Context, in *SendActionRequest, opts ...grpc.CallOption) (*SendActionResponse, error) {
	out := new(SendActionResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) AdsetAppendAds(ctx context.Context, in *AdsetAppendAdsReqeust, opts ...grpc.CallOption) (*AdsetAppendAdsResponse, error) {
	out := new(AdsetAppendAdsResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/AdsetAppendAds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) AdsetDeleteAds(ctx context.Context, in *AdsetDeleteAdsReqeust, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/AdsetDeleteAds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) AdsetTracks(ctx context.Context, in *AdsetTracksRequest, opts ...grpc.CallOption) (*AdsetTracksResponse, error) {
	out := new(AdsetTracksResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/AdsetTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) AdsetTimeline(ctx context.Context, in *AdsetTimelineRequest, opts ...grpc.CallOption) (*AdsetTimelineResponse, error) {
	out := new(AdsetTimelineResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/AdsetTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) AdsetTimeline2(ctx context.Context, in *AdsetTimelineRequest, opts ...grpc.CallOption) (*AdsetTimelineResponse, error) {
	out := new(AdsetTimelineResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/AdsetTimeline2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) EnterpriseAdsetTracks(ctx context.Context, in *AdsetTracksRequest, opts ...grpc.CallOption) (*AdsetTracksResponse, error) {
	out := new(AdsetTracksResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/EnterpriseAdsetTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) PushbackAck(ctx context.Context, in *PushbackAckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/PushbackAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) PushbackReplenish(ctx context.Context, in *PushbackReplenishRequest, opts ...grpc.CallOption) (*ReplenishResponse, error) {
	out := new(ReplenishResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/PushbackReplenish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) PushbackLock(ctx context.Context, in *PushbackLockRequest, opts ...grpc.CallOption) (*PushbackLockResponse, error) {
	out := new(PushbackLockResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/PushbackLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) PushbackLocks(ctx context.Context, in *PushbackLocksRequest, opts ...grpc.CallOption) (*PushbackLocksResponse, error) {
	out := new(PushbackLocksResponse)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/PushbackLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) PushbackRecall(ctx context.Context, in *PushbackRecallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/PushbackRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adsetServiceClient) LiveAdset(ctx context.Context, in *LiveAdsetRequest, opts ...grpc.CallOption) (AdsetService_LiveAdsetClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdsetService_ServiceDesc.Streams[0], "/ads.AdsetService/LiveAdset", opts...)
	if err != nil {
		return nil, err
	}
	x := &adsetServiceLiveAdsetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdsetService_LiveAdsetClient interface {
	Recv() (*AdsetStat, error)
	grpc.ClientStream
}

type adsetServiceLiveAdsetClient struct {
	grpc.ClientStream
}

func (x *adsetServiceLiveAdsetClient) Recv() (*AdsetStat, error) {
	m := new(AdsetStat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adsetServiceClient) MoveAdset(ctx context.Context, in *MoveAdsetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ads.AdsetService/MoveAdset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdsetServiceServer is the server API for AdsetService service.
// All implementations must embed UnimplementedAdsetServiceServer
// for forward compatibility
type AdsetServiceServer interface {
	// 查询广告集
	ListAdsets(context.Context, *ListAdsetsRequest) (*ListAdsetsResponse, error)
	ListEnterpriseAdsets(context.Context, *ListAdsetsRequest) (*ListAdsetsResponse, error)
	CreateAdset(context.Context, *CreateAdsetRequest) (*AdsetResponse, error)
	CreateEnterpriseAdset(context.Context, *CreateAdsetRequest) (*AdsetResponse, error)
	GetAdset(context.Context, *GetAdsetRequest) (*AdsetResponse, error)
	GetEnterpriseAdset(context.Context, *GetAdsetRequest) (*AdsetResponse, error)
	UpdateAdset(context.Context, *UpdateAdsetRequest) (*AdsetResponse, error)
	ChangeAdsetState(context.Context, *ChangeAdsetStateRequest) (*AdsetResponse, error)
	CorrectAdset(context.Context, *CorrectAdsetRequest) (*AdsetCorrectionResponse, error)
	DeleteAdset(context.Context, *DeleteAdsetRequest) (*AdsetResponse, error)
	Send(context.Context, *SendActionRequest) (*SendActionResponse, error)
	AdsetAppendAds(context.Context, *AdsetAppendAdsReqeust) (*AdsetAppendAdsResponse, error)
	AdsetDeleteAds(context.Context, *AdsetDeleteAdsReqeust) (*emptypb.Empty, error)
	AdsetTracks(context.Context, *AdsetTracksRequest) (*AdsetTracksResponse, error)
	AdsetTimeline(context.Context, *AdsetTimelineRequest) (*AdsetTimelineResponse, error)
	AdsetTimeline2(context.Context, *AdsetTimelineRequest) (*AdsetTimelineResponse, error)
	EnterpriseAdsetTracks(context.Context, *AdsetTracksRequest) (*AdsetTracksResponse, error)
	Push(context.Context, *PushRequest) (*emptypb.Empty, error)
	PushbackAck(context.Context, *PushbackAckRequest) (*emptypb.Empty, error)
	PushbackReplenish(context.Context, *PushbackReplenishRequest) (*ReplenishResponse, error)
	PushbackLock(context.Context, *PushbackLockRequest) (*PushbackLockResponse, error)
	// PushbackLocks 一次性锁定多个adset pushback
	PushbackLocks(context.Context, *PushbackLocksRequest) (*PushbackLocksResponse, error)
	PushbackRecall(context.Context, *PushbackRecallRequest) (*emptypb.Empty, error)
	LiveAdset(*LiveAdsetRequest, AdsetService_LiveAdsetServer) error
	MoveAdset(context.Context, *MoveAdsetRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdsetServiceServer()
}

// UnimplementedAdsetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdsetServiceServer struct {
}

func (UnimplementedAdsetServiceServer) ListAdsets(context.Context, *ListAdsetsRequest) (*ListAdsetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdsets not implemented")
}
func (UnimplementedAdsetServiceServer) ListEnterpriseAdsets(context.Context, *ListAdsetsRequest) (*ListAdsetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnterpriseAdsets not implemented")
}
func (UnimplementedAdsetServiceServer) CreateAdset(context.Context, *CreateAdsetRequest) (*AdsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdset not implemented")
}
func (UnimplementedAdsetServiceServer) CreateEnterpriseAdset(context.Context, *CreateAdsetRequest) (*AdsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnterpriseAdset not implemented")
}
func (UnimplementedAdsetServiceServer) GetAdset(context.Context, *GetAdsetRequest) (*AdsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdset not implemented")
}
func (UnimplementedAdsetServiceServer) GetEnterpriseAdset(context.Context, *GetAdsetRequest) (*AdsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseAdset not implemented")
}
func (UnimplementedAdsetServiceServer) UpdateAdset(context.Context, *UpdateAdsetRequest) (*AdsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdset not implemented")
}
func (UnimplementedAdsetServiceServer) ChangeAdsetState(context.Context, *ChangeAdsetStateRequest) (*AdsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdsetState not implemented")
}
func (UnimplementedAdsetServiceServer) CorrectAdset(context.Context, *CorrectAdsetRequest) (*AdsetCorrectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrectAdset not implemented")
}
func (UnimplementedAdsetServiceServer) DeleteAdset(context.Context, *DeleteAdsetRequest) (*AdsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdset not implemented")
}
func (UnimplementedAdsetServiceServer) Send(context.Context, *SendActionRequest) (*SendActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedAdsetServiceServer) AdsetAppendAds(context.Context, *AdsetAppendAdsReqeust) (*AdsetAppendAdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdsetAppendAds not implemented")
}
func (UnimplementedAdsetServiceServer) AdsetDeleteAds(context.Context, *AdsetDeleteAdsReqeust) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdsetDeleteAds not implemented")
}
func (UnimplementedAdsetServiceServer) AdsetTracks(context.Context, *AdsetTracksRequest) (*AdsetTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdsetTracks not implemented")
}
func (UnimplementedAdsetServiceServer) AdsetTimeline(context.Context, *AdsetTimelineRequest) (*AdsetTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdsetTimeline not implemented")
}
func (UnimplementedAdsetServiceServer) AdsetTimeline2(context.Context, *AdsetTimelineRequest) (*AdsetTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdsetTimeline2 not implemented")
}
func (UnimplementedAdsetServiceServer) EnterpriseAdsetTracks(context.Context, *AdsetTracksRequest) (*AdsetTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseAdsetTracks not implemented")
}
func (UnimplementedAdsetServiceServer) Push(context.Context, *PushRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedAdsetServiceServer) PushbackAck(context.Context, *PushbackAckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushbackAck not implemented")
}
func (UnimplementedAdsetServiceServer) PushbackReplenish(context.Context, *PushbackReplenishRequest) (*ReplenishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushbackReplenish not implemented")
}
func (UnimplementedAdsetServiceServer) PushbackLock(context.Context, *PushbackLockRequest) (*PushbackLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushbackLock not implemented")
}
func (UnimplementedAdsetServiceServer) PushbackLocks(context.Context, *PushbackLocksRequest) (*PushbackLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushbackLocks not implemented")
}
func (UnimplementedAdsetServiceServer) PushbackRecall(context.Context, *PushbackRecallRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushbackRecall not implemented")
}
func (UnimplementedAdsetServiceServer) LiveAdset(*LiveAdsetRequest, AdsetService_LiveAdsetServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveAdset not implemented")
}
func (UnimplementedAdsetServiceServer) MoveAdset(context.Context, *MoveAdsetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveAdset not implemented")
}
func (UnimplementedAdsetServiceServer) mustEmbedUnimplementedAdsetServiceServer() {}

// UnsafeAdsetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdsetServiceServer will
// result in compilation errors.
type UnsafeAdsetServiceServer interface {
	mustEmbedUnimplementedAdsetServiceServer()
}

func RegisterAdsetServiceServer(s grpc.ServiceRegistrar, srv AdsetServiceServer) {
	s.RegisterService(&AdsetService_ServiceDesc, srv)
}

func _AdsetService_ListAdsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdsetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).ListAdsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/ListAdsets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).ListAdsets(ctx, req.(*ListAdsetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_ListEnterpriseAdsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdsetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).ListEnterpriseAdsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/ListEnterpriseAdsets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).ListEnterpriseAdsets(ctx, req.(*ListAdsetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_CreateAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).CreateAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/CreateAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).CreateAdset(ctx, req.(*CreateAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_CreateEnterpriseAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).CreateEnterpriseAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/CreateEnterpriseAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).CreateEnterpriseAdset(ctx, req.(*CreateAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_GetAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).GetAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/GetAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).GetAdset(ctx, req.(*GetAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_GetEnterpriseAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).GetEnterpriseAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/GetEnterpriseAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).GetEnterpriseAdset(ctx, req.(*GetAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_UpdateAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).UpdateAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/UpdateAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).UpdateAdset(ctx, req.(*UpdateAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_ChangeAdsetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAdsetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).ChangeAdsetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/ChangeAdsetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).ChangeAdsetState(ctx, req.(*ChangeAdsetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_CorrectAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrectAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).CorrectAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/CorrectAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).CorrectAdset(ctx, req.(*CorrectAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_DeleteAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).DeleteAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/DeleteAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).DeleteAdset(ctx, req.(*DeleteAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).Send(ctx, req.(*SendActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_AdsetAppendAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsetAppendAdsReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).AdsetAppendAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/AdsetAppendAds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).AdsetAppendAds(ctx, req.(*AdsetAppendAdsReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_AdsetDeleteAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsetDeleteAdsReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).AdsetDeleteAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/AdsetDeleteAds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).AdsetDeleteAds(ctx, req.(*AdsetDeleteAdsReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_AdsetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).AdsetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/AdsetTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).AdsetTracks(ctx, req.(*AdsetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_AdsetTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsetTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).AdsetTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/AdsetTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).AdsetTimeline(ctx, req.(*AdsetTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_AdsetTimeline2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsetTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).AdsetTimeline2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/AdsetTimeline2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).AdsetTimeline2(ctx, req.(*AdsetTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_EnterpriseAdsetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).EnterpriseAdsetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/EnterpriseAdsetTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).EnterpriseAdsetTracks(ctx, req.(*AdsetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_PushbackAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushbackAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).PushbackAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/PushbackAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).PushbackAck(ctx, req.(*PushbackAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_PushbackReplenish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushbackReplenishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).PushbackReplenish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/PushbackReplenish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).PushbackReplenish(ctx, req.(*PushbackReplenishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_PushbackLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushbackLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).PushbackLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/PushbackLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).PushbackLock(ctx, req.(*PushbackLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_PushbackLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushbackLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).PushbackLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/PushbackLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).PushbackLocks(ctx, req.(*PushbackLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_PushbackRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushbackRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).PushbackRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/PushbackRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).PushbackRecall(ctx, req.(*PushbackRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdsetService_LiveAdset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveAdsetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdsetServiceServer).LiveAdset(m, &adsetServiceLiveAdsetServer{stream})
}

type AdsetService_LiveAdsetServer interface {
	Send(*AdsetStat) error
	grpc.ServerStream
}

type adsetServiceLiveAdsetServer struct {
	grpc.ServerStream
}

func (x *adsetServiceLiveAdsetServer) Send(m *AdsetStat) error {
	return x.ServerStream.SendMsg(m)
}

func _AdsetService_MoveAdset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveAdsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdsetServiceServer).MoveAdset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ads.AdsetService/MoveAdset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdsetServiceServer).MoveAdset(ctx, req.(*MoveAdsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdsetService_ServiceDesc is the grpc.ServiceDesc for AdsetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdsetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ads.AdsetService",
	HandlerType: (*AdsetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAdsets",
			Handler:    _AdsetService_ListAdsets_Handler,
		},
		{
			MethodName: "ListEnterpriseAdsets",
			Handler:    _AdsetService_ListEnterpriseAdsets_Handler,
		},
		{
			MethodName: "CreateAdset",
			Handler:    _AdsetService_CreateAdset_Handler,
		},
		{
			MethodName: "CreateEnterpriseAdset",
			Handler:    _AdsetService_CreateEnterpriseAdset_Handler,
		},
		{
			MethodName: "GetAdset",
			Handler:    _AdsetService_GetAdset_Handler,
		},
		{
			MethodName: "GetEnterpriseAdset",
			Handler:    _AdsetService_GetEnterpriseAdset_Handler,
		},
		{
			MethodName: "UpdateAdset",
			Handler:    _AdsetService_UpdateAdset_Handler,
		},
		{
			MethodName: "ChangeAdsetState",
			Handler:    _AdsetService_ChangeAdsetState_Handler,
		},
		{
			MethodName: "CorrectAdset",
			Handler:    _AdsetService_CorrectAdset_Handler,
		},
		{
			MethodName: "DeleteAdset",
			Handler:    _AdsetService_DeleteAdset_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _AdsetService_Send_Handler,
		},
		{
			MethodName: "AdsetAppendAds",
			Handler:    _AdsetService_AdsetAppendAds_Handler,
		},
		{
			MethodName: "AdsetDeleteAds",
			Handler:    _AdsetService_AdsetDeleteAds_Handler,
		},
		{
			MethodName: "AdsetTracks",
			Handler:    _AdsetService_AdsetTracks_Handler,
		},
		{
			MethodName: "AdsetTimeline",
			Handler:    _AdsetService_AdsetTimeline_Handler,
		},
		{
			MethodName: "AdsetTimeline2",
			Handler:    _AdsetService_AdsetTimeline2_Handler,
		},
		{
			MethodName: "EnterpriseAdsetTracks",
			Handler:    _AdsetService_EnterpriseAdsetTracks_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _AdsetService_Push_Handler,
		},
		{
			MethodName: "PushbackAck",
			Handler:    _AdsetService_PushbackAck_Handler,
		},
		{
			MethodName: "PushbackReplenish",
			Handler:    _AdsetService_PushbackReplenish_Handler,
		},
		{
			MethodName: "PushbackLock",
			Handler:    _AdsetService_PushbackLock_Handler,
		},
		{
			MethodName: "PushbackLocks",
			Handler:    _AdsetService_PushbackLocks_Handler,
		},
		{
			MethodName: "PushbackRecall",
			Handler:    _AdsetService_PushbackRecall_Handler,
		},
		{
			MethodName: "MoveAdset",
			Handler:    _AdsetService_MoveAdset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LiveAdset",
			Handler:       _AdsetService_LiveAdset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "adset.proto",
}
