// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: customer.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomerServiceRequestMultiError, or nil if none found.
func (m *ListCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCustomerServiceRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCustomerServiceRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCustomerServiceRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// ListCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by ListCustomerServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomerServiceRequestMultiError) AllErrors() []error { return m }

// ListCustomerServiceRequestValidationError is the validation error returned
// by ListCustomerServiceRequest.Validate if the designated constraints aren't met.
type ListCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerServiceRequestValidationError) ErrorName() string {
	return "ListCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerServiceRequestValidationError{}

// Validate checks the field values on ListCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomerServiceResponseMultiError, or nil if none found.
func (m *ListCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCustomerServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCustomerServiceResponseValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCustomerServiceResponseValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCustomerServiceResponseValidationError{
					field:  fmt.Sprintf("CustomerServices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCustomerServiceResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCustomerServiceResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCustomerServiceResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// ListCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by ListCustomerServiceResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomerServiceResponseMultiError) AllErrors() []error { return m }

// ListCustomerServiceResponseValidationError is the validation error returned
// by ListCustomerServiceResponse.Validate if the designated constraints
// aren't met.
type ListCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerServiceResponseValidationError) ErrorName() string {
	return "ListCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerServiceResponseValidationError{}

// Validate checks the field values on CreateCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomerServiceRequestMultiError, or nil if none found.
func (m *CreateCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for AdsetId

	// no validation rules for Weixin

	// no validation rules for QrcodeUrl

	// no validation rules for Phonenumber

	if len(errors) > 0 {
		return CreateCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// CreateCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCustomerServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerServiceRequestMultiError) AllErrors() []error { return m }

// CreateCustomerServiceRequestValidationError is the validation error returned
// by CreateCustomerServiceRequest.Validate if the designated constraints
// aren't met.
type CreateCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerServiceRequestValidationError) ErrorName() string {
	return "CreateCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerServiceRequestValidationError{}

// Validate checks the field values on CreateCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCustomerServiceResponseMultiError, or nil if none found.
func (m *CreateCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	if all {
		switch v := interface{}(m.GetCustomerService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomerService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCustomerServiceResponseValidationError{
				field:  "CustomerService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// CreateCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCustomerServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerServiceResponseMultiError) AllErrors() []error { return m }

// CreateCustomerServiceResponseValidationError is the validation error
// returned by CreateCustomerServiceResponse.Validate if the designated
// constraints aren't met.
type CreateCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerServiceResponseValidationError) ErrorName() string {
	return "CreateCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerServiceResponseValidationError{}

// Validate checks the field values on BatchCreateCustomerServiceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchCreateCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateCustomerServiceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchCreateCustomerServiceRequestMultiError, or nil if none found.
func (m *BatchCreateCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for AdsetId

	for idx, item := range m.GetCustomerServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateCustomerServiceRequestValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateCustomerServiceRequestValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateCustomerServiceRequestValidationError{
					field:  fmt.Sprintf("CustomerServices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// BatchCreateCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by
// BatchCreateCustomerServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateCustomerServiceRequestMultiError) AllErrors() []error { return m }

// BatchCreateCustomerServiceRequestValidationError is the validation error
// returned by BatchCreateCustomerServiceRequest.Validate if the designated
// constraints aren't met.
type BatchCreateCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateCustomerServiceRequestValidationError) ErrorName() string {
	return "BatchCreateCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateCustomerServiceRequestValidationError{}

// Validate checks the field values on BatchCreateCustomerServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchCreateCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateCustomerServiceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchCreateCustomerServiceResponseMultiError, or nil if none found.
func (m *BatchCreateCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCustomerServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateCustomerServiceResponseValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateCustomerServiceResponseValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateCustomerServiceResponseValidationError{
					field:  fmt.Sprintf("CustomerServices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// BatchCreateCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchCreateCustomerServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateCustomerServiceResponseMultiError) AllErrors() []error { return m }

// BatchCreateCustomerServiceResponseValidationError is the validation error
// returned by BatchCreateCustomerServiceResponse.Validate if the designated
// constraints aren't met.
type BatchCreateCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateCustomerServiceResponseValidationError) ErrorName() string {
	return "BatchCreateCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateCustomerServiceResponseValidationError{}

// Validate checks the field values on UpdateCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomerServiceRequestMultiError, or nil if none found.
func (m *UpdateCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if m.Weixin != nil {
		// no validation rules for Weixin
	}

	if m.QrcodeUrl != nil {
		// no validation rules for QrcodeUrl
	}

	if m.Phonenumber != nil {
		// no validation rules for Phonenumber
	}

	if m.Disable != nil {
		// no validation rules for Disable
	}

	if len(errors) > 0 {
		return UpdateCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCustomerServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomerServiceRequestMultiError) AllErrors() []error { return m }

// UpdateCustomerServiceRequestValidationError is the validation error returned
// by UpdateCustomerServiceRequest.Validate if the designated constraints
// aren't met.
type UpdateCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerServiceRequestValidationError) ErrorName() string {
	return "UpdateCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerServiceRequestValidationError{}

// Validate checks the field values on UpdateCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomerServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCustomerServiceResponseMultiError, or nil if none found.
func (m *UpdateCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	if all {
		switch v := interface{}(m.GetCustomerService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomerService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomerServiceResponseValidationError{
				field:  "CustomerService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// UpdateCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCustomerServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomerServiceResponseMultiError) AllErrors() []error { return m }

// UpdateCustomerServiceResponseValidationError is the validation error
// returned by UpdateCustomerServiceResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerServiceResponseValidationError) ErrorName() string {
	return "UpdateCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerServiceResponseValidationError{}

// Validate checks the field values on DeleteCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomerServiceRequestMultiError, or nil if none found.
func (m *DeleteCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return DeleteCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// DeleteCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCustomerServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomerServiceRequestMultiError) AllErrors() []error { return m }

// DeleteCustomerServiceRequestValidationError is the validation error returned
// by DeleteCustomerServiceRequest.Validate if the designated constraints
// aren't met.
type DeleteCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerServiceRequestValidationError) ErrorName() string {
	return "DeleteCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerServiceRequestValidationError{}

// Validate checks the field values on DeleteCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomerServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCustomerServiceResponseMultiError, or nil if none found.
func (m *DeleteCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	if all {
		switch v := interface{}(m.GetCustomerService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomerService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCustomerServiceResponseValidationError{
				field:  "CustomerService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// DeleteCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCustomerServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomerServiceResponseMultiError) AllErrors() []error { return m }

// DeleteCustomerServiceResponseValidationError is the validation error
// returned by DeleteCustomerServiceResponse.Validate if the designated
// constraints aren't met.
type DeleteCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerServiceResponseValidationError) ErrorName() string {
	return "DeleteCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerServiceResponseValidationError{}

// Validate checks the field values on CustomerService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CustomerService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerServiceMultiError, or nil if none found.
func (m *CustomerService) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Weixin

	// no validation rules for Phonenumber

	// no validation rules for QrcodeUrl

	// no validation rules for EnterpriseId

	// no validation rules for AdsetId

	// no validation rules for DailyAddCustomers

	// no validation rules for AddCustomers

	// no validation rules for Disable

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomerServiceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomerServiceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerServiceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomerServiceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomerServiceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerServiceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CustomerServiceMultiError(errors)
	}

	return nil
}

// CustomerServiceMultiError is an error wrapping multiple validation errors
// returned by CustomerService.ValidateAll() if the designated constraints
// aren't met.
type CustomerServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerServiceMultiError) AllErrors() []error { return m }

// CustomerServiceValidationError is the validation error returned by
// CustomerService.Validate if the designated constraints aren't met.
type CustomerServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerServiceValidationError) ErrorName() string { return "CustomerServiceValidationError" }

// Error satisfies the builtin error interface
func (e CustomerServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerServiceValidationError{}

// Validate checks the field values on AppendCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppendCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppendCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppendCustomerServiceRequestMultiError, or nil if none found.
func (m *AppendCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppendCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for AdsetId

	if len(errors) > 0 {
		return AppendCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// AppendCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by AppendCustomerServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type AppendCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppendCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppendCustomerServiceRequestMultiError) AllErrors() []error { return m }

// AppendCustomerServiceRequestValidationError is the validation error returned
// by AppendCustomerServiceRequest.Validate if the designated constraints
// aren't met.
type AppendCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppendCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppendCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppendCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppendCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppendCustomerServiceRequestValidationError) ErrorName() string {
	return "AppendCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppendCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppendCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppendCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppendCustomerServiceRequestValidationError{}

// Validate checks the field values on AppendCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppendCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppendCustomerServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AppendCustomerServiceResponseMultiError, or nil if none found.
func (m *AppendCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppendCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Appends

	if len(errors) > 0 {
		return AppendCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// AppendCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by AppendCustomerServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type AppendCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppendCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppendCustomerServiceResponseMultiError) AllErrors() []error { return m }

// AppendCustomerServiceResponseValidationError is the validation error
// returned by AppendCustomerServiceResponse.Validate if the designated
// constraints aren't met.
type AppendCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppendCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppendCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppendCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppendCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppendCustomerServiceResponseValidationError) ErrorName() string {
	return "AppendCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppendCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppendCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppendCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppendCustomerServiceResponseValidationError{}

// Validate checks the field values on RemoveCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCustomerServiceRequestMultiError, or nil if none found.
func (m *RemoveCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for AdsetId

	if len(errors) > 0 {
		return RemoveCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// RemoveCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveCustomerServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCustomerServiceRequestMultiError) AllErrors() []error { return m }

// RemoveCustomerServiceRequestValidationError is the validation error returned
// by RemoveCustomerServiceRequest.Validate if the designated constraints
// aren't met.
type RemoveCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomerServiceRequestValidationError) ErrorName() string {
	return "RemoveCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomerServiceRequestValidationError{}

// Validate checks the field values on RemoveCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCustomerServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveCustomerServiceResponseMultiError, or nil if none found.
func (m *RemoveCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Deleteds

	if len(errors) > 0 {
		return RemoveCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// RemoveCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveCustomerServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCustomerServiceResponseMultiError) AllErrors() []error { return m }

// RemoveCustomerServiceResponseValidationError is the validation error
// returned by RemoveCustomerServiceResponse.Validate if the designated
// constraints aren't met.
type RemoveCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomerServiceResponseValidationError) ErrorName() string {
	return "RemoveCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomerServiceResponseValidationError{}

// Validate checks the field values on ReplaceCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplaceCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplaceCustomerServiceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReplaceCustomerServiceRequestMultiError, or nil if none found.
func (m *ReplaceCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplaceCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for AdsetId

	if len(errors) > 0 {
		return ReplaceCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// ReplaceCustomerServiceRequestMultiError is an error wrapping multiple
// validation errors returned by ReplaceCustomerServiceRequest.ValidateAll()
// if the designated constraints aren't met.
type ReplaceCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplaceCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplaceCustomerServiceRequestMultiError) AllErrors() []error { return m }

// ReplaceCustomerServiceRequestValidationError is the validation error
// returned by ReplaceCustomerServiceRequest.Validate if the designated
// constraints aren't met.
type ReplaceCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplaceCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplaceCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplaceCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplaceCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplaceCustomerServiceRequestValidationError) ErrorName() string {
	return "ReplaceCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReplaceCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplaceCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplaceCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplaceCustomerServiceRequestValidationError{}

// Validate checks the field values on ReplaceCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplaceCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplaceCustomerServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReplaceCustomerServiceResponseMultiError, or nil if none found.
func (m *ReplaceCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplaceCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Adds

	// no validation rules for Changes

	// no validation rules for Deleteds

	if len(errors) > 0 {
		return ReplaceCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// ReplaceCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by ReplaceCustomerServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type ReplaceCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplaceCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplaceCustomerServiceResponseMultiError) AllErrors() []error { return m }

// ReplaceCustomerServiceResponseValidationError is the validation error
// returned by ReplaceCustomerServiceResponse.Validate if the designated
// constraints aren't met.
type ReplaceCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplaceCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplaceCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplaceCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplaceCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplaceCustomerServiceResponseValidationError) ErrorName() string {
	return "ReplaceCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReplaceCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplaceCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplaceCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplaceCustomerServiceResponseValidationError{}

// Validate checks the field values on GetCustomerServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerServiceRequestMultiError, or nil if none found.
func (m *GetCustomerServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return GetCustomerServiceRequestMultiError(errors)
	}

	return nil
}

// GetCustomerServiceRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomerServiceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetCustomerServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerServiceRequestMultiError) AllErrors() []error { return m }

// GetCustomerServiceRequestValidationError is the validation error returned by
// GetCustomerServiceRequest.Validate if the designated constraints aren't met.
type GetCustomerServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerServiceRequestValidationError) ErrorName() string {
	return "GetCustomerServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerServiceRequestValidationError{}

// Validate checks the field values on GetCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerServiceResponseMultiError, or nil if none found.
func (m *GetCustomerServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	if all {
		switch v := interface{}(m.GetCustomerService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomerServiceResponseValidationError{
					field:  "CustomerService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomerService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerServiceResponseValidationError{
				field:  "CustomerService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomerServiceResponseMultiError(errors)
	}

	return nil
}

// GetCustomerServiceResponseMultiError is an error wrapping multiple
// validation errors returned by GetCustomerServiceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCustomerServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerServiceResponseMultiError) AllErrors() []error { return m }

// GetCustomerServiceResponseValidationError is the validation error returned
// by GetCustomerServiceResponse.Validate if the designated constraints aren't met.
type GetCustomerServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerServiceResponseValidationError) ErrorName() string {
	return "GetCustomerServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerServiceResponseValidationError{}

// Validate checks the field values on
// BatchCreateCustomerServiceRequest_CreateCustomerService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateCustomerServiceRequest_CreateCustomerService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BatchCreateCustomerServiceRequest_CreateCustomerService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateCustomerServiceRequest_CreateCustomerServiceMultiError, or nil
// if none found.
func (m *BatchCreateCustomerServiceRequest_CreateCustomerService) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateCustomerServiceRequest_CreateCustomerService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Weixin

	// no validation rules for QrcodeUrl

	// no validation rules for Phonenumber

	if len(errors) > 0 {
		return BatchCreateCustomerServiceRequest_CreateCustomerServiceMultiError(errors)
	}

	return nil
}

// BatchCreateCustomerServiceRequest_CreateCustomerServiceMultiError is an
// error wrapping multiple validation errors returned by
// BatchCreateCustomerServiceRequest_CreateCustomerService.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateCustomerServiceRequest_CreateCustomerServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateCustomerServiceRequest_CreateCustomerServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateCustomerServiceRequest_CreateCustomerServiceMultiError) AllErrors() []error {
	return m
}

// BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError is
// the validation error returned by
// BatchCreateCustomerServiceRequest_CreateCustomerService.Validate if the
// designated constraints aren't met.
type BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError) ErrorName() string {
	return "BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateCustomerServiceRequest_CreateCustomerService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateCustomerServiceRequest_CreateCustomerServiceValidationError{}
