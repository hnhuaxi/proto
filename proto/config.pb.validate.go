// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListConfigKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigKeysRequestMultiError, or nil if none found.
func (m *ListConfigKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ListConfigKeysRequestMultiError(errors)
	}

	return nil
}

// ListConfigKeysRequestMultiError is an error wrapping multiple validation
// errors returned by ListConfigKeysRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConfigKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigKeysRequestMultiError) AllErrors() []error { return m }

// ListConfigKeysRequestValidationError is the validation error returned by
// ListConfigKeysRequest.Validate if the designated constraints aren't met.
type ListConfigKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigKeysRequestValidationError) ErrorName() string {
	return "ListConfigKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigKeysRequestValidationError{}

// Validate checks the field values on ListConfigKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigKeysResponseMultiError, or nil if none found.
func (m *ListConfigKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListConfigKeysResponseMultiError(errors)
	}

	return nil
}

// ListConfigKeysResponseMultiError is an error wrapping multiple validation
// errors returned by ListConfigKeysResponse.ValidateAll() if the designated
// constraints aren't met.
type ListConfigKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigKeysResponseMultiError) AllErrors() []error { return m }

// ListConfigKeysResponseValidationError is the validation error returned by
// ListConfigKeysResponse.Validate if the designated constraints aren't met.
type ListConfigKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigKeysResponseValidationError) ErrorName() string {
	return "ListConfigKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigKeysResponseValidationError{}

// Validate checks the field values on GetConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigRequestMultiError, or nil if none found.
func (m *GetConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Configkey

	if len(errors) > 0 {
		return GetConfigRequestMultiError(errors)
	}

	return nil
}

// GetConfigRequestMultiError is an error wrapping multiple validation errors
// returned by GetConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type GetConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRequestMultiError) AllErrors() []error { return m }

// GetConfigRequestValidationError is the validation error returned by
// GetConfigRequest.Validate if the designated constraints aren't met.
type GetConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRequestValidationError) ErrorName() string { return "GetConfigRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRequestValidationError{}

// Validate checks the field values on ConfigResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigResponseMultiError,
// or nil if none found.
func (m *ConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfigKey

	// no validation rules for Schema

	// no validation rules for Ui

	// no validation rules for Settings

	if len(errors) > 0 {
		return ConfigResponseMultiError(errors)
	}

	return nil
}

// ConfigResponseMultiError is an error wrapping multiple validation errors
// returned by ConfigResponse.ValidateAll() if the designated constraints
// aren't met.
type ConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigResponseMultiError) AllErrors() []error { return m }

// ConfigResponseValidationError is the validation error returned by
// ConfigResponse.Validate if the designated constraints aren't met.
type ConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigResponseValidationError) ErrorName() string { return "ConfigResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigResponseValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequestMultiError, or nil if none found.
func (m *UpdateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Configkey

	// no validation rules for Settings

	if len(errors) > 0 {
		return UpdateConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequestMultiError) AllErrors() []error { return m }

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigResponseMultiError, or nil if none found.
func (m *UpdateConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfigKey

	// no validation rules for Settings

	if len(errors) > 0 {
		return UpdateConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateConfigResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigResponseMultiError) AllErrors() []error { return m }

// UpdateConfigResponseValidationError is the validation error returned by
// UpdateConfigResponse.Validate if the designated constraints aren't met.
type UpdateConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigResponseValidationError) ErrorName() string {
	return "UpdateConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigResponseValidationError{}

// Validate checks the field values on GetConfigValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigValueRequestMultiError, or nil if none found.
func (m *GetConfigValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Configkey

	// no validation rules for Selector

	if len(errors) > 0 {
		return GetConfigValueRequestMultiError(errors)
	}

	return nil
}

// GetConfigValueRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigValueRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigValueRequestMultiError) AllErrors() []error { return m }

// GetConfigValueRequestValidationError is the validation error returned by
// GetConfigValueRequest.Validate if the designated constraints aren't met.
type GetConfigValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigValueRequestValidationError) ErrorName() string {
	return "GetConfigValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigValueRequestValidationError{}

// Validate checks the field values on GetConfigValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigValueResponseMultiError, or nil if none found.
func (m *GetConfigValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfigKey

	// no validation rules for Selector

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConfigValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConfigValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConfigValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConfigValueResponseMultiError(errors)
	}

	return nil
}

// GetConfigValueResponseMultiError is an error wrapping multiple validation
// errors returned by GetConfigValueResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConfigValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigValueResponseMultiError) AllErrors() []error { return m }

// GetConfigValueResponseValidationError is the validation error returned by
// GetConfigValueResponse.Validate if the designated constraints aren't met.
type GetConfigValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigValueResponseValidationError) ErrorName() string {
	return "GetConfigValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigValueResponseValidationError{}

// Validate checks the field values on SetConfigValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConfigValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConfigValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConfigValueRequestMultiError, or nil if none found.
func (m *SetConfigValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConfigValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Configkey

	// no validation rules for Selector

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetConfigValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetConfigValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetConfigValueRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetConfigValueRequestMultiError(errors)
	}

	return nil
}

// SetConfigValueRequestMultiError is an error wrapping multiple validation
// errors returned by SetConfigValueRequest.ValidateAll() if the designated
// constraints aren't met.
type SetConfigValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConfigValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConfigValueRequestMultiError) AllErrors() []error { return m }

// SetConfigValueRequestValidationError is the validation error returned by
// SetConfigValueRequest.Validate if the designated constraints aren't met.
type SetConfigValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConfigValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConfigValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConfigValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConfigValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConfigValueRequestValidationError) ErrorName() string {
	return "SetConfigValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetConfigValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConfigValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConfigValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConfigValueRequestValidationError{}

// Validate checks the field values on SetConfigValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConfigValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConfigValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConfigValueResponseMultiError, or nil if none found.
func (m *SetConfigValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConfigValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfigKey

	// no validation rules for Selector

	if all {
		switch v := interface{}(m.GetOldValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetConfigValueResponseValidationError{
					field:  "OldValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetConfigValueResponseValidationError{
					field:  "OldValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOldValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetConfigValueResponseValidationError{
				field:  "OldValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetConfigValueResponseMultiError(errors)
	}

	return nil
}

// SetConfigValueResponseMultiError is an error wrapping multiple validation
// errors returned by SetConfigValueResponse.ValidateAll() if the designated
// constraints aren't met.
type SetConfigValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConfigValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConfigValueResponseMultiError) AllErrors() []error { return m }

// SetConfigValueResponseValidationError is the validation error returned by
// SetConfigValueResponse.Validate if the designated constraints aren't met.
type SetConfigValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConfigValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConfigValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConfigValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConfigValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConfigValueResponseValidationError) ErrorName() string {
	return "SetConfigValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetConfigValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConfigValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConfigValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConfigValueResponseValidationError{}
