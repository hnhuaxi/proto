// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: adset.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAdsetsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAdsetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdsetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdsetsRequestMultiError, or nil if none found.
func (m *ListAdsetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdsetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdsetsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdsetsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdsetsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnterpriseId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListAdsetsRequestMultiError(errors)
	}

	return nil
}

// ListAdsetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAdsetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAdsetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdsetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdsetsRequestMultiError) AllErrors() []error { return m }

// ListAdsetsRequestValidationError is the validation error returned by
// ListAdsetsRequest.Validate if the designated constraints aren't met.
type ListAdsetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdsetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdsetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdsetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdsetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdsetsRequestValidationError) ErrorName() string {
	return "ListAdsetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdsetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdsetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdsetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdsetsRequestValidationError{}

// Validate checks the field values on ListAdsetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdsetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdsetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdsetsResponseMultiError, or nil if none found.
func (m *ListAdsetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdsetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdsets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdsetsResponseValidationError{
						field:  fmt.Sprintf("Adsets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdsetsResponseValidationError{
						field:  fmt.Sprintf("Adsets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdsetsResponseValidationError{
					field:  fmt.Sprintf("Adsets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdsetsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdsetsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdsetsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAdsetsResponseMultiError(errors)
	}

	return nil
}

// ListAdsetsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAdsetsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAdsetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdsetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdsetsResponseMultiError) AllErrors() []error { return m }

// ListAdsetsResponseValidationError is the validation error returned by
// ListAdsetsResponse.Validate if the designated constraints aren't met.
type ListAdsetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdsetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdsetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdsetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdsetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdsetsResponseValidationError) ErrorName() string {
	return "ListAdsetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdsetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdsetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdsetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdsetsResponseValidationError{}

// Validate checks the field values on CreateAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdsetRequestMultiError, or nil if none found.
func (m *CreateAdsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for StrategyName

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAdsetRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAdsetRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAdsetRequestValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccountId

	// no validation rules for EnterpriseId

	// no validation rules for UserActionSetId

	// no validation rules for Goal

	// no validation rules for DeepGoal

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAdsetRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAdsetRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAdsetRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAdsetRequestMultiError(errors)
	}

	return nil
}

// CreateAdsetRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAdsetRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAdsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdsetRequestMultiError) AllErrors() []error { return m }

// CreateAdsetRequestValidationError is the validation error returned by
// CreateAdsetRequest.Validate if the designated constraints aren't met.
type CreateAdsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdsetRequestValidationError) ErrorName() string {
	return "CreateAdsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdsetRequestValidationError{}

// Validate checks the field values on GetAdsetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdsetRequestMultiError, or nil if none found.
func (m *GetAdsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return GetAdsetRequestMultiError(errors)
	}

	return nil
}

// GetAdsetRequestMultiError is an error wrapping multiple validation errors
// returned by GetAdsetRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAdsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdsetRequestMultiError) AllErrors() []error { return m }

// GetAdsetRequestValidationError is the validation error returned by
// GetAdsetRequest.Validate if the designated constraints aren't met.
type GetAdsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdsetRequestValidationError) ErrorName() string { return "GetAdsetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAdsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdsetRequestValidationError{}

// Validate checks the field values on UpdateAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdsetRequestMultiError, or nil if none found.
func (m *UpdateAdsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.AccountId != nil {
		// no validation rules for AccountId
	}

	if m.UserActionSetId != nil {
		// no validation rules for UserActionSetId
	}

	if m.Goal != nil {
		// no validation rules for Goal
	}

	if m.DeepGoal != nil {
		// no validation rules for DeepGoal
	}

	if m.FreezeCustomer != nil {
		// no validation rules for FreezeCustomer
	}

	if m.Params != nil {

		if all {
			switch v := interface{}(m.GetParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAdsetRequestValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAdsetRequestValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAdsetRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Expirment != nil {
		// no validation rules for Expirment
	}

	if m.Review != nil {
		// no validation rules for Review
	}

	if m.PushStrategy != nil {

		if all {
			switch v := interface{}(m.GetPushStrategy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAdsetRequestValidationError{
						field:  "PushStrategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAdsetRequestValidationError{
						field:  "PushStrategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPushStrategy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAdsetRequestValidationError{
					field:  "PushStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StrategyName != nil {
		// no validation rules for StrategyName
	}

	if m.Strategy != nil {

		if all {
			switch v := interface{}(m.GetStrategy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAdsetRequestValidationError{
						field:  "Strategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAdsetRequestValidationError{
						field:  "Strategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAdsetRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if len(errors) > 0 {
		return UpdateAdsetRequestMultiError(errors)
	}

	return nil
}

// UpdateAdsetRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAdsetRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAdsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdsetRequestMultiError) AllErrors() []error { return m }

// UpdateAdsetRequestValidationError is the validation error returned by
// UpdateAdsetRequest.Validate if the designated constraints aren't met.
type UpdateAdsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdsetRequestValidationError) ErrorName() string {
	return "UpdateAdsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdsetRequestValidationError{}

// Validate checks the field values on CorrectAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CorrectAdsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CorrectAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CorrectAdsetRequestMultiError, or nil if none found.
func (m *CorrectAdsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CorrectAdsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CorrectAdsetRequestMultiError(errors)
	}

	return nil
}

// CorrectAdsetRequestMultiError is an error wrapping multiple validation
// errors returned by CorrectAdsetRequest.ValidateAll() if the designated
// constraints aren't met.
type CorrectAdsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CorrectAdsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CorrectAdsetRequestMultiError) AllErrors() []error { return m }

// CorrectAdsetRequestValidationError is the validation error returned by
// CorrectAdsetRequest.Validate if the designated constraints aren't met.
type CorrectAdsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CorrectAdsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CorrectAdsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CorrectAdsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CorrectAdsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CorrectAdsetRequestValidationError) ErrorName() string {
	return "CorrectAdsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CorrectAdsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCorrectAdsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CorrectAdsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CorrectAdsetRequestValidationError{}

// Validate checks the field values on AdsetCorrectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetCorrectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetCorrectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetCorrectionResponseMultiError, or nil if none found.
func (m *AdsetCorrectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetCorrectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCorrection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetCorrectionResponseValidationError{
					field:  "Correction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetCorrectionResponseValidationError{
					field:  "Correction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCorrection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetCorrectionResponseValidationError{
				field:  "Correction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdsetCorrectionResponseMultiError(errors)
	}

	return nil
}

// AdsetCorrectionResponseMultiError is an error wrapping multiple validation
// errors returned by AdsetCorrectionResponse.ValidateAll() if the designated
// constraints aren't met.
type AdsetCorrectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetCorrectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetCorrectionResponseMultiError) AllErrors() []error { return m }

// AdsetCorrectionResponseValidationError is the validation error returned by
// AdsetCorrectionResponse.Validate if the designated constraints aren't met.
type AdsetCorrectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetCorrectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetCorrectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetCorrectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetCorrectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetCorrectionResponseValidationError) ErrorName() string {
	return "AdsetCorrectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetCorrectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetCorrectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetCorrectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetCorrectionResponseValidationError{}

// Validate checks the field values on ChangeAdsetStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdsetStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdsetStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdsetStateRequestMultiError, or nil if none found.
func (m *ChangeAdsetStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdsetStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for Status

	if len(errors) > 0 {
		return ChangeAdsetStateRequestMultiError(errors)
	}

	return nil
}

// ChangeAdsetStateRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeAdsetStateRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeAdsetStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdsetStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdsetStateRequestMultiError) AllErrors() []error { return m }

// ChangeAdsetStateRequestValidationError is the validation error returned by
// ChangeAdsetStateRequest.Validate if the designated constraints aren't met.
type ChangeAdsetStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdsetStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdsetStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdsetStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdsetStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdsetStateRequestValidationError) ErrorName() string {
	return "ChangeAdsetStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdsetStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdsetStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdsetStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdsetStateRequestValidationError{}

// Validate checks the field values on DeleteAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdsetRequestMultiError, or nil if none found.
func (m *DeleteAdsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAdsetRequestMultiError(errors)
	}

	return nil
}

// DeleteAdsetRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAdsetRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAdsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdsetRequestMultiError) AllErrors() []error { return m }

// DeleteAdsetRequestValidationError is the validation error returned by
// DeleteAdsetRequest.Validate if the designated constraints aren't met.
type DeleteAdsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdsetRequestValidationError) ErrorName() string {
	return "DeleteAdsetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdsetRequestValidationError{}

// Validate checks the field values on SendActionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendActionRequestMultiError, or nil if none found.
func (m *SendActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Action

	if len(errors) > 0 {
		return SendActionRequestMultiError(errors)
	}

	return nil
}

// SendActionRequestMultiError is an error wrapping multiple validation errors
// returned by SendActionRequest.ValidateAll() if the designated constraints
// aren't met.
type SendActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendActionRequestMultiError) AllErrors() []error { return m }

// SendActionRequestValidationError is the validation error returned by
// SendActionRequest.Validate if the designated constraints aren't met.
type SendActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendActionRequestValidationError) ErrorName() string {
	return "SendActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendActionRequestValidationError{}

// Validate checks the field values on SendActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendActionResponseMultiError, or nil if none found.
func (m *SendActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ActionId

	// no validation rules for Status

	if len(errors) > 0 {
		return SendActionResponseMultiError(errors)
	}

	return nil
}

// SendActionResponseMultiError is an error wrapping multiple validation errors
// returned by SendActionResponse.ValidateAll() if the designated constraints
// aren't met.
type SendActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendActionResponseMultiError) AllErrors() []error { return m }

// SendActionResponseValidationError is the validation error returned by
// SendActionResponse.Validate if the designated constraints aren't met.
type SendActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendActionResponseValidationError) ErrorName() string {
	return "SendActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendActionResponseValidationError{}

// Validate checks the field values on AdsetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdsetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdsetResponseMultiError, or
// nil if none found.
func (m *AdsetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetResponseValidationError{
					field:  "Adset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetResponseValidationError{
					field:  "Adset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetResponseValidationError{
				field:  "Adset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdsetResponseMultiError(errors)
	}

	return nil
}

// AdsetResponseMultiError is an error wrapping multiple validation errors
// returned by AdsetResponse.ValidateAll() if the designated constraints
// aren't met.
type AdsetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetResponseMultiError) AllErrors() []error { return m }

// AdsetResponseValidationError is the validation error returned by
// AdsetResponse.Validate if the designated constraints aren't met.
type AdsetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetResponseValidationError) ErrorName() string { return "AdsetResponseValidationError" }

// Error satisfies the builtin error interface
func (e AdsetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetResponseValidationError{}

// Validate checks the field values on AdsetAppendAdsReqeust with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetAppendAdsReqeust) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetAppendAdsReqeust with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetAppendAdsReqeustMultiError, or nil if none found.
func (m *AdsetAppendAdsReqeust) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetAppendAdsReqeust) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AdsetAppendAdsReqeustMultiError(errors)
	}

	return nil
}

// AdsetAppendAdsReqeustMultiError is an error wrapping multiple validation
// errors returned by AdsetAppendAdsReqeust.ValidateAll() if the designated
// constraints aren't met.
type AdsetAppendAdsReqeustMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetAppendAdsReqeustMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetAppendAdsReqeustMultiError) AllErrors() []error { return m }

// AdsetAppendAdsReqeustValidationError is the validation error returned by
// AdsetAppendAdsReqeust.Validate if the designated constraints aren't met.
type AdsetAppendAdsReqeustValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetAppendAdsReqeustValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetAppendAdsReqeustValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetAppendAdsReqeustValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetAppendAdsReqeustValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetAppendAdsReqeustValidationError) ErrorName() string {
	return "AdsetAppendAdsReqeustValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetAppendAdsReqeustValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetAppendAdsReqeust.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetAppendAdsReqeustValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetAppendAdsReqeustValidationError{}

// Validate checks the field values on AdsetAppendAdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetAppendAdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetAppendAdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetAppendAdsResponseMultiError, or nil if none found.
func (m *AdsetAppendAdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetAppendAdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdsetAppendAdsResponseValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdsetAppendAdsResponseValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdsetAppendAdsResponseValidationError{
					field:  fmt.Sprintf("Ads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdsetAppendAdsResponseMultiError(errors)
	}

	return nil
}

// AdsetAppendAdsResponseMultiError is an error wrapping multiple validation
// errors returned by AdsetAppendAdsResponse.ValidateAll() if the designated
// constraints aren't met.
type AdsetAppendAdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetAppendAdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetAppendAdsResponseMultiError) AllErrors() []error { return m }

// AdsetAppendAdsResponseValidationError is the validation error returned by
// AdsetAppendAdsResponse.Validate if the designated constraints aren't met.
type AdsetAppendAdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetAppendAdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetAppendAdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetAppendAdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetAppendAdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetAppendAdsResponseValidationError) ErrorName() string {
	return "AdsetAppendAdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetAppendAdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetAppendAdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetAppendAdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetAppendAdsResponseValidationError{}

// Validate checks the field values on AdsetTracksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetTracksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetTracksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetTracksRequestMultiError, or nil if none found.
func (m *AdsetTracksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetTracksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	if len(errors) > 0 {
		return AdsetTracksRequestMultiError(errors)
	}

	return nil
}

// AdsetTracksRequestMultiError is an error wrapping multiple validation errors
// returned by AdsetTracksRequest.ValidateAll() if the designated constraints
// aren't met.
type AdsetTracksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetTracksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetTracksRequestMultiError) AllErrors() []error { return m }

// AdsetTracksRequestValidationError is the validation error returned by
// AdsetTracksRequest.Validate if the designated constraints aren't met.
type AdsetTracksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetTracksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetTracksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetTracksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetTracksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetTracksRequestValidationError) ErrorName() string {
	return "AdsetTracksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetTracksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetTracksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetTracksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetTracksRequestValidationError{}

// Validate checks the field values on AdsetTracksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetTracksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetTracksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetTracksResponseMultiError, or nil if none found.
func (m *AdsetTracksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetTracksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTracks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdsetTracksResponseValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdsetTracksResponseValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdsetTracksResponseValidationError{
					field:  fmt.Sprintf("Tracks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetTracksResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetTracksResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetTracksResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdsetTracksResponseMultiError(errors)
	}

	return nil
}

// AdsetTracksResponseMultiError is an error wrapping multiple validation
// errors returned by AdsetTracksResponse.ValidateAll() if the designated
// constraints aren't met.
type AdsetTracksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetTracksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetTracksResponseMultiError) AllErrors() []error { return m }

// AdsetTracksResponseValidationError is the validation error returned by
// AdsetTracksResponse.Validate if the designated constraints aren't met.
type AdsetTracksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetTracksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetTracksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetTracksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetTracksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetTracksResponseValidationError) ErrorName() string {
	return "AdsetTracksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetTracksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetTracksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetTracksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetTracksResponseValidationError{}

// Validate checks the field values on AdsetTimelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetTimelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetTimelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetTimelineRequestMultiError, or nil if none found.
func (m *AdsetTimelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetTimelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnterpriseId

	// no validation rules for OnlyDones

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetTimelineRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetTimelineRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetTimelineRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return AdsetTimelineRequestMultiError(errors)
	}

	return nil
}

// AdsetTimelineRequestMultiError is an error wrapping multiple validation
// errors returned by AdsetTimelineRequest.ValidateAll() if the designated
// constraints aren't met.
type AdsetTimelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetTimelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetTimelineRequestMultiError) AllErrors() []error { return m }

// AdsetTimelineRequestValidationError is the validation error returned by
// AdsetTimelineRequest.Validate if the designated constraints aren't met.
type AdsetTimelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetTimelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetTimelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetTimelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetTimelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetTimelineRequestValidationError) ErrorName() string {
	return "AdsetTimelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetTimelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetTimelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetTimelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetTimelineRequestValidationError{}

// Validate checks the field values on AdsetTimelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetTimelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetTimelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetTimelineResponseMultiError, or nil if none found.
func (m *AdsetTimelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetTimelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTimeline() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdsetTimelineResponseValidationError{
						field:  fmt.Sprintf("Timeline[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdsetTimelineResponseValidationError{
						field:  fmt.Sprintf("Timeline[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdsetTimelineResponseValidationError{
					field:  fmt.Sprintf("Timeline[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetTimelineResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetTimelineResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetTimelineResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdsetTimelineResponseMultiError(errors)
	}

	return nil
}

// AdsetTimelineResponseMultiError is an error wrapping multiple validation
// errors returned by AdsetTimelineResponse.ValidateAll() if the designated
// constraints aren't met.
type AdsetTimelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetTimelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetTimelineResponseMultiError) AllErrors() []error { return m }

// AdsetTimelineResponseValidationError is the validation error returned by
// AdsetTimelineResponse.Validate if the designated constraints aren't met.
type AdsetTimelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetTimelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetTimelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetTimelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetTimelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetTimelineResponseValidationError) ErrorName() string {
	return "AdsetTimelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetTimelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetTimelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetTimelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetTimelineResponseValidationError{}

// Validate checks the field values on AdsetDeleteAdsReqeust with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdsetDeleteAdsReqeust) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetDeleteAdsReqeust with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdsetDeleteAdsReqeustMultiError, or nil if none found.
func (m *AdsetDeleteAdsReqeust) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetDeleteAdsReqeust) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AdsetDeleteAdsReqeustMultiError(errors)
	}

	return nil
}

// AdsetDeleteAdsReqeustMultiError is an error wrapping multiple validation
// errors returned by AdsetDeleteAdsReqeust.ValidateAll() if the designated
// constraints aren't met.
type AdsetDeleteAdsReqeustMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetDeleteAdsReqeustMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetDeleteAdsReqeustMultiError) AllErrors() []error { return m }

// AdsetDeleteAdsReqeustValidationError is the validation error returned by
// AdsetDeleteAdsReqeust.Validate if the designated constraints aren't met.
type AdsetDeleteAdsReqeustValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetDeleteAdsReqeustValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetDeleteAdsReqeustValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetDeleteAdsReqeustValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetDeleteAdsReqeustValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetDeleteAdsReqeustValidationError) ErrorName() string {
	return "AdsetDeleteAdsReqeustValidationError"
}

// Error satisfies the builtin error interface
func (e AdsetDeleteAdsReqeustValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetDeleteAdsReqeust.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetDeleteAdsReqeustValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetDeleteAdsReqeustValidationError{}

// Validate checks the field values on Correction with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Correction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Correction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CorrectionMultiError, or
// nil if none found.
func (m *Correction) ValidateAll() error {
	return m.validate(true)
}

func (m *Correction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCorrectTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CorrectionValidationError{
					field:  "CorrectTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CorrectionValidationError{
					field:  "CorrectTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCorrectTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CorrectionValidationError{
				field:  "CorrectTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OftPush

	// no validation rules for OftDone

	if len(errors) > 0 {
		return CorrectionMultiError(errors)
	}

	return nil
}

// CorrectionMultiError is an error wrapping multiple validation errors
// returned by Correction.ValidateAll() if the designated constraints aren't met.
type CorrectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CorrectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CorrectionMultiError) AllErrors() []error { return m }

// CorrectionValidationError is the validation error returned by
// Correction.Validate if the designated constraints aren't met.
type CorrectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CorrectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CorrectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CorrectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CorrectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CorrectionValidationError) ErrorName() string { return "CorrectionValidationError" }

// Error satisfies the builtin error interface
func (e CorrectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCorrection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CorrectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CorrectionValidationError{}

// Validate checks the field values on Adset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Adset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Adset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AdsetMultiError, or nil if none found.
func (m *Adset) ValidateAll() error {
	return m.validate(true)
}

func (m *Adset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Provider

	// no validation rules for Name

	// no validation rules for Prompt

	for idx, item := range m.GetAds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdsetValidationError{
					field:  fmt.Sprintf("Ads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Preview

	// no validation rules for AccountId

	// no validation rules for CreatorId

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SourceAccountId

	// no validation rules for EnterpriseId

	// no validation rules for StrategyName

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCorrection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Correction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Correction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCorrection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "Correction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserActionSetId

	// no validation rules for ProductSourceId

	// no validation rules for Status

	// no validation rules for Goal

	// no validation rules for DeepGoal

	// no validation rules for FreezeCustomer

	// no validation rules for Expirment

	// no validation rules for Review

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnterprise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "Enterprise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterprise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "Enterprise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCustomerServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  fmt.Sprintf("CustomerServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdsetValidationError{
					field:  fmt.Sprintf("CustomerServices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetThirdpartyApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  fmt.Sprintf("ThirdpartyApps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  fmt.Sprintf("ThirdpartyApps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdsetValidationError{
					field:  fmt.Sprintf("ThirdpartyApps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPushStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "PushStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "PushStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPushStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "PushStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdsetValidationError{
					field:  "UpdatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdsetValidationError{
				field:  "UpdatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	// no validation rules for Cost

	// no validation rules for TotalCost

	// no validation rules for View

	// no validation rules for Click

	// no validation rules for Version

	// no validation rules for ProductPrice

	if m.Product != nil {

		if all {
			switch v := interface{}(m.GetProduct()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  "Product",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdsetValidationError{
						field:  "Product",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdsetValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdsetMultiError(errors)
	}

	return nil
}

// AdsetMultiError is an error wrapping multiple validation errors returned by
// Adset.ValidateAll() if the designated constraints aren't met.
type AdsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetMultiError) AllErrors() []error { return m }

// AdsetValidationError is the validation error returned by Adset.Validate if
// the designated constraints aren't met.
type AdsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetValidationError) ErrorName() string { return "AdsetValidationError" }

// Error satisfies the builtin error interface
func (e AdsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetValidationError{}

// Validate checks the field values on Timeline with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Timeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Timeline with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimelineMultiError, or nil
// if none found.
func (m *Timeline) ValidateAll() error {
	return m.validate(true)
}

func (m *Timeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimelineValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimelineValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimelineValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	// no validation rules for Subject

	switch v := m.Action.(type) {
	case *Timeline_Oper:
		if v == nil {
			err := TimelineValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOper()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimelineValidationError{
						field:  "Oper",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimelineValidationError{
						field:  "Oper",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOper()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimelineValidationError{
					field:  "Oper",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Timeline_Track:
		if v == nil {
			err := TimelineValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTrack()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimelineValidationError{
						field:  "Track",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimelineValidationError{
						field:  "Track",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrack()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimelineValidationError{
					field:  "Track",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TimelineMultiError(errors)
	}

	return nil
}

// TimelineMultiError is an error wrapping multiple validation errors returned
// by Timeline.ValidateAll() if the designated constraints aren't met.
type TimelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimelineMultiError) AllErrors() []error { return m }

// TimelineValidationError is the validation error returned by
// Timeline.Validate if the designated constraints aren't met.
type TimelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimelineValidationError) ErrorName() string { return "TimelineValidationError" }

// Error satisfies the builtin error interface
func (e TimelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimelineValidationError{}

// Validate checks the field values on OperAction with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OperAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperAction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperActionMultiError, or
// nil if none found.
func (m *OperAction) ValidateAll() error {
	return m.validate(true)
}

func (m *OperAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PushCount

	// no validation rules for Ack

	// no validation rules for ActionType

	// no validation rules for Target

	// no validation rules for Params

	if len(errors) > 0 {
		return OperActionMultiError(errors)
	}

	return nil
}

// OperActionMultiError is an error wrapping multiple validation errors
// returned by OperAction.ValidateAll() if the designated constraints aren't met.
type OperActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperActionMultiError) AllErrors() []error { return m }

// OperActionValidationError is the validation error returned by
// OperAction.Validate if the designated constraints aren't met.
type OperActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperActionValidationError) ErrorName() string { return "OperActionValidationError" }

// Error satisfies the builtin error interface
func (e OperActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperActionValidationError{}

// Validate checks the field values on TrackAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrackAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackAction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrackActionMultiError, or
// nil if none found.
func (m *TrackAction) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrackActionValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrackActionValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrackActionValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CanPush

	// no validation rules for Pushed

	// no validation rules for Weixin

	if m.PushedAt != nil {

		if all {
			switch v := interface{}(m.GetPushedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrackActionValidationError{
						field:  "PushedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrackActionValidationError{
						field:  "PushedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPushedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrackActionValidationError{
					field:  "PushedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrackActionMultiError(errors)
	}

	return nil
}

// TrackActionMultiError is an error wrapping multiple validation errors
// returned by TrackAction.ValidateAll() if the designated constraints aren't met.
type TrackActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackActionMultiError) AllErrors() []error { return m }

// TrackActionValidationError is the validation error returned by
// TrackAction.Validate if the designated constraints aren't met.
type TrackActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackActionValidationError) ErrorName() string { return "TrackActionValidationError" }

// Error satisfies the builtin error interface
func (e TrackActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackActionValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActionMultiError, or nil if none found.
func (m *Action) ValidateAll() error {
	return m.validate(true)
}

func (m *Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionType

	// no validation rules for Time

	// no validation rules for Scroll

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActionMultiError(errors)
	}

	return nil
}

// ActionMultiError is an error wrapping multiple validation errors returned by
// Action.ValidateAll() if the designated constraints aren't met.
type ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionMultiError) AllErrors() []error { return m }

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on PushStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushStrategyMultiError, or
// nil if none found.
func (m *PushStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *PushStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushStrategyValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushStrategyValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushStrategyValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushStrategyMultiError(errors)
	}

	return nil
}

// PushStrategyMultiError is an error wrapping multiple validation errors
// returned by PushStrategy.ValidateAll() if the designated constraints aren't met.
type PushStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushStrategyMultiError) AllErrors() []error { return m }

// PushStrategyValidationError is the validation error returned by
// PushStrategy.Validate if the designated constraints aren't met.
type PushStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushStrategyValidationError) ErrorName() string { return "PushStrategyValidationError" }

// Error satisfies the builtin error interface
func (e PushStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushStrategyValidationError{}

// Validate checks the field values on PushConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushConfigMultiError, or
// nil if none found.
func (m *PushConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PushConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Auto != nil {

		if all {
			switch v := interface{}(m.GetAuto()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushConfigValidationError{
						field:  "Auto",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushConfigValidationError{
						field:  "Auto",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuto()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushConfigValidationError{
					field:  "Auto",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Pid != nil {

		if all {
			switch v := interface{}(m.GetPid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushConfigValidationError{
						field:  "Pid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushConfigValidationError{
						field:  "Pid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushConfigValidationError{
					field:  "Pid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Table != nil {

		if all {
			switch v := interface{}(m.GetTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushConfigValidationError{
						field:  "Table",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushConfigValidationError{
						field:  "Table",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushConfigValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PushConfigMultiError(errors)
	}

	return nil
}

// PushConfigMultiError is an error wrapping multiple validation errors
// returned by PushConfig.ValidateAll() if the designated constraints aren't met.
type PushConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushConfigMultiError) AllErrors() []error { return m }

// PushConfigValidationError is the validation error returned by
// PushConfig.Validate if the designated constraints aren't met.
type PushConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushConfigValidationError) ErrorName() string { return "PushConfigValidationError" }

// Error satisfies the builtin error interface
func (e PushConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushConfigValidationError{}

// Validate checks the field values on PIDConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PIDConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PIDConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PIDConfigMultiError, or nil
// if none found.
func (m *PIDConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PIDConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ratio

	// no validation rules for Start

	// no validation rules for MaxPushCount

	// no validation rules for Pgain

	// no validation rules for Igain

	// no validation rules for Dgain

	if all {
		switch v := interface{}(m.GetWorkerInternal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PIDConfigValidationError{
					field:  "WorkerInternal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PIDConfigValidationError{
					field:  "WorkerInternal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerInternal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PIDConfigValidationError{
				field:  "WorkerInternal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PIDConfigMultiError(errors)
	}

	return nil
}

// PIDConfigMultiError is an error wrapping multiple validation errors returned
// by PIDConfig.ValidateAll() if the designated constraints aren't met.
type PIDConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PIDConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PIDConfigMultiError) AllErrors() []error { return m }

// PIDConfigValidationError is the validation error returned by
// PIDConfig.Validate if the designated constraints aren't met.
type PIDConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PIDConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PIDConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PIDConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PIDConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PIDConfigValidationError) ErrorName() string { return "PIDConfigValidationError" }

// Error satisfies the builtin error interface
func (e PIDConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPIDConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PIDConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PIDConfigValidationError{}

// Validate checks the field values on AutoConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AutoConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AutoConfigMultiError, or
// nil if none found.
func (m *AutoConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for Ratio

	if len(errors) > 0 {
		return AutoConfigMultiError(errors)
	}

	return nil
}

// AutoConfigMultiError is an error wrapping multiple validation errors
// returned by AutoConfig.ValidateAll() if the designated constraints aren't met.
type AutoConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoConfigMultiError) AllErrors() []error { return m }

// AutoConfigValidationError is the validation error returned by
// AutoConfig.Validate if the designated constraints aren't met.
type AutoConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoConfigValidationError) ErrorName() string { return "AutoConfigValidationError" }

// Error satisfies the builtin error interface
func (e AutoConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoConfigValidationError{}

// Validate checks the field values on TableConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TableConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TableConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TableConfigMultiError, or
// nil if none found.
func (m *TableConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TableConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for Ratio

	// no validation rules for MRatio

	if len(errors) > 0 {
		return TableConfigMultiError(errors)
	}

	return nil
}

// TableConfigMultiError is an error wrapping multiple validation errors
// returned by TableConfig.ValidateAll() if the designated constraints aren't met.
type TableConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableConfigMultiError) AllErrors() []error { return m }

// TableConfigValidationError is the validation error returned by
// TableConfig.Validate if the designated constraints aren't met.
type TableConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableConfigValidationError) ErrorName() string { return "TableConfigValidationError" }

// Error satisfies the builtin error interface
func (e TableConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTableConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableConfigValidationError{}

// Validate checks the field values on AdsetParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdsetParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetParams with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdsetParamsMultiError, or
// nil if none found.
func (m *AdsetParams) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScrollX1

	// no validation rules for ScrollX2

	// no validation rules for ScrollX3

	// no validation rules for StayTimeX1

	// no validation rules for StayTimeX2

	// no validation rules for StayTimeX3

	// no validation rules for RetX1

	// no validation rules for RetX2

	// no validation rules for Start

	// no validation rules for UseScene

	// no validation rules for ButtonDelay

	if len(errors) > 0 {
		return AdsetParamsMultiError(errors)
	}

	return nil
}

// AdsetParamsMultiError is an error wrapping multiple validation errors
// returned by AdsetParams.ValidateAll() if the designated constraints aren't met.
type AdsetParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetParamsMultiError) AllErrors() []error { return m }

// AdsetParamsValidationError is the validation error returned by
// AdsetParams.Validate if the designated constraints aren't met.
type AdsetParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetParamsValidationError) ErrorName() string { return "AdsetParamsValidationError" }

// Error satisfies the builtin error interface
func (e AdsetParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetParamsValidationError{}

// Validate checks the field values on Ack with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ack with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AckMultiError, or nil if none found.
func (m *Ack) ValidateAll() error {
	return m.validate(true)
}

func (m *Ack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Count

	// no validation rules for Weixin

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AckValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AckValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AckValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for Username

	if len(errors) > 0 {
		return AckMultiError(errors)
	}

	return nil
}

// AckMultiError is an error wrapping multiple validation errors returned by
// Ack.ValidateAll() if the designated constraints aren't met.
type AckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AckMultiError) AllErrors() []error { return m }

// AckValidationError is the validation error returned by Ack.Validate if the
// designated constraints aren't met.
type AckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckValidationError) ErrorName() string { return "AckValidationError" }

// Error satisfies the builtin error interface
func (e AckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckValidationError{}

// Validate checks the field values on PushbackAckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushbackAckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushbackAckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushbackAckRequestMultiError, or nil if none found.
func (m *PushbackAckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushbackAckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Count

	// no validation rules for Weixin

	if len(errors) > 0 {
		return PushbackAckRequestMultiError(errors)
	}

	return nil
}

// PushbackAckRequestMultiError is an error wrapping multiple validation errors
// returned by PushbackAckRequest.ValidateAll() if the designated constraints
// aren't met.
type PushbackAckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushbackAckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushbackAckRequestMultiError) AllErrors() []error { return m }

// PushbackAckRequestValidationError is the validation error returned by
// PushbackAckRequest.Validate if the designated constraints aren't met.
type PushbackAckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushbackAckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushbackAckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushbackAckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushbackAckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushbackAckRequestValidationError) ErrorName() string {
	return "PushbackAckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushbackAckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushbackAckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushbackAckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushbackAckRequestValidationError{}

// Validate checks the field values on PushbackReplenishRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushbackReplenishRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushbackReplenishRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushbackReplenishRequestMultiError, or nil if none found.
func (m *PushbackReplenishRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushbackReplenishRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Count

	// no validation rules for Mock

	if m.ClickId != nil {
		// no validation rules for ClickId
	}

	if len(errors) > 0 {
		return PushbackReplenishRequestMultiError(errors)
	}

	return nil
}

// PushbackReplenishRequestMultiError is an error wrapping multiple validation
// errors returned by PushbackReplenishRequest.ValidateAll() if the designated
// constraints aren't met.
type PushbackReplenishRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushbackReplenishRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushbackReplenishRequestMultiError) AllErrors() []error { return m }

// PushbackReplenishRequestValidationError is the validation error returned by
// PushbackReplenishRequest.Validate if the designated constraints aren't met.
type PushbackReplenishRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushbackReplenishRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushbackReplenishRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushbackReplenishRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushbackReplenishRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushbackReplenishRequestValidationError) ErrorName() string {
	return "PushbackReplenishRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushbackReplenishRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushbackReplenishRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushbackReplenishRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushbackReplenishRequestValidationError{}

// Validate checks the field values on ReplenishResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReplenishResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplenishResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplenishResponseMultiError, or nil if none found.
func (m *ReplenishResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplenishResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Fails

	// no validation rules for Warning

	if len(errors) > 0 {
		return ReplenishResponseMultiError(errors)
	}

	return nil
}

// ReplenishResponseMultiError is an error wrapping multiple validation errors
// returned by ReplenishResponse.ValidateAll() if the designated constraints
// aren't met.
type ReplenishResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplenishResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplenishResponseMultiError) AllErrors() []error { return m }

// ReplenishResponseValidationError is the validation error returned by
// ReplenishResponse.Validate if the designated constraints aren't met.
type ReplenishResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplenishResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplenishResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplenishResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplenishResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplenishResponseValidationError) ErrorName() string {
	return "ReplenishResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReplenishResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplenishResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplenishResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplenishResponseValidationError{}

// Validate checks the field values on PushbackRecallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushbackRecallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushbackRecallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushbackRecallRequestMultiError, or nil if none found.
func (m *PushbackRecallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushbackRecallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Count

	if len(errors) > 0 {
		return PushbackRecallRequestMultiError(errors)
	}

	return nil
}

// PushbackRecallRequestMultiError is an error wrapping multiple validation
// errors returned by PushbackRecallRequest.ValidateAll() if the designated
// constraints aren't met.
type PushbackRecallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushbackRecallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushbackRecallRequestMultiError) AllErrors() []error { return m }

// PushbackRecallRequestValidationError is the validation error returned by
// PushbackRecallRequest.Validate if the designated constraints aren't met.
type PushbackRecallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushbackRecallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushbackRecallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushbackRecallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushbackRecallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushbackRecallRequestValidationError) ErrorName() string {
	return "PushbackRecallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushbackRecallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushbackRecallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushbackRecallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushbackRecallRequestValidationError{}

// Validate checks the field values on LiveAdsetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LiveAdsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiveAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiveAdsetRequestMultiError, or nil if none found.
func (m *LiveAdsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LiveAdsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiveAdsetRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiveAdsetRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiveAdsetRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LiveAdsetRequestMultiError(errors)
	}

	return nil
}

// LiveAdsetRequestMultiError is an error wrapping multiple validation errors
// returned by LiveAdsetRequest.ValidateAll() if the designated constraints
// aren't met.
type LiveAdsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiveAdsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiveAdsetRequestMultiError) AllErrors() []error { return m }

// LiveAdsetRequestValidationError is the validation error returned by
// LiveAdsetRequest.Validate if the designated constraints aren't met.
type LiveAdsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiveAdsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiveAdsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiveAdsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiveAdsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiveAdsetRequestValidationError) ErrorName() string { return "LiveAdsetRequestValidationError" }

// Error satisfies the builtin error interface
func (e LiveAdsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiveAdsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiveAdsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiveAdsetRequestValidationError{}

// Validate checks the field values on AdsetStat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdsetStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdsetStat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdsetStatMultiError, or nil
// if none found.
func (m *AdsetStat) ValidateAll() error {
	return m.validate(true)
}

func (m *AdsetStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Acks

	// no validation rules for DAcks

	// no validation rules for Push

	// no validation rules for DPush

	// no validation rules for Pv

	// no validation rules for DPv

	// no validation rules for Ol

	// no validation rules for DOl

	// no validation rules for Done

	// no validation rules for DDone

	// no validation rules for Adone

	// no validation rules for DAdone

	// no validation rules for TotalCost

	// no validation rules for DTotalCost

	// no validation rules for View

	// no validation rules for DView

	// no validation rules for Clicks

	// no validation rules for DClicks

	// no validation rules for Cost

	// no validation rules for DCost

	// no validation rules for Rdone

	// no validation rules for DRdone

	// no validation rules for Rrate

	// no validation rules for DRrate

	// no validation rules for Remind

	// no validation rules for DRemind

	// no validation rules for Error

	if len(errors) > 0 {
		return AdsetStatMultiError(errors)
	}

	return nil
}

// AdsetStatMultiError is an error wrapping multiple validation errors returned
// by AdsetStat.ValidateAll() if the designated constraints aren't met.
type AdsetStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdsetStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdsetStatMultiError) AllErrors() []error { return m }

// AdsetStatValidationError is the validation error returned by
// AdsetStat.Validate if the designated constraints aren't met.
type AdsetStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdsetStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdsetStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdsetStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdsetStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdsetStatValidationError) ErrorName() string { return "AdsetStatValidationError" }

// Error satisfies the builtin error interface
func (e AdsetStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdsetStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdsetStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdsetStatValidationError{}

// Validate checks the field values on PushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushRequestMultiError, or
// nil if none found.
func (m *PushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for ClickId

	// no validation rules for Deep

	// no validation rules for Group

	// no validation rules for Kf

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductPrice

	if len(errors) > 0 {
		return PushRequestMultiError(errors)
	}

	return nil
}

// PushRequestMultiError is an error wrapping multiple validation errors
// returned by PushRequest.ValidateAll() if the designated constraints aren't met.
type PushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushRequestMultiError) AllErrors() []error { return m }

// PushRequestValidationError is the validation error returned by
// PushRequest.Validate if the designated constraints aren't met.
type PushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushRequestValidationError) ErrorName() string { return "PushRequestValidationError" }

// Error satisfies the builtin error interface
func (e PushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushRequestValidationError{}

// Validate checks the field values on PushbackLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushbackLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushbackLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushbackLockRequestMultiError, or nil if none found.
func (m *PushbackLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushbackLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for ClickId

	// no validation rules for Lock

	if len(errors) > 0 {
		return PushbackLockRequestMultiError(errors)
	}

	return nil
}

// PushbackLockRequestMultiError is an error wrapping multiple validation
// errors returned by PushbackLockRequest.ValidateAll() if the designated
// constraints aren't met.
type PushbackLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushbackLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushbackLockRequestMultiError) AllErrors() []error { return m }

// PushbackLockRequestValidationError is the validation error returned by
// PushbackLockRequest.Validate if the designated constraints aren't met.
type PushbackLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushbackLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushbackLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushbackLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushbackLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushbackLockRequestValidationError) ErrorName() string {
	return "PushbackLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushbackLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushbackLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushbackLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushbackLockRequestValidationError{}

// Validate checks the field values on PushbackLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushbackLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushbackLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushbackLockResponseMultiError, or nil if none found.
func (m *PushbackLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushbackLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Success

	if len(errors) > 0 {
		return PushbackLockResponseMultiError(errors)
	}

	return nil
}

// PushbackLockResponseMultiError is an error wrapping multiple validation
// errors returned by PushbackLockResponse.ValidateAll() if the designated
// constraints aren't met.
type PushbackLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushbackLockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushbackLockResponseMultiError) AllErrors() []error { return m }

// PushbackLockResponseValidationError is the validation error returned by
// PushbackLockResponse.Validate if the designated constraints aren't met.
type PushbackLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushbackLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushbackLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushbackLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushbackLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushbackLockResponseValidationError) ErrorName() string {
	return "PushbackLockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushbackLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushbackLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushbackLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushbackLockResponseValidationError{}

// Validate checks the field values on PushbackLocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushbackLocksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushbackLocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushbackLocksRequestMultiError, or nil if none found.
func (m *PushbackLocksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushbackLocksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Lock

	if len(errors) > 0 {
		return PushbackLocksRequestMultiError(errors)
	}

	return nil
}

// PushbackLocksRequestMultiError is an error wrapping multiple validation
// errors returned by PushbackLocksRequest.ValidateAll() if the designated
// constraints aren't met.
type PushbackLocksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushbackLocksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushbackLocksRequestMultiError) AllErrors() []error { return m }

// PushbackLocksRequestValidationError is the validation error returned by
// PushbackLocksRequest.Validate if the designated constraints aren't met.
type PushbackLocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushbackLocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushbackLocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushbackLocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushbackLocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushbackLocksRequestValidationError) ErrorName() string {
	return "PushbackLocksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushbackLocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushbackLocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushbackLocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushbackLocksRequestValidationError{}

// Validate checks the field values on PushbackLocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushbackLocksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushbackLocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushbackLocksResponseMultiError, or nil if none found.
func (m *PushbackLocksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushbackLocksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for Success

	if len(errors) > 0 {
		return PushbackLocksResponseMultiError(errors)
	}

	return nil
}

// PushbackLocksResponseMultiError is an error wrapping multiple validation
// errors returned by PushbackLocksResponse.ValidateAll() if the designated
// constraints aren't met.
type PushbackLocksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushbackLocksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushbackLocksResponseMultiError) AllErrors() []error { return m }

// PushbackLocksResponseValidationError is the validation error returned by
// PushbackLocksResponse.Validate if the designated constraints aren't met.
type PushbackLocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushbackLocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushbackLocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushbackLocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushbackLocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushbackLocksResponseValidationError) ErrorName() string {
	return "PushbackLocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushbackLocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushbackLocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushbackLocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushbackLocksResponseValidationError{}

// Validate checks the field values on MoveAdsetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MoveAdsetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveAdsetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveAdsetRequestMultiError, or nil if none found.
func (m *MoveAdsetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveAdsetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdsetId

	// no validation rules for ToEnterpriseId

	if len(errors) > 0 {
		return MoveAdsetRequestMultiError(errors)
	}

	return nil
}

// MoveAdsetRequestMultiError is an error wrapping multiple validation errors
// returned by MoveAdsetRequest.ValidateAll() if the designated constraints
// aren't met.
type MoveAdsetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveAdsetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveAdsetRequestMultiError) AllErrors() []error { return m }

// MoveAdsetRequestValidationError is the validation error returned by
// MoveAdsetRequest.Validate if the designated constraints aren't met.
type MoveAdsetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveAdsetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveAdsetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveAdsetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveAdsetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveAdsetRequestValidationError) ErrorName() string { return "MoveAdsetRequestValidationError" }

// Error satisfies the builtin error interface
func (e MoveAdsetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveAdsetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveAdsetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveAdsetRequestValidationError{}
