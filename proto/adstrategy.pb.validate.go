// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: adstrategy.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on URL with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *URL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URL with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in URLMultiError, or nil if none found.
func (m *URL) ValidateAll() error {
	return m.validate(true)
}

func (m *URL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for Disable

	// no validation rules for Group

	if len(errors) > 0 {
		return URLMultiError(errors)
	}

	return nil
}

// URLMultiError is an error wrapping multiple validation errors returned by
// URL.ValidateAll() if the designated constraints aren't met.
type URLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLMultiError) AllErrors() []error { return m }

// URLValidationError is the validation error returned by URL.Validate if the
// designated constraints aren't met.
type URLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLValidationError) ErrorName() string { return "URLValidationError" }

// Error satisfies the builtin error interface
func (e URLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLValidationError{}

// Validate checks the field values on MiniprogramItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MiniprogramItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiniprogramItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiniprogramItemMultiError, or nil if none found.
func (m *MiniprogramItem) ValidateAll() error {
	return m.validate(true)
}

func (m *MiniprogramItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for Name

	// no validation rules for BlockedReason

	if m.BlockedTime != nil {

		if all {
			switch v := interface{}(m.GetBlockedTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiniprogramItemValidationError{
						field:  "BlockedTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiniprogramItemValidationError{
						field:  "BlockedTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlockedTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiniprogramItemValidationError{
					field:  "BlockedTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MiniprogramItemMultiError(errors)
	}

	return nil
}

// MiniprogramItemMultiError is an error wrapping multiple validation errors
// returned by MiniprogramItem.ValidateAll() if the designated constraints
// aren't met.
type MiniprogramItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiniprogramItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiniprogramItemMultiError) AllErrors() []error { return m }

// MiniprogramItemValidationError is the validation error returned by
// MiniprogramItem.Validate if the designated constraints aren't met.
type MiniprogramItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiniprogramItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiniprogramItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiniprogramItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiniprogramItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiniprogramItemValidationError) ErrorName() string { return "MiniprogramItemValidationError" }

// Error satisfies the builtin error interface
func (e MiniprogramItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiniprogramItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiniprogramItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiniprogramItemValidationError{}

// Validate checks the field values on AdStrategy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdStrategyMultiError, or
// nil if none found.
func (m *AdStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ConversionType

	if m.Landing != nil {

		if all {
			switch v := interface{}(m.GetLanding()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Landing",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Landing",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLanding()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Landing",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.App != nil {

		if all {
			switch v := interface{}(m.GetApp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Miniprogram != nil {

		if all {
			switch v := interface{}(m.GetMiniprogram()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Miniprogram",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Miniprogram",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMiniprogram()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Miniprogram",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Jumpminiprogram != nil {

		if all {
			switch v := interface{}(m.GetJumpminiprogram()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Jumpminiprogram",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Jumpminiprogram",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJumpminiprogram()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Jumpminiprogram",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Miniprogramgroup != nil {

		if all {
			switch v := interface{}(m.GetMiniprogramgroup()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Miniprogramgroup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Miniprogramgroup",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMiniprogramgroup()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Miniprogramgroup",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SchemaForm != nil {

		if all {
			switch v := interface{}(m.GetSchemaForm()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "SchemaForm",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "SchemaForm",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchemaForm()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "SchemaForm",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Pingduoduo != nil {

		if all {
			switch v := interface{}(m.GetPingduoduo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Pingduoduo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Pingduoduo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPingduoduo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Pingduoduo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Jdunion != nil {

		if all {
			switch v := interface{}(m.GetJdunion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Jdunion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Jdunion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJdunion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Jdunion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Zop != nil {

		if all {
			switch v := interface{}(m.GetZop()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Zop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Zop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetZop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Zop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Sinon != nil {

		if all {
			switch v := interface{}(m.GetSinon()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Sinon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Sinon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSinon()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Sinon",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Huoke != nil {

		if all {
			switch v := interface{}(m.GetHuoke()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Huoke",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategyValidationError{
						field:  "Huoke",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHuoke()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategyValidationError{
					field:  "Huoke",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdStrategyMultiError(errors)
	}

	return nil
}

// AdStrategyMultiError is an error wrapping multiple validation errors
// returned by AdStrategy.ValidateAll() if the designated constraints aren't met.
type AdStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategyMultiError) AllErrors() []error { return m }

// AdStrategyValidationError is the validation error returned by
// AdStrategy.Validate if the designated constraints aren't met.
type AdStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategyValidationError) ErrorName() string { return "AdStrategyValidationError" }

// Error satisfies the builtin error interface
func (e AdStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategyValidationError{}

// Validate checks the field values on AdStrategy_Landing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_Landing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_Landing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_LandingMultiError, or nil if none found.
func (m *AdStrategy_Landing) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_Landing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_LandingValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_LandingValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_LandingValidationError{
					field:  fmt.Sprintf("Urls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdStrategy_LandingMultiError(errors)
	}

	return nil
}

// AdStrategy_LandingMultiError is an error wrapping multiple validation errors
// returned by AdStrategy_Landing.ValidateAll() if the designated constraints
// aren't met.
type AdStrategy_LandingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_LandingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_LandingMultiError) AllErrors() []error { return m }

// AdStrategy_LandingValidationError is the validation error returned by
// AdStrategy_Landing.Validate if the designated constraints aren't met.
type AdStrategy_LandingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_LandingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_LandingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_LandingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_LandingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_LandingValidationError) ErrorName() string {
	return "AdStrategy_LandingValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_LandingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_Landing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_LandingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_LandingValidationError{}

// Validate checks the field values on AdStrategy_App with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_App with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdStrategy_AppMultiError,
// or nil if none found.
func (m *AdStrategy_App) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAndroid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdStrategy_AppValidationError{
					field:  "Android",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdStrategy_AppValidationError{
					field:  "Android",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAndroid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdStrategy_AppValidationError{
				field:  "Android",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdStrategy_AppValidationError{
					field:  "Ios",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdStrategy_AppValidationError{
					field:  "Ios",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdStrategy_AppValidationError{
				field:  "Ios",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdStrategy_AppMultiError(errors)
	}

	return nil
}

// AdStrategy_AppMultiError is an error wrapping multiple validation errors
// returned by AdStrategy_App.ValidateAll() if the designated constraints
// aren't met.
type AdStrategy_AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_AppMultiError) AllErrors() []error { return m }

// AdStrategy_AppValidationError is the validation error returned by
// AdStrategy_App.Validate if the designated constraints aren't met.
type AdStrategy_AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_AppValidationError) ErrorName() string { return "AdStrategy_AppValidationError" }

// Error satisfies the builtin error interface
func (e AdStrategy_AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_App.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_AppValidationError{}

// Validate checks the field values on AdStrategy_Miniprogram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_Miniprogram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_Miniprogram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_MiniprogramMultiError, or nil if none found.
func (m *AdStrategy_Miniprogram) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_Miniprogram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWeixin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdStrategy_MiniprogramValidationError{
					field:  "Weixin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdStrategy_MiniprogramValidationError{
					field:  "Weixin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWeixin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdStrategy_MiniprogramValidationError{
				field:  "Weixin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdStrategy_MiniprogramMultiError(errors)
	}

	return nil
}

// AdStrategy_MiniprogramMultiError is an error wrapping multiple validation
// errors returned by AdStrategy_Miniprogram.ValidateAll() if the designated
// constraints aren't met.
type AdStrategy_MiniprogramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_MiniprogramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_MiniprogramMultiError) AllErrors() []error { return m }

// AdStrategy_MiniprogramValidationError is the validation error returned by
// AdStrategy_Miniprogram.Validate if the designated constraints aren't met.
type AdStrategy_MiniprogramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_MiniprogramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_MiniprogramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_MiniprogramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_MiniprogramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_MiniprogramValidationError) ErrorName() string {
	return "AdStrategy_MiniprogramValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_MiniprogramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_Miniprogram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_MiniprogramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_MiniprogramValidationError{}

// Validate checks the field values on AdStrategy_JumpMiniprogram with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_JumpMiniprogram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_JumpMiniprogram with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_JumpMiniprogramMultiError, or nil if none found.
func (m *AdStrategy_JumpMiniprogram) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_JumpMiniprogram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_JumpMiniprogramValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_JumpMiniprogramValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_JumpMiniprogramValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetWeixin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdStrategy_JumpMiniprogramValidationError{
					field:  "Weixin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdStrategy_JumpMiniprogramValidationError{
					field:  "Weixin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWeixin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdStrategy_JumpMiniprogramValidationError{
				field:  "Weixin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdStrategy_JumpMiniprogramMultiError(errors)
	}

	return nil
}

// AdStrategy_JumpMiniprogramMultiError is an error wrapping multiple
// validation errors returned by AdStrategy_JumpMiniprogram.ValidateAll() if
// the designated constraints aren't met.
type AdStrategy_JumpMiniprogramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_JumpMiniprogramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_JumpMiniprogramMultiError) AllErrors() []error { return m }

// AdStrategy_JumpMiniprogramValidationError is the validation error returned
// by AdStrategy_JumpMiniprogram.Validate if the designated constraints aren't met.
type AdStrategy_JumpMiniprogramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_JumpMiniprogramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_JumpMiniprogramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_JumpMiniprogramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_JumpMiniprogramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_JumpMiniprogramValidationError) ErrorName() string {
	return "AdStrategy_JumpMiniprogramValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_JumpMiniprogramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_JumpMiniprogram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_JumpMiniprogramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_JumpMiniprogramValidationError{}

// Validate checks the field values on AdStrategy_MiniprogramGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_MiniprogramGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_MiniprogramGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_MiniprogramGroupMultiError, or nil if none found.
func (m *AdStrategy_MiniprogramGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_MiniprogramGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_MiniprogramGroupValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_MiniprogramGroupValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_MiniprogramGroupValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMiniprograms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_MiniprogramGroupValidationError{
						field:  fmt.Sprintf("Miniprograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_MiniprogramGroupValidationError{
						field:  fmt.Sprintf("Miniprograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_MiniprogramGroupValidationError{
					field:  fmt.Sprintf("Miniprograms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Path

	// no validation rules for NotThrid

	if len(errors) > 0 {
		return AdStrategy_MiniprogramGroupMultiError(errors)
	}

	return nil
}

// AdStrategy_MiniprogramGroupMultiError is an error wrapping multiple
// validation errors returned by AdStrategy_MiniprogramGroup.ValidateAll() if
// the designated constraints aren't met.
type AdStrategy_MiniprogramGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_MiniprogramGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_MiniprogramGroupMultiError) AllErrors() []error { return m }

// AdStrategy_MiniprogramGroupValidationError is the validation error returned
// by AdStrategy_MiniprogramGroup.Validate if the designated constraints
// aren't met.
type AdStrategy_MiniprogramGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_MiniprogramGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_MiniprogramGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_MiniprogramGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_MiniprogramGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_MiniprogramGroupValidationError) ErrorName() string {
	return "AdStrategy_MiniprogramGroupValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_MiniprogramGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_MiniprogramGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_MiniprogramGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_MiniprogramGroupValidationError{}

// Validate checks the field values on AdStrategy_SchemaForm with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_SchemaForm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_SchemaForm with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_SchemaFormMultiError, or nil if none found.
func (m *AdStrategy_SchemaForm) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_SchemaForm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_SchemaFormValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_SchemaFormValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_SchemaFormValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SchemaId

	// no validation rules for JsonSchema

	if len(errors) > 0 {
		return AdStrategy_SchemaFormMultiError(errors)
	}

	return nil
}

// AdStrategy_SchemaFormMultiError is an error wrapping multiple validation
// errors returned by AdStrategy_SchemaForm.ValidateAll() if the designated
// constraints aren't met.
type AdStrategy_SchemaFormMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_SchemaFormMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_SchemaFormMultiError) AllErrors() []error { return m }

// AdStrategy_SchemaFormValidationError is the validation error returned by
// AdStrategy_SchemaForm.Validate if the designated constraints aren't met.
type AdStrategy_SchemaFormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_SchemaFormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_SchemaFormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_SchemaFormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_SchemaFormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_SchemaFormValidationError) ErrorName() string {
	return "AdStrategy_SchemaFormValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_SchemaFormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_SchemaForm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_SchemaFormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_SchemaFormValidationError{}

// Validate checks the field values on AdStrategy_PingduoduoProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_PingduoduoProduct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_PingduoduoProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_PingduoduoProductMultiError, or nil if none found.
func (m *AdStrategy_PingduoduoProduct) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_PingduoduoProduct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_PingduoduoProductValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_PingduoduoProductValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_PingduoduoProductValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GoodsSign

	// no validation rules for Pid

	// no validation rules for AccountId

	// no validation rules for Params

	if len(errors) > 0 {
		return AdStrategy_PingduoduoProductMultiError(errors)
	}

	return nil
}

// AdStrategy_PingduoduoProductMultiError is an error wrapping multiple
// validation errors returned by AdStrategy_PingduoduoProduct.ValidateAll() if
// the designated constraints aren't met.
type AdStrategy_PingduoduoProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_PingduoduoProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_PingduoduoProductMultiError) AllErrors() []error { return m }

// AdStrategy_PingduoduoProductValidationError is the validation error returned
// by AdStrategy_PingduoduoProduct.Validate if the designated constraints
// aren't met.
type AdStrategy_PingduoduoProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_PingduoduoProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_PingduoduoProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_PingduoduoProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_PingduoduoProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_PingduoduoProductValidationError) ErrorName() string {
	return "AdStrategy_PingduoduoProductValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_PingduoduoProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_PingduoduoProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_PingduoduoProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_PingduoduoProductValidationError{}

// Validate checks the field values on AdStrategy_JDUnion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_JDUnion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_JDUnion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_JDUnionMultiError, or nil if none found.
func (m *AdStrategy_JDUnion) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_JDUnion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skuid

	// no validation rules for Url

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_JDUnionValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_JDUnionValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_JDUnionValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMiniprograms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_JDUnionValidationError{
						field:  fmt.Sprintf("Miniprograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_JDUnionValidationError{
						field:  fmt.Sprintf("Miniprograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_JDUnionValidationError{
					field:  fmt.Sprintf("Miniprograms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Path

	// no validation rules for Pid

	// no validation rules for PromotoImageUrl

	// no validation rules for Params

	if len(errors) > 0 {
		return AdStrategy_JDUnionMultiError(errors)
	}

	return nil
}

// AdStrategy_JDUnionMultiError is an error wrapping multiple validation errors
// returned by AdStrategy_JDUnion.ValidateAll() if the designated constraints
// aren't met.
type AdStrategy_JDUnionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_JDUnionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_JDUnionMultiError) AllErrors() []error { return m }

// AdStrategy_JDUnionValidationError is the validation error returned by
// AdStrategy_JDUnion.Validate if the designated constraints aren't met.
type AdStrategy_JDUnionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_JDUnionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_JDUnionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_JDUnionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_JDUnionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_JDUnionValidationError) ErrorName() string {
	return "AdStrategy_JDUnionValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_JDUnionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_JDUnion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_JDUnionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_JDUnionValidationError{}

// Validate checks the field values on AdStrategy_Zop with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_Zop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_Zop with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdStrategy_ZopMultiError,
// or nil if none found.
func (m *AdStrategy_Zop) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_Zop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_ZopValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_ZopValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_ZopValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return AdStrategy_ZopMultiError(errors)
	}

	return nil
}

// AdStrategy_ZopMultiError is an error wrapping multiple validation errors
// returned by AdStrategy_Zop.ValidateAll() if the designated constraints
// aren't met.
type AdStrategy_ZopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_ZopMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_ZopMultiError) AllErrors() []error { return m }

// AdStrategy_ZopValidationError is the validation error returned by
// AdStrategy_Zop.Validate if the designated constraints aren't met.
type AdStrategy_ZopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_ZopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_ZopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_ZopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_ZopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_ZopValidationError) ErrorName() string { return "AdStrategy_ZopValidationError" }

// Error satisfies the builtin error interface
func (e AdStrategy_ZopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_Zop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_ZopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_ZopValidationError{}

// Validate checks the field values on AdStrategy_Sinon with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_Sinon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_Sinon with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_SinonMultiError, or nil if none found.
func (m *AdStrategy_Sinon) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_Sinon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_SinonValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_SinonValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_SinonValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ReturnUrl

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return AdStrategy_SinonMultiError(errors)
	}

	return nil
}

// AdStrategy_SinonMultiError is an error wrapping multiple validation errors
// returned by AdStrategy_Sinon.ValidateAll() if the designated constraints
// aren't met.
type AdStrategy_SinonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_SinonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_SinonMultiError) AllErrors() []error { return m }

// AdStrategy_SinonValidationError is the validation error returned by
// AdStrategy_Sinon.Validate if the designated constraints aren't met.
type AdStrategy_SinonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_SinonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_SinonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_SinonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_SinonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_SinonValidationError) ErrorName() string { return "AdStrategy_SinonValidationError" }

// Error satisfies the builtin error interface
func (e AdStrategy_SinonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_Sinon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_SinonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_SinonValidationError{}

// Validate checks the field values on AdStrategy_Huoke with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_Huoke) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_Huoke with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_HuokeMultiError, or nil if none found.
func (m *AdStrategy_Huoke) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_Huoke) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLandingUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_HuokeValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_HuokeValidationError{
						field:  fmt.Sprintf("LandingUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_HuokeValidationError{
					field:  fmt.Sprintf("LandingUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHuokeUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdStrategy_HuokeValidationError{
						field:  fmt.Sprintf("HuokeUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdStrategy_HuokeValidationError{
						field:  fmt.Sprintf("HuokeUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdStrategy_HuokeValidationError{
					field:  fmt.Sprintf("HuokeUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return AdStrategy_HuokeMultiError(errors)
	}

	return nil
}

// AdStrategy_HuokeMultiError is an error wrapping multiple validation errors
// returned by AdStrategy_Huoke.ValidateAll() if the designated constraints
// aren't met.
type AdStrategy_HuokeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_HuokeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_HuokeMultiError) AllErrors() []error { return m }

// AdStrategy_HuokeValidationError is the validation error returned by
// AdStrategy_Huoke.Validate if the designated constraints aren't met.
type AdStrategy_HuokeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_HuokeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_HuokeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_HuokeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_HuokeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_HuokeValidationError) ErrorName() string { return "AdStrategy_HuokeValidationError" }

// Error satisfies the builtin error interface
func (e AdStrategy_HuokeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_Huoke.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_HuokeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_HuokeValidationError{}

// Validate checks the field values on AdStrategy_App_Android with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_App_Android) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_App_Android with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_App_AndroidMultiError, or nil if none found.
func (m *AdStrategy_App_Android) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_App_Android) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BundleId

	if len(errors) > 0 {
		return AdStrategy_App_AndroidMultiError(errors)
	}

	return nil
}

// AdStrategy_App_AndroidMultiError is an error wrapping multiple validation
// errors returned by AdStrategy_App_Android.ValidateAll() if the designated
// constraints aren't met.
type AdStrategy_App_AndroidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_App_AndroidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_App_AndroidMultiError) AllErrors() []error { return m }

// AdStrategy_App_AndroidValidationError is the validation error returned by
// AdStrategy_App_Android.Validate if the designated constraints aren't met.
type AdStrategy_App_AndroidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_App_AndroidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_App_AndroidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_App_AndroidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_App_AndroidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_App_AndroidValidationError) ErrorName() string {
	return "AdStrategy_App_AndroidValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_App_AndroidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_App_Android.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_App_AndroidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_App_AndroidValidationError{}

// Validate checks the field values on AdStrategy_App_Ios with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_App_Ios) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_App_Ios with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdStrategy_App_IosMultiError, or nil if none found.
func (m *AdStrategy_App_Ios) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_App_Ios) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BundleId

	if len(errors) > 0 {
		return AdStrategy_App_IosMultiError(errors)
	}

	return nil
}

// AdStrategy_App_IosMultiError is an error wrapping multiple validation errors
// returned by AdStrategy_App_Ios.ValidateAll() if the designated constraints
// aren't met.
type AdStrategy_App_IosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_App_IosMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_App_IosMultiError) AllErrors() []error { return m }

// AdStrategy_App_IosValidationError is the validation error returned by
// AdStrategy_App_Ios.Validate if the designated constraints aren't met.
type AdStrategy_App_IosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_App_IosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_App_IosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_App_IosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_App_IosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_App_IosValidationError) ErrorName() string {
	return "AdStrategy_App_IosValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_App_IosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_App_Ios.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_App_IosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_App_IosValidationError{}

// Validate checks the field values on AdStrategy_Miniprogram_Weixin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdStrategy_Miniprogram_Weixin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_Miniprogram_Weixin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdStrategy_Miniprogram_WeixinMultiError, or nil if none found.
func (m *AdStrategy_Miniprogram_Weixin) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_Miniprogram_Weixin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for Path

	if len(errors) > 0 {
		return AdStrategy_Miniprogram_WeixinMultiError(errors)
	}

	return nil
}

// AdStrategy_Miniprogram_WeixinMultiError is an error wrapping multiple
// validation errors returned by AdStrategy_Miniprogram_Weixin.ValidateAll()
// if the designated constraints aren't met.
type AdStrategy_Miniprogram_WeixinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_Miniprogram_WeixinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_Miniprogram_WeixinMultiError) AllErrors() []error { return m }

// AdStrategy_Miniprogram_WeixinValidationError is the validation error
// returned by AdStrategy_Miniprogram_Weixin.Validate if the designated
// constraints aren't met.
type AdStrategy_Miniprogram_WeixinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_Miniprogram_WeixinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_Miniprogram_WeixinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_Miniprogram_WeixinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_Miniprogram_WeixinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_Miniprogram_WeixinValidationError) ErrorName() string {
	return "AdStrategy_Miniprogram_WeixinValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_Miniprogram_WeixinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_Miniprogram_Weixin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_Miniprogram_WeixinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_Miniprogram_WeixinValidationError{}

// Validate checks the field values on AdStrategy_JumpMiniprogram_Weixin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdStrategy_JumpMiniprogram_Weixin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdStrategy_JumpMiniprogram_Weixin
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdStrategy_JumpMiniprogram_WeixinMultiError, or nil if none found.
func (m *AdStrategy_JumpMiniprogram_Weixin) ValidateAll() error {
	return m.validate(true)
}

func (m *AdStrategy_JumpMiniprogram_Weixin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for Path

	// no validation rules for AccessToken

	if all {
		switch v := interface{}(m.GetAccessTokenExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdStrategy_JumpMiniprogram_WeixinValidationError{
					field:  "AccessTokenExpires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdStrategy_JumpMiniprogram_WeixinValidationError{
					field:  "AccessTokenExpires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessTokenExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdStrategy_JumpMiniprogram_WeixinValidationError{
				field:  "AccessTokenExpires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdStrategy_JumpMiniprogram_WeixinMultiError(errors)
	}

	return nil
}

// AdStrategy_JumpMiniprogram_WeixinMultiError is an error wrapping multiple
// validation errors returned by
// AdStrategy_JumpMiniprogram_Weixin.ValidateAll() if the designated
// constraints aren't met.
type AdStrategy_JumpMiniprogram_WeixinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdStrategy_JumpMiniprogram_WeixinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdStrategy_JumpMiniprogram_WeixinMultiError) AllErrors() []error { return m }

// AdStrategy_JumpMiniprogram_WeixinValidationError is the validation error
// returned by AdStrategy_JumpMiniprogram_Weixin.Validate if the designated
// constraints aren't met.
type AdStrategy_JumpMiniprogram_WeixinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdStrategy_JumpMiniprogram_WeixinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdStrategy_JumpMiniprogram_WeixinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdStrategy_JumpMiniprogram_WeixinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdStrategy_JumpMiniprogram_WeixinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdStrategy_JumpMiniprogram_WeixinValidationError) ErrorName() string {
	return "AdStrategy_JumpMiniprogram_WeixinValidationError"
}

// Error satisfies the builtin error interface
func (e AdStrategy_JumpMiniprogram_WeixinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdStrategy_JumpMiniprogram_Weixin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdStrategy_JumpMiniprogram_WeixinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdStrategy_JumpMiniprogram_WeixinValidationError{}
