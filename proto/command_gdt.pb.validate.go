// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: command_gdt.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImportGdtAdsCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportGdtAdsCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportGdtAdsCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportGdtAdsCommandMultiError, or nil if none found.
func (m *ImportGdtAdsCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportGdtAdsCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportGdtAdsCommandValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportGdtAdsCommandValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportGdtAdsCommandValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportGdtAdsCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportGdtAdsCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportGdtAdsCommandValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ToEnterprise

	if len(errors) > 0 {
		return ImportGdtAdsCommandMultiError(errors)
	}

	return nil
}

// ImportGdtAdsCommandMultiError is an error wrapping multiple validation
// errors returned by ImportGdtAdsCommand.ValidateAll() if the designated
// constraints aren't met.
type ImportGdtAdsCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportGdtAdsCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportGdtAdsCommandMultiError) AllErrors() []error { return m }

// ImportGdtAdsCommandValidationError is the validation error returned by
// ImportGdtAdsCommand.Validate if the designated constraints aren't met.
type ImportGdtAdsCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportGdtAdsCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportGdtAdsCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportGdtAdsCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportGdtAdsCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportGdtAdsCommandValidationError) ErrorName() string {
	return "ImportGdtAdsCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ImportGdtAdsCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportGdtAdsCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportGdtAdsCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportGdtAdsCommandValidationError{}

// Validate checks the field values on ImportGdtAdgroupsCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportGdtAdgroupsCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportGdtAdgroupsCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportGdtAdgroupsCommandMultiError, or nil if none found.
func (m *ImportGdtAdgroupsCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportGdtAdgroupsCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportGdtAdgroupsCommandValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportGdtAdgroupsCommandValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportGdtAdgroupsCommandValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportGdtAdgroupsCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportGdtAdgroupsCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportGdtAdgroupsCommandValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportGdtAdgroupsCommandValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportGdtAdgroupsCommandValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportGdtAdgroupsCommandValidationError{
					field:  fmt.Sprintf("Ads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ToEnterprise

	if len(errors) > 0 {
		return ImportGdtAdgroupsCommandMultiError(errors)
	}

	return nil
}

// ImportGdtAdgroupsCommandMultiError is an error wrapping multiple validation
// errors returned by ImportGdtAdgroupsCommand.ValidateAll() if the designated
// constraints aren't met.
type ImportGdtAdgroupsCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportGdtAdgroupsCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportGdtAdgroupsCommandMultiError) AllErrors() []error { return m }

// ImportGdtAdgroupsCommandValidationError is the validation error returned by
// ImportGdtAdgroupsCommand.Validate if the designated constraints aren't met.
type ImportGdtAdgroupsCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportGdtAdgroupsCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportGdtAdgroupsCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportGdtAdgroupsCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportGdtAdgroupsCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportGdtAdgroupsCommandValidationError) ErrorName() string {
	return "ImportGdtAdgroupsCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ImportGdtAdgroupsCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportGdtAdgroupsCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportGdtAdgroupsCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportGdtAdgroupsCommandValidationError{}

// Validate checks the field values on ImportGdtConversionsCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportGdtConversionsCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportGdtConversionsCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportGdtConversionsCommandMultiError, or nil if none found.
func (m *ImportGdtConversionsCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportGdtConversionsCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportGdtConversionsCommandValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportGdtConversionsCommandValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportGdtConversionsCommandValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportGdtConversionsCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportGdtConversionsCommandValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportGdtConversionsCommandValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAdgroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportGdtConversionsCommandValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportGdtConversionsCommandValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportGdtConversionsCommandValidationError{
					field:  fmt.Sprintf("Adgroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportGdtConversionsCommandMultiError(errors)
	}

	return nil
}

// ImportGdtConversionsCommandMultiError is an error wrapping multiple
// validation errors returned by ImportGdtConversionsCommand.ValidateAll() if
// the designated constraints aren't met.
type ImportGdtConversionsCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportGdtConversionsCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportGdtConversionsCommandMultiError) AllErrors() []error { return m }

// ImportGdtConversionsCommandValidationError is the validation error returned
// by ImportGdtConversionsCommand.Validate if the designated constraints
// aren't met.
type ImportGdtConversionsCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportGdtConversionsCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportGdtConversionsCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportGdtConversionsCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportGdtConversionsCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportGdtConversionsCommandValidationError) ErrorName() string {
	return "ImportGdtConversionsCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ImportGdtConversionsCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportGdtConversionsCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportGdtConversionsCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportGdtConversionsCommandValidationError{}

// Validate checks the field values on AssignEnterpriseAccountsCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignEnterpriseAccountsCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignEnterpriseAccountsCommand with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignEnterpriseAccountsCommandMultiError, or nil if none found.
func (m *AssignEnterpriseAccountsCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignEnterpriseAccountsCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssignEnterpriseAccountsCommandValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssignEnterpriseAccountsCommandValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssignEnterpriseAccountsCommandValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssignEnterpriseAccountsCommandMultiError(errors)
	}

	return nil
}

// AssignEnterpriseAccountsCommandMultiError is an error wrapping multiple
// validation errors returned by AssignEnterpriseAccountsCommand.ValidateAll()
// if the designated constraints aren't met.
type AssignEnterpriseAccountsCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignEnterpriseAccountsCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignEnterpriseAccountsCommandMultiError) AllErrors() []error { return m }

// AssignEnterpriseAccountsCommandValidationError is the validation error
// returned by AssignEnterpriseAccountsCommand.Validate if the designated
// constraints aren't met.
type AssignEnterpriseAccountsCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignEnterpriseAccountsCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignEnterpriseAccountsCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignEnterpriseAccountsCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignEnterpriseAccountsCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignEnterpriseAccountsCommandValidationError) ErrorName() string {
	return "AssignEnterpriseAccountsCommandValidationError"
}

// Error satisfies the builtin error interface
func (e AssignEnterpriseAccountsCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignEnterpriseAccountsCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignEnterpriseAccountsCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignEnterpriseAccountsCommandValidationError{}

// Validate checks the field values on AssignEnterpriseAdsCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignEnterpriseAdsCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignEnterpriseAdsCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignEnterpriseAdsCommandMultiError, or nil if none found.
func (m *AssignEnterpriseAdsCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignEnterpriseAdsCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	for idx, item := range m.GetAds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssignEnterpriseAdsCommandValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssignEnterpriseAdsCommandValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssignEnterpriseAdsCommandValidationError{
					field:  fmt.Sprintf("Ads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssignEnterpriseAdsCommandMultiError(errors)
	}

	return nil
}

// AssignEnterpriseAdsCommandMultiError is an error wrapping multiple
// validation errors returned by AssignEnterpriseAdsCommand.ValidateAll() if
// the designated constraints aren't met.
type AssignEnterpriseAdsCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignEnterpriseAdsCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignEnterpriseAdsCommandMultiError) AllErrors() []error { return m }

// AssignEnterpriseAdsCommandValidationError is the validation error returned
// by AssignEnterpriseAdsCommand.Validate if the designated constraints aren't met.
type AssignEnterpriseAdsCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignEnterpriseAdsCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignEnterpriseAdsCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignEnterpriseAdsCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignEnterpriseAdsCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignEnterpriseAdsCommandValidationError) ErrorName() string {
	return "AssignEnterpriseAdsCommandValidationError"
}

// Error satisfies the builtin error interface
func (e AssignEnterpriseAdsCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignEnterpriseAdsCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignEnterpriseAdsCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignEnterpriseAdsCommandValidationError{}

// Validate checks the field values on AssignEnterpriseAdgroupsCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignEnterpriseAdgroupsCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignEnterpriseAdgroupsCommand with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignEnterpriseAdgroupsCommandMultiError, or nil if none found.
func (m *AssignEnterpriseAdgroupsCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignEnterpriseAdgroupsCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	for idx, item := range m.GetAdgroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssignEnterpriseAdgroupsCommandValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssignEnterpriseAdgroupsCommandValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssignEnterpriseAdgroupsCommandValidationError{
					field:  fmt.Sprintf("Adgroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssignEnterpriseAdgroupsCommandMultiError(errors)
	}

	return nil
}

// AssignEnterpriseAdgroupsCommandMultiError is an error wrapping multiple
// validation errors returned by AssignEnterpriseAdgroupsCommand.ValidateAll()
// if the designated constraints aren't met.
type AssignEnterpriseAdgroupsCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignEnterpriseAdgroupsCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignEnterpriseAdgroupsCommandMultiError) AllErrors() []error { return m }

// AssignEnterpriseAdgroupsCommandValidationError is the validation error
// returned by AssignEnterpriseAdgroupsCommand.Validate if the designated
// constraints aren't met.
type AssignEnterpriseAdgroupsCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignEnterpriseAdgroupsCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignEnterpriseAdgroupsCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignEnterpriseAdgroupsCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignEnterpriseAdgroupsCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignEnterpriseAdgroupsCommandValidationError) ErrorName() string {
	return "AssignEnterpriseAdgroupsCommandValidationError"
}

// Error satisfies the builtin error interface
func (e AssignEnterpriseAdgroupsCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignEnterpriseAdgroupsCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignEnterpriseAdgroupsCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignEnterpriseAdgroupsCommandValidationError{}

// Validate checks the field values on GdtAD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GdtAD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GdtADMultiError, or nil if none found.
func (m *GdtAD) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdId

	// no validation rules for AdName

	if all {
		switch v := interface{}(m.GetAdcreative()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GdtADValidationError{
					field:  "Adcreative",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GdtADValidationError{
					field:  "Adcreative",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdcreative()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GdtADValidationError{
				field:  "Adcreative",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AdcreativeId

	// no validation rules for AdgroupId

	// no validation rules for CampaignId

	// no validation rules for ClickTrackingUrl

	// no validation rules for ConfiguredStatus

	// no validation rules for CreatedTime

	// no validation rules for ImpressionTrackingUrl

	// no validation rules for IsDeleted

	// no validation rules for IsDynamicCreative

	// no validation rules for LastModifiedTime

	// no validation rules for RejectMessage

	// no validation rules for SystemStatus

	if len(errors) > 0 {
		return GdtADMultiError(errors)
	}

	return nil
}

// GdtADMultiError is an error wrapping multiple validation errors returned by
// GdtAD.ValidateAll() if the designated constraints aren't met.
type GdtADMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtADMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtADMultiError) AllErrors() []error { return m }

// GdtADValidationError is the validation error returned by GdtAD.Validate if
// the designated constraints aren't met.
type GdtADValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtADValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtADValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtADValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtADValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtADValidationError) ErrorName() string { return "GdtADValidationError" }

// Error satisfies the builtin error interface
func (e GdtADValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtADValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtADValidationError{}

// Validate checks the field values on ReceivedGdtAdsEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceivedGdtAdsEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivedGdtAdsEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivedGdtAdsEventMultiError, or nil if none found.
func (m *ReceivedGdtAdsEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivedGdtAdsEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceivedGdtAdsEventValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceivedGdtAdsEventValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceivedGdtAdsEventValidationError{
					field:  fmt.Sprintf("Ads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedGdtAdsEventValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedGdtAdsEventValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedGdtAdsEventValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ToEnterprise

	if len(errors) > 0 {
		return ReceivedGdtAdsEventMultiError(errors)
	}

	return nil
}

// ReceivedGdtAdsEventMultiError is an error wrapping multiple validation
// errors returned by ReceivedGdtAdsEvent.ValidateAll() if the designated
// constraints aren't met.
type ReceivedGdtAdsEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivedGdtAdsEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivedGdtAdsEventMultiError) AllErrors() []error { return m }

// ReceivedGdtAdsEventValidationError is the validation error returned by
// ReceivedGdtAdsEvent.Validate if the designated constraints aren't met.
type ReceivedGdtAdsEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivedGdtAdsEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivedGdtAdsEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivedGdtAdsEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivedGdtAdsEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivedGdtAdsEventValidationError) ErrorName() string {
	return "ReceivedGdtAdsEventValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivedGdtAdsEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivedGdtAdsEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivedGdtAdsEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivedGdtAdsEventValidationError{}

// Validate checks the field values on GdtConversion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GdtConversion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtConversion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GdtConversionMultiError, or
// nil if none found.
func (m *GdtConversion) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtConversion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessStatus

	// no validation rules for AccessType

	// no validation rules for ClaimType

	// no validation rules for ConversionId

	// no validation rules for ConversionLinkId

	// no validation rules for ConversionName

	// no validation rules for ConversionScene

	// no validation rules for CreateSourceType

	// no validation rules for FeedbackUrl

	// no validation rules for ImpressionFeedbackUrl

	// no validation rules for IsDeleted

	// no validation rules for OptimizationGoal

	// no validation rules for PromotedObjectId

	// no validation rules for SelfAttributed

	// no validation rules for SiteSetEnable

	// no validation rules for UserActionSetId

	if len(errors) > 0 {
		return GdtConversionMultiError(errors)
	}

	return nil
}

// GdtConversionMultiError is an error wrapping multiple validation errors
// returned by GdtConversion.ValidateAll() if the designated constraints
// aren't met.
type GdtConversionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtConversionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtConversionMultiError) AllErrors() []error { return m }

// GdtConversionValidationError is the validation error returned by
// GdtConversion.Validate if the designated constraints aren't met.
type GdtConversionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtConversionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtConversionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtConversionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtConversionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtConversionValidationError) ErrorName() string { return "GdtConversionValidationError" }

// Error satisfies the builtin error interface
func (e GdtConversionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtConversion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtConversionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtConversionValidationError{}

// Validate checks the field values on GdtAdgroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GdtAdgroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAdgroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GdtAdgroupMultiError, or
// nil if none found.
func (m *GdtAdgroup) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAdgroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdCount

	// no validation rules for AdgroupId

	// no validation rules for AdgroupName

	// no validation rules for AutomaticSiteEnabled

	// no validation rules for BeginDate

	// no validation rules for BidAmount

	// no validation rules for BidMode

	// no validation rules for BidStrategy

	// no validation rules for CampaignId

	// no validation rules for ConfiguredStatus

	// no validation rules for ConversionId

	if all {
		switch v := interface{}(m.GetConversion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GdtAdgroupValidationError{
					field:  "Conversion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GdtAdgroupValidationError{
					field:  "Conversion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GdtAdgroupValidationError{
				field:  "Conversion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CostGuaranteeMessage

	// no validation rules for CostGuaranteeStatus

	// no validation rules for CreatedTime

	// no validation rules for DailyBudget

	// no validation rules for EndDate

	// no validation rules for ExpandEnabled

	for idx, item := range m.GetExpandTargeting() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GdtAdgroupValidationError{
						field:  fmt.Sprintf("ExpandTargeting[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GdtAdgroupValidationError{
						field:  fmt.Sprintf("ExpandTargeting[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GdtAdgroupValidationError{
					field:  fmt.Sprintf("ExpandTargeting[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LastModifiedTime

	// no validation rules for OptimizationGoal

	// no validation rules for PromotedObjectType

	// no validation rules for Status

	// no validation rules for SystemStatus

	if all {
		switch v := interface{}(m.GetTargeting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GdtAdgroupValidationError{
					field:  "Targeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GdtAdgroupValidationError{
					field:  "Targeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GdtAdgroupValidationError{
				field:  "Targeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TargetingId

	// no validation rules for TargetingTranslation

	// no validation rules for TimeSeries

	if len(errors) > 0 {
		return GdtAdgroupMultiError(errors)
	}

	return nil
}

// GdtAdgroupMultiError is an error wrapping multiple validation errors
// returned by GdtAdgroup.ValidateAll() if the designated constraints aren't met.
type GdtAdgroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAdgroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAdgroupMultiError) AllErrors() []error { return m }

// GdtAdgroupValidationError is the validation error returned by
// GdtAdgroup.Validate if the designated constraints aren't met.
type GdtAdgroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAdgroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAdgroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAdgroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAdgroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAdgroupValidationError) ErrorName() string { return "GdtAdgroupValidationError" }

// Error satisfies the builtin error interface
func (e GdtAdgroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAdgroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAdgroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAdgroupValidationError{}

// Validate checks the field values on ReceivedGdtAdgroupsEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceivedGdtAdgroupsEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivedGdtAdgroupsEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivedGdtAdgroupsEventMultiError, or nil if none found.
func (m *ReceivedGdtAdgroupsEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivedGdtAdgroupsEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	for idx, item := range m.GetAdgroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceivedGdtAdgroupsEventValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceivedGdtAdgroupsEventValidationError{
						field:  fmt.Sprintf("Adgroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceivedGdtAdgroupsEventValidationError{
					field:  fmt.Sprintf("Adgroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceivedGdtAdgroupsEventValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceivedGdtAdgroupsEventValidationError{
						field:  fmt.Sprintf("Ads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceivedGdtAdgroupsEventValidationError{
					field:  fmt.Sprintf("Ads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedGdtAdgroupsEventValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedGdtAdgroupsEventValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedGdtAdgroupsEventValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ToEnterprise

	if len(errors) > 0 {
		return ReceivedGdtAdgroupsEventMultiError(errors)
	}

	return nil
}

// ReceivedGdtAdgroupsEventMultiError is an error wrapping multiple validation
// errors returned by ReceivedGdtAdgroupsEvent.ValidateAll() if the designated
// constraints aren't met.
type ReceivedGdtAdgroupsEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivedGdtAdgroupsEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivedGdtAdgroupsEventMultiError) AllErrors() []error { return m }

// ReceivedGdtAdgroupsEventValidationError is the validation error returned by
// ReceivedGdtAdgroupsEvent.Validate if the designated constraints aren't met.
type ReceivedGdtAdgroupsEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivedGdtAdgroupsEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivedGdtAdgroupsEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivedGdtAdgroupsEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivedGdtAdgroupsEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivedGdtAdgroupsEventValidationError) ErrorName() string {
	return "ReceivedGdtAdgroupsEventValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivedGdtAdgroupsEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivedGdtAdgroupsEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivedGdtAdgroupsEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivedGdtAdgroupsEventValidationError{}

// Validate checks the field values on ReceivedGdtConversionsEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceivedGdtConversionsEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivedGdtConversionsEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceivedGdtConversionsEventMultiError, or nil if none found.
func (m *ReceivedGdtConversionsEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivedGdtConversionsEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	for idx, item := range m.GetAdgroupss() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceivedGdtConversionsEventValidationError{
						field:  fmt.Sprintf("Adgroupss[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceivedGdtConversionsEventValidationError{
						field:  fmt.Sprintf("Adgroupss[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceivedGdtConversionsEventValidationError{
					field:  fmt.Sprintf("Adgroupss[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedGdtConversionsEventValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedGdtConversionsEventValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedGdtConversionsEventValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConversions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceivedGdtConversionsEventValidationError{
						field:  fmt.Sprintf("Conversions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceivedGdtConversionsEventValidationError{
						field:  fmt.Sprintf("Conversions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceivedGdtConversionsEventValidationError{
					field:  fmt.Sprintf("Conversions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReceivedGdtConversionsEventMultiError(errors)
	}

	return nil
}

// ReceivedGdtConversionsEventMultiError is an error wrapping multiple
// validation errors returned by ReceivedGdtConversionsEvent.ValidateAll() if
// the designated constraints aren't met.
type ReceivedGdtConversionsEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivedGdtConversionsEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivedGdtConversionsEventMultiError) AllErrors() []error { return m }

// ReceivedGdtConversionsEventValidationError is the validation error returned
// by ReceivedGdtConversionsEvent.Validate if the designated constraints
// aren't met.
type ReceivedGdtConversionsEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivedGdtConversionsEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivedGdtConversionsEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivedGdtConversionsEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivedGdtConversionsEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivedGdtConversionsEventValidationError) ErrorName() string {
	return "ReceivedGdtConversionsEventValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivedGdtConversionsEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivedGdtConversionsEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivedGdtConversionsEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivedGdtConversionsEventValidationError{}

// Validate checks the field values on GdtAD_Brand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GdtAD_Brand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAD_Brand with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GdtAD_BrandMultiError, or
// nil if none found.
func (m *GdtAD_Brand) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAD_Brand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BrandImg

	// no validation rules for BrandName

	if len(errors) > 0 {
		return GdtAD_BrandMultiError(errors)
	}

	return nil
}

// GdtAD_BrandMultiError is an error wrapping multiple validation errors
// returned by GdtAD_Brand.ValidateAll() if the designated constraints aren't met.
type GdtAD_BrandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAD_BrandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAD_BrandMultiError) AllErrors() []error { return m }

// GdtAD_BrandValidationError is the validation error returned by
// GdtAD_Brand.Validate if the designated constraints aren't met.
type GdtAD_BrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAD_BrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAD_BrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAD_BrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAD_BrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAD_BrandValidationError) ErrorName() string { return "GdtAD_BrandValidationError" }

// Error satisfies the builtin error interface
func (e GdtAD_BrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAD_Brand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAD_BrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAD_BrandValidationError{}

// Validate checks the field values on GdtAD_AdcreativeElements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GdtAD_AdcreativeElements) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAD_AdcreativeElements with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GdtAD_AdcreativeElementsMultiError, or nil if none found.
func (m *GdtAD_AdcreativeElements) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAD_AdcreativeElements) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GdtAD_AdcreativeElementsValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GdtAD_AdcreativeElementsValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GdtAD_AdcreativeElementsValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for Image

	if len(errors) > 0 {
		return GdtAD_AdcreativeElementsMultiError(errors)
	}

	return nil
}

// GdtAD_AdcreativeElementsMultiError is an error wrapping multiple validation
// errors returned by GdtAD_AdcreativeElements.ValidateAll() if the designated
// constraints aren't met.
type GdtAD_AdcreativeElementsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAD_AdcreativeElementsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAD_AdcreativeElementsMultiError) AllErrors() []error { return m }

// GdtAD_AdcreativeElementsValidationError is the validation error returned by
// GdtAD_AdcreativeElements.Validate if the designated constraints aren't met.
type GdtAD_AdcreativeElementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAD_AdcreativeElementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAD_AdcreativeElementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAD_AdcreativeElementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAD_AdcreativeElementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAD_AdcreativeElementsValidationError) ErrorName() string {
	return "GdtAD_AdcreativeElementsValidationError"
}

// Error satisfies the builtin error interface
func (e GdtAD_AdcreativeElementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAD_AdcreativeElements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAD_AdcreativeElementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAD_AdcreativeElementsValidationError{}

// Validate checks the field values on GdtAD_PageSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GdtAD_PageSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAD_PageSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GdtAD_PageSpecMultiError,
// or nil if none found.
func (m *GdtAD_PageSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAD_PageSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageUrl

	// no validation rules for PageId

	if len(errors) > 0 {
		return GdtAD_PageSpecMultiError(errors)
	}

	return nil
}

// GdtAD_PageSpecMultiError is an error wrapping multiple validation errors
// returned by GdtAD_PageSpec.ValidateAll() if the designated constraints
// aren't met.
type GdtAD_PageSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAD_PageSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAD_PageSpecMultiError) AllErrors() []error { return m }

// GdtAD_PageSpecValidationError is the validation error returned by
// GdtAD_PageSpec.Validate if the designated constraints aren't met.
type GdtAD_PageSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAD_PageSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAD_PageSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAD_PageSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAD_PageSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAD_PageSpecValidationError) ErrorName() string { return "GdtAD_PageSpecValidationError" }

// Error satisfies the builtin error interface
func (e GdtAD_PageSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAD_PageSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAD_PageSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAD_PageSpecValidationError{}

// Validate checks the field values on GdtAD_Adcreative with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GdtAD_Adcreative) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAD_Adcreative with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GdtAD_AdcreativeMultiError, or nil if none found.
func (m *GdtAD_Adcreative) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAD_Adcreative) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdcreativeElements()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GdtAD_AdcreativeValidationError{
					field:  "AdcreativeElements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GdtAD_AdcreativeValidationError{
					field:  "AdcreativeElements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdcreativeElements()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GdtAD_AdcreativeValidationError{
				field:  "AdcreativeElements",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AdcreativeId

	// no validation rules for AdcreativeName

	// no validation rules for AdcreativeTemplateId

	// no validation rules for CampaignId

	// no validation rules for CreatedTime

	// no validation rules for CreativeTemplateCategory

	// no validation rules for EnableBreakthroughSiteset

	// no validation rules for LastModifiedTime

	if all {
		switch v := interface{}(m.GetPageSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GdtAD_AdcreativeValidationError{
					field:  "PageSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GdtAD_AdcreativeValidationError{
					field:  "PageSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GdtAD_AdcreativeValidationError{
				field:  "PageSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageType

	// no validation rules for PlayablePageMaterialId

	// no validation rules for PromotedObjectId

	// no validation rules for PromotedObjectType

	if len(errors) > 0 {
		return GdtAD_AdcreativeMultiError(errors)
	}

	return nil
}

// GdtAD_AdcreativeMultiError is an error wrapping multiple validation errors
// returned by GdtAD_Adcreative.ValidateAll() if the designated constraints
// aren't met.
type GdtAD_AdcreativeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAD_AdcreativeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAD_AdcreativeMultiError) AllErrors() []error { return m }

// GdtAD_AdcreativeValidationError is the validation error returned by
// GdtAD_Adcreative.Validate if the designated constraints aren't met.
type GdtAD_AdcreativeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAD_AdcreativeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAD_AdcreativeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAD_AdcreativeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAD_AdcreativeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAD_AdcreativeValidationError) ErrorName() string { return "GdtAD_AdcreativeValidationError" }

// Error satisfies the builtin error interface
func (e GdtAD_AdcreativeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAD_Adcreative.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAD_AdcreativeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAD_AdcreativeValidationError{}

// Validate checks the field values on GdtAdgroup_Age with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GdtAdgroup_Age) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAdgroup_Age with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GdtAdgroup_AgeMultiError,
// or nil if none found.
func (m *GdtAdgroup_Age) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAdgroup_Age) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	// no validation rules for Min

	if len(errors) > 0 {
		return GdtAdgroup_AgeMultiError(errors)
	}

	return nil
}

// GdtAdgroup_AgeMultiError is an error wrapping multiple validation errors
// returned by GdtAdgroup_Age.ValidateAll() if the designated constraints
// aren't met.
type GdtAdgroup_AgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAdgroup_AgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAdgroup_AgeMultiError) AllErrors() []error { return m }

// GdtAdgroup_AgeValidationError is the validation error returned by
// GdtAdgroup_Age.Validate if the designated constraints aren't met.
type GdtAdgroup_AgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAdgroup_AgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAdgroup_AgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAdgroup_AgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAdgroup_AgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAdgroup_AgeValidationError) ErrorName() string { return "GdtAdgroup_AgeValidationError" }

// Error satisfies the builtin error interface
func (e GdtAdgroup_AgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAdgroup_Age.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAdgroup_AgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAdgroup_AgeValidationError{}

// Validate checks the field values on GdtAdgroup_GeoLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GdtAdgroup_GeoLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAdgroup_GeoLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GdtAdgroup_GeoLocationMultiError, or nil if none found.
func (m *GdtAdgroup_GeoLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAdgroup_GeoLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GdtAdgroup_GeoLocationMultiError(errors)
	}

	return nil
}

// GdtAdgroup_GeoLocationMultiError is an error wrapping multiple validation
// errors returned by GdtAdgroup_GeoLocation.ValidateAll() if the designated
// constraints aren't met.
type GdtAdgroup_GeoLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAdgroup_GeoLocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAdgroup_GeoLocationMultiError) AllErrors() []error { return m }

// GdtAdgroup_GeoLocationValidationError is the validation error returned by
// GdtAdgroup_GeoLocation.Validate if the designated constraints aren't met.
type GdtAdgroup_GeoLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAdgroup_GeoLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAdgroup_GeoLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAdgroup_GeoLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAdgroup_GeoLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAdgroup_GeoLocationValidationError) ErrorName() string {
	return "GdtAdgroup_GeoLocationValidationError"
}

// Error satisfies the builtin error interface
func (e GdtAdgroup_GeoLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAdgroup_GeoLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAdgroup_GeoLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAdgroup_GeoLocationValidationError{}

// Validate checks the field values on GdtAdgroup_Targeting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GdtAdgroup_Targeting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GdtAdgroup_Targeting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GdtAdgroup_TargetingMultiError, or nil if none found.
func (m *GdtAdgroup_Targeting) ValidateAll() error {
	return m.validate(true)
}

func (m *GdtAdgroup_Targeting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAge() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GdtAdgroup_TargetingValidationError{
						field:  fmt.Sprintf("Age[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GdtAdgroup_TargetingValidationError{
						field:  fmt.Sprintf("Age[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GdtAdgroup_TargetingValidationError{
					field:  fmt.Sprintf("Age[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetGeoLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GdtAdgroup_TargetingValidationError{
					field:  "GeoLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GdtAdgroup_TargetingValidationError{
					field:  "GeoLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGeoLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GdtAdgroup_TargetingValidationError{
				field:  "GeoLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GdtAdgroup_TargetingMultiError(errors)
	}

	return nil
}

// GdtAdgroup_TargetingMultiError is an error wrapping multiple validation
// errors returned by GdtAdgroup_Targeting.ValidateAll() if the designated
// constraints aren't met.
type GdtAdgroup_TargetingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GdtAdgroup_TargetingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GdtAdgroup_TargetingMultiError) AllErrors() []error { return m }

// GdtAdgroup_TargetingValidationError is the validation error returned by
// GdtAdgroup_Targeting.Validate if the designated constraints aren't met.
type GdtAdgroup_TargetingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GdtAdgroup_TargetingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GdtAdgroup_TargetingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GdtAdgroup_TargetingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GdtAdgroup_TargetingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GdtAdgroup_TargetingValidationError) ErrorName() string {
	return "GdtAdgroup_TargetingValidationError"
}

// Error satisfies the builtin error interface
func (e GdtAdgroup_TargetingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGdtAdgroup_Targeting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GdtAdgroup_TargetingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GdtAdgroup_TargetingValidationError{}
